<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iTextSharp.LGPLv2.Core</name>
    </assembly>
    <members>
        <member name="T:iTextSharp.text.Anchor">
            <summary>
                An Anchor can be a reference or a destination of a reference.
            </summary>
            <remarks>
                An Anchor is a special kind of <see cref="T:iTextSharp.text.Phrase" />.
                It is constructed in the same way.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Phrase" />
        </member>
        <member name="F:iTextSharp.text.Anchor.name">
            <summary>
                This is the name of the Anchor.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Anchor.reference">
            <summary>
                This is the reference of the Anchor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs an Anchor without specifying a leading.
            </summary>
            <overloads>
                Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single)">
            <summary>
                Constructs an Anchor with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(iTextSharp.text.Chunk)">
            <summary>
                Constructs an Anchor with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.String)">
            <summary>
                Constructs an Anchor with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
                Constructs an Anchor with a certain string
                and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
                Constructs an Anchor with a certain Chunk
                and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,System.String)">
            <summary>
                Constructs an Anchor with a certain leading
                and a certain string.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
                Constructs an Anchor with a certain leading,
                a certain string and a certain Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(iTextSharp.text.Phrase)">
            <summary>
                Constructs an  Anchor  with a certain  Phrase .
            </summary>
            <param name="phrase">a  Phrase </param>
        </member>
        <member name="P:iTextSharp.text.Anchor.Chunks">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Name">
            <summary>
                Name of this Anchor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Anchor.Reference">
            <summary>
                reference of this Anchor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Anchor.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Url">
            <summary>
                methods
            </summary>
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                reference of this Anchor.
            </summary>
            <value>an Uri</value>
        </member>
        <member name="M:iTextSharp.text.Anchor.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                <see cref="T:iTextSharp.text.IElementListener" />
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="T:iTextSharp.text.Annotation">
            <summary>
                An Annotation is a little note that can be added to a page
                on a document.
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Anchor" />
        </member>
        <member name="F:iTextSharp.text.Annotation.APPLICATION">
            <summary>
                membervariables
            </summary>
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.CONTENT">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.DEFAULTDIR">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.DESTINATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE_DEST">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE_PAGE">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LAUNCH">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LLX">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LLY">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.MIMETYPE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.NAMED">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.NAMED_DEST">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.OPERATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.PAGE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.PARAMETERS">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.SCREEN">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.TEXT">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.TITLE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL_AS_STRING">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL_NET">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URX">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URY">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation._llx">
            <summary>This is the lower left x-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation._lly">
            <summary>This is the lower left y-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation._urx">
            <summary>This is the upper right x-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation._ury">
            <summary>This is the upper right y-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.AnnotationAttributes">
            <summary>This is the title of the Annotation.</summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(iTextSharp.text.Annotation)">
            <summary>
                constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.String,System.String)">
            <summary>
                Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="title">the title of the annotation</param>
            <param name="text">the content of the annotation</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="title">the title of the annotation</param>
            <param name="text">the content of the annotation</param>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Uri)">
            <summary>
                Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="url">the external reference</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
                Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="url">the external reference</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
                Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="file">an external PDF file</param>
            <param name="dest">the destination in this file</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean)">
            <summary>
                Creates a Screen anotation to embed media clips
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="moviePath">path to the media clip file</param>
            <param name="mimeType">mime type of the media</param>
            <param name="showOnDisplay">if true play on display of the page</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32)">
            <summary>
                Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="file">an external PDF file</param>
            <param name="page">a page number in this file</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="named">a named destination in this file</param>
            <overloads>
                Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.String)">
            <summary>
                Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="application">an external application</param>
            <param name="parameters">parameters to pass to this application</param>
            <param name="operation">the operation to pass to this application</param>
            <param name="defaultdir">the default directory to run this application in</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="P:iTextSharp.text.Annotation.AnnotationType">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Returns the type of this Annotation.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Attributes">
            <summary>
                Gets the content of this Annotation.
            </summary>
            <value>a reference</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Content">
            <summary>
                Gets the content of this Annotation.
            </summary>
            <value>a reference</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Title">
            <summary>
                Returns the title of this Annotation.
            </summary>
            <value>a name</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Type">
            <summary>
                Gets the type of the text element
            </summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was process successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLlx">
            <summary>
                methods
            </summary>
            <summary>
                Returns the lower left x-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLlx(System.Single)">
            <summary>
                Returns the lower left x-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLly">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Returns the lower left y-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLly(System.Single)">
            <summary>
                Returns the lower left y-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUrx">
            <summary>
                Returns the uppper right x-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUrx(System.Single)">
            <summary>
                Returns the upper right x-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUry">
            <summary>
                Returns the uppper right y-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUry(System.Single)">
            <summary>
                Returns the upper right y-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.SetDimensions(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                methods
            </summary>
            <summary>
                Sets the dimensions of this annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="T:iTextSharp.text.BadElementException">
            <summary>
                Signals an attempt to create an Element that hasn't got the right form.
            </summary>
            <seealso cref="T:iTextSharp.text.Cell" />
            <seealso cref="T:iTextSharp.text.Table" />
        </member>
        <member name="T:iTextSharp.text.BaseColor">
            <summary>
                Base class for Color, serves as wrapper class for <see cref="T:System.Drawing.Color" />
                to allow extension.
            </summary>
        </member>
        <member name="M:iTextSharp.text.BaseColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:iTextSharp.text.BaseColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:iTextSharp.text.BaseColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:iTextSharp.text.BaseColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:iTextSharp.text.BaseColor.#ctor(System.Drawing.Color)">
            <summary>
                Constructor for Color object
            </summary>
            <param name="color">a Color object</param>
            <overloads>
                Has three overloads.
            </overloads>
        </member>
        <member name="P:iTextSharp.text.BaseColor.B">
            <summary>
                Gets the blue component value of this <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <value>The blue component value of this <see cref="T:System.Drawing.Color" /> structure.</value>
        </member>
        <member name="P:iTextSharp.text.BaseColor.G">
            <summary>
                Gets the green component value of this <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <value>The green component value of this <see cref="T:System.Drawing.Color" /> structure.</value>
        </member>
        <member name="P:iTextSharp.text.BaseColor.R">
            <summary>
                Gets the red component value of this <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <value>The red component value of this <see cref="T:System.Drawing.Color" /> structure.</value>
        </member>
        <member name="T:iTextSharp.text.Cell">
            <summary>
                A Cell is a Rectangle containing other Elements.
            </summary>
            <remarks>
                A Cell is a Rectangle containing other
                Elements.
                A Cell must be added to a Table.
                The Table will place the Cell in
                a Row.
            </remarks>
            <example>
                Table table = new Table(3);
                table.SetBorderWidth(1);
                table.SetBorderColor(new Color(0, 0, 255));
                table.SetCellpadding(5);
                table.SetCellspacing(5);
                Cell cell = new Cell("header");
                cell.SetHeader(true);
                cell.SetColspan(3);
                table.AddCell(cell);
                cell = new Cell("example cell with colspan 1 and rowspan 2");
                cell.SetRowspan(2);
                cell.SetBorderColor(new Color(255, 0, 0));
                table.AddCell(cell);
                table.AddCell("1.1");
                table.AddCell("2.1");
                table.AddCell("1.2");
                table.AddCell("2.2");
            </example>
            <seealso cref="T:iTextSharp.text.Rectangle" />
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Table" />
            <seealso cref="T:iTextSharp.text.Row" />
        </member>
        <member name="F:iTextSharp.text.Cell._leading">
            <summary> This is the leading. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell._showTruncation">
            <summary>
                If a truncation happens due to the {@link #maxLines} property, then this text will
                be added to indicate a truncation has happened.
                Default value is null, and means avoiding marking the truncation.
                A useful value of this property could be e.g. "..."
                (contributed by dperezcar@fcc.es)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.ArrayList">
            <summary>
                static membervariable
            </summary>
            <summary> This is the ArrayList of Elements. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.colspan">
            <summary> This is the colspan. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.groupChange">
            <summary>Does this  Cell  force a group change? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.header">
            <summary> Is this Cell a header? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.horizontalAlignment">
            <summary>
                membervariables
            </summary>
            <summary> This is the horizontal Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.maxLines">
            <summary>
                Maximum number of lines allowed in the cell.
                The default value of this property is not to limit the maximum number of lines
                (contributed by dperezcar@fcc.es)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.noWrap">
            <summary> Will the element have to be wrapped? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.rowspan">
            <summary> This is the rowspan. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useAscender">
            <summary>
                Indicates that the largest ascender height should be used to determine the
                height of the first line.  Note that this only has an effect when rendered
                to PDF.  Setting this to true can help with vertical alignment problems.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useBorderPadding">
            <summary>
                Adjusts the cell contents to compensate for border widths.  Note that
                this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useDescender">
            <summary>
                Indicates that the largest descender height should be added to the height of
                the last line (so characters like y don't dip into the border).   Note that
                this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.verticalAlignment">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.width">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor">
            <summary>
                Constructs an empty Cell.
            </summary>
            <summary>
                Constructs an empty Cell.
            </summary>
            <overloads>
                Has five overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.Boolean)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs an empty Cell (for internal use only).
            </summary>
            <param name="dummy">a dummy value</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.String)">
            <summary>
                Constructs a Cell with a certain content.
            </summary>
            <remarks>
                The string will be converted into a Paragraph.
            </remarks>
            <param name="content">a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(iTextSharp.text.IElement)">
            <summary>
                Constructs a Cell with a certain Element.
            </summary>
            <remarks>
                if the element is a ListItem, Row or
                Cell, an exception will be thrown.
            </remarks>
            <param name="element">the element</param>
        </member>
        <member name="P:iTextSharp.text.Cell.Bottom">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Colspan">
            <summary>
                Gets the colspan.
            </summary>
            <returns>a value</returns>
            <summary>
                Gets/sets the colspan.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Elements">
            <summary>
                Gets Elements.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Cell.GroupChange">
            <summary>
                Does this  Cell  force a group change?
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.Header">
            <summary>
                Gets/sets header
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.HorizontalAlignment">
            <summary>
                Gets/Sets the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Leading">
            <summary>
                Gets/sets the leading.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Left">
            <summary>
                This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.MaxLines">
            <summary>
                get/set maxLines value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.NoWrap">
            <summary>
                Get nowrap.
            </summary>
            <returns>a value</returns>
            <summary>
                Get/set nowrap.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Right">
            <summary>
                This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Rowspan">
            <summary>
                Gets/sets the rowspan.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.ShowTruncation">
            <summary>
                get/set showTruncation value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.Size">
            <summary>
                Gets the number of Elements in the Cell.
            </summary>
            <value>a size</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Top">
            <summary>
                This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.UseAscender">
            <summary>
                get/set useAscender value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseBorderPadding">
            <summary>
                get/set useBorderPadding value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseDescender">
            <summary>
                get/set useDescender value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.VerticalAlignment">
            <summary>
                Gets/sets the vertical Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Width">
            <summary>
                Sets the width.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Cell.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.Add(iTextSharp.text.IElement)">
            <summary>
                Add an Object to this cell.
            </summary>
            <param name="o">the object to add</param>
            <returns>always true</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.IsTag(System.String)">
            <summary>
                Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.AddElement(iTextSharp.text.IElement)">
            <summary>
                Adds an element to this Cell.
            </summary>
            <remarks>
                You can't add ListItems, Rows, Cells,
                JPEGs, GIFs or PNGs to a Cell.
            </remarks>
            <param name="element">the Element to add</param>
        </member>
        <member name="M:iTextSharp.text.Cell.Clear">
            <summary>
                Clears all the Elements of this Cell.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.CreatePdfPCell">
            <summary>
                Creates a PdfPCell based on this Cell object.
                @throws BadElementException
            </summary>
            <returns>a PdfPCell</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetBottom(System.Int32)">
            <summary>
                This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetLeft(System.Int32)">
            <summary>
                This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetRight(System.Int32)">
            <summary>
                This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetTop(System.Int32)">
            <summary>
                This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetWidthAsString">
            <summary>
                Gets the width as a String.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.IsEmpty">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Checks if the Cell is empty.
            </summary>
            <returns>false if there are non-empty Elements in the Cell.</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.IsTable">
            <summary>
                Checks if the Cell is empty.
            </summary>
            <returns>false if there are non-empty Elements in the Cell.</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.SetHorizontalAlignment(System.String)">
            <summary>
                methods to set the membervariables
            </summary>
            <summary>
                Sets the alignment of this cell.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.SetVerticalAlignment(System.String)">
            <summary>
                Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.SetWidth(System.String)">
            <summary>
                Sets the width.
                It can be an absolute value "100" or a percentage "20%"
            </summary>
            <param name="value">the new value</param>
        </member>
        <member name="M:iTextSharp.text.Cell.Fill">
            <summary>
                Makes sure there is at least 1 object in the Cell.
                Otherwise it might not be shown in the table.
            </summary>
        </member>
        <member name="T:iTextSharp.text.Chapter">
            <summary>
                A Chapter is a special Section.
            </summary>
            <remarks>
                A chapter number has to be created using a Paragraph as title
                and an int as chapter number. The chapter number is shown be
                default. If you don't want to see the chapter number, you have to set the
                numberdepth to 0.
            </remarks>
            <example>
                Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 18,
                Font.BOLDITALIC, new Color(0, 0, 255)));
                Chapter chapter2 = new Chapter(title2, 2);
                chapter2.SetNumberDepth(0);
                Paragraph someText = new Paragraph("This is some text");
                chapter2.Add(someText);
                Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 16,
                Font.BOLD, new Color(255, 0, 0)));
                Section section1 =  chapter2.AddSection(title21);
                Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains
                some text to test the functionality of Chapters and Section.");
                section1.Add(someSectionText);
            </example>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(System.Int32)">
            <summary>
                Constructs a new  Chapter .
            </summary>
            <param name="number">the Chapter number</param>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
                Constructs a new Chapter.
            </summary>
            <param name="title">the Chapter title (as a Paragraph)</param>
            <param name="number">the Chapter number</param>
            <overoads>
                Has three overloads.
            </overoads>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(System.String,System.Int32)">
            <summary>
                Constructs a new Chapter.
            </summary>
            <param name="title">the Chapter title (as a string)</param>
            <param name="number">the Chapter number</param>
            <overoads>
                Has three overloads.
            </overoads>
        </member>
        <member name="P:iTextSharp.text.Chapter.Type">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Chapter.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="T:iTextSharp.text.ChapterAutoNumber">
            <summary>
                Chapter with auto numbering.
                @author Michael Niedermair
            </summary>
        </member>
        <member name="F:iTextSharp.text.ChapterAutoNumber.NumberSet">
            <summary>
                Is the chapter number already set?
                @since	2.1.4
            </summary>
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.#ctor(iTextSharp.text.Paragraph)">
            <summary>
                Create a new object.
            </summary>
            <param name="para">the Chapter title (as a  Paragraph )</param>
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.#ctor(System.String)">
            <summary>
                Create a new objet.
            </summary>
            <param name="title">the Chapter title (as a  String )</param>
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.AddSection(System.String)">
            <summary>
                Create a new section for this chapter and ad it.
            </summary>
            <param name="title">the Section title (as a  String )</param>
            <returns>Returns the new section.</returns>
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.AddSection(iTextSharp.text.Paragraph)">
            <summary>
                Create a new section for this chapter and add it.
            </summary>
            <param name="title">the Section title (as a  Paragraph )</param>
            <returns>Returns the new section.</returns>
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.SetAutomaticNumber(System.Int32)">
            <summary>
                Changes the Chapter number.
                @since 2.1.4
            </summary>
            <param name="number">chapter number</param>
        </member>
        <member name="T:iTextSharp.text.Chunk">
            <summary>
                This is the smallest significant part of text that can be added to a document.
            </summary>
            <remarks>
                Most elements can be divided in one or more Chunks.
                A chunk is a string with a certain Font.
                all other layoutparameters should be defined in the object to which
                this chunk of text is added.
            </remarks>
            <example>
                Chunk chunk = new Chunk("Hello world", FontFactory.GetFont(FontFactory.COURIER, 20, Font.ITALIC, new Color(255, 0,
                0)));
                document.Add(chunk);
            </example>
        </member>
        <member name="F:iTextSharp.text.Chunk.ACTION">
            <summary>
                public static membervariables
            </summary>
            <summary> Key for Action. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.BACKGROUND">
            <summary> Key for background. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.COLOR">
            <summary> Key for color. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.ENCODING">
            <summary>
                keys used in PdfChunk
            </summary>
            <summary> Key for encoding. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.GENERICTAG">
            <summary> Key for generic tag. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.HSCALE">
            <summary>
                Key for text horizontal scaling.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.HYPHENATION">
            <summary> Key for hyphenation. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.IMAGE">
            <summary> Key for image. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.LOCALDESTINATION">
            <summary> Key for local destination. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.LOCALGOTO">
            <summary> Key for local goto. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.NEWPAGE">
            <summary> Key for newpage. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.OBJECT_REPLACEMENT_CHARACTER">
            <summary>
                The character stand in for an image or a separator.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.PDFANNOTATION">
            <summary> Key for annotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.REMOTEGOTO">
            <summary> Key for remote goto. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SEPARATOR">
            <summary>
                Key for drawInterface of the Separator.
                @since   2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SKEW">
            <summary> Key for text skewing. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SPLITCHARACTER">
            <summary> Key for split character. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SUBSUPSCRIPT">
            <summary> Key for sub/basescript. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.TAB">
            <summary>
                Key for drawInterface of the tab.
                @since   2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.TEXTRENDERMODE">
            <summary> Key for text rendering mode.</summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.UNDERLINE">
            <summary> Key for underline. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.Newline">
            <summary> This is a Chunk containing a newline. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.Nextpage">
            <summary>
                This is a Chunk containing a newpage.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.attributes">
            <summary> Contains some of the attributes for this Chunk. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.content">
            <summary> This is the content of this chunk of text. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.font">
            <summary>
                member variables
            </summary>
            <summary> This is the Font of this chunk of text. </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Empty constructor.
            </summary>
            <overloads>
                Has six overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Chunk)">
            <summary>
                A  Chunk  copy constructor.
            </summary>
            <param name="ck">the  Chunk  to be copied</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
                Constructs a chunk of text with a certain content and a certain Font.
            </summary>
            <param name="content">the content</param>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.String)">
            <summary>
                Constructs a chunk of text with a certain content, without specifying a Font.
            </summary>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.Char,iTextSharp.text.Font)">
            <summary>
                Constructs a chunk of text with a char and a certain  Font .
            </summary>
            <param name="c">the content</param>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.Char)">
            <summary>
                Constructs a chunk of text with a char, without specifying a  Font .
            </summary>
            <param name="c">the content</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Image,System.Single,System.Single)">
            <summary>
                Constructs a chunk containing an Image.
            </summary>
            <param name="image">the image</param>
            <param name="offsetX">the image offset in the x direction</param>
            <param name="offsetY">the image offset in the y direction</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface)">
            <summary>
                Creates a separator Chunk.
                Note that separator chunks can't be used in combination with tab chunks!
                @since   2.1.2
            </summary>
            <param name="separator">the drawInterface to use to draw the separator.</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Boolean)">
            <summary>
                Creates a separator Chunk.
                Note that separator chunks can't be used in combination with tab chunks!
                @since   2.1.2
            </summary>
            <param name="separator">the drawInterface to use to draw the separator.</param>
            <param name="vertical">true if this is a vertical separator</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Single)">
            <summary>
                Creates a tab Chunk.
                Note that separator chunks can't be used in combination with tab chunks!
                @since   2.1.2
            </summary>
            <param name="separator">the drawInterface to use to draw the tab.</param>
            <param name="tabPosition">an X coordinate that will be used as start position for the next Chunk.</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Single,System.Boolean)">
            <summary>
                Creates a tab Chunk.
                Note that separator chunks can't be used in combination with tab chunks!
                @since   2.1.2
            </summary>
            <param name="separator">the drawInterface to use to draw the tab.</param>
            <param name="tabPosition">an X coordinate that will be used as start position for the next Chunk.</param>
            <param name="newline">if true, a newline will be added if the tabPosition has already been reached.</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Image,System.Single,System.Single,System.Boolean)">
            <summary>
                Constructs a chunk containing an Image.
            </summary>
            <param name="image">the image</param>
            <param name="offsetX">the image offset in the x direction</param>
            <param name="offsetY">the image offset in the y direction</param>
            <param name="changeLeading">true if the leading has to be adapted to the image</param>
        </member>
        <member name="P:iTextSharp.text.Chunk.Attributes">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Gets the attributes for this Chunk.
            </summary>
            <remarks>
                It may be null.
            </remarks>
            <value>a Hashtable</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Content">
            <summary>
                Returns the content of this Chunk.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Font">
            <summary>
                Get/set the font of this Chunk.
            </summary>
            <value>a Font</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.HorizontalScaling">
            <summary>
                Gets the horizontal scaling.
            </summary>
            <returns>a percentage in float</returns>
        </member>
        <member name="P:iTextSharp.text.Chunk.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.ToString">
            <summary>
                methods
            </summary>
            <summary>
                methods to retrieve information
            </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsTag(System.String)">
            <summary>
                Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.Append(System.String)">
            <summary>
                appends some text to this Chunk.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetHyphenation">
            <summary>
                Returns the hyphenation (if present).
                @since    2.1.2
            </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetImage">
            <summary>
                Returns the image.
            </summary>
            <value>an Image</value>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetWidthPoint">
            <summary>
                Gets the width of the Chunk in points.
            </summary>
            <returns>a width in points</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.HasAttributes">
            <summary>
                Checks the attributes of this Chunk.
            </summary>
            <returns>false if there aren't any.</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsEmpty">
            <summary>
                Checks is this Chunk is empty.
            </summary>
            <returns>false if the Chunk contains other characters than space.</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAction(iTextSharp.text.pdf.PdfAction)">
            <summary>
                Sets an action for this Chunk.
            </summary>
            <param name="action">the action</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnchor(System.Uri)">
            <summary>
                Sets an anchor for this Chunk.
            </summary>
            <param name="url">the Uri to link to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnchor(System.String)">
            <summary>
                Sets an anchor for this Chunk.
            </summary>
            <param name="url">the url to link to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            <summary>
                Sets a generic annotation to this Chunk.
            </summary>
            <param name="annotation">the annotation</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetBackground(iTextSharp.text.BaseColor)">
            <summary>
                Sets the color of the background Chunk.
            </summary>
            <param name="color">the color of the background</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetBackground(iTextSharp.text.BaseColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the color and the size of the background  Chunk .
            </summary>
            <param name="color">the color of the background</param>
            <param name="extraLeft">increase the size of the rectangle in the left</param>
            <param name="extraBottom">increase the size of the rectangle in the bottom</param>
            <param name="extraRight">increase the size of the rectangle in the right</param>
            <param name="extraTop">increase the size of the rectangle in the top</param>
            <returns>this  Chunk </returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetGenericTag(System.String)">
            <summary>
                Sets the generic tag Chunk.
            </summary>
            <remarks>
                The text for this tag can be retrieved with PdfPageEvent.
            </remarks>
            <param name="text">the text for the tag</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetHorizontalScaling(System.Single)">
            <summary>
                Sets the text horizontal scaling. A value of 1 is normal and a value of 0.5f
                shrinks the text to half it's width.
            </summary>
            <param name="scale">the horizontal scaling factor</param>
            <returns>this  Chunk </returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetHyphenation(iTextSharp.text.pdf.IHyphenationEvent)">
            <summary>
                sets the hyphenation engine to this Chunk.
            </summary>
            <param name="hyphenation">the hyphenation engine</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetLocalDestination(System.String)">
            <summary>
                Sets a local destination for this Chunk.
            </summary>
            <param name="name">the name for this destination</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetLocalGoto(System.String)">
            <summary>
                Sets a local goto for this Chunk.
            </summary>
            <remarks>
                There must be a local destination matching the name.
            </remarks>
            <param name="name">the name of the destination to go to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetNewPage">
            <summary>
                Sets a new page tag.
            </summary>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetRemoteGoto(System.String,System.String)">
            <summary>
                Sets a goto for a remote destination for this Chunk.
            </summary>
            <param name="filename">the file name of the destination document</param>
            <param name="name">the name of the destination to go to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetRemoteGoto(System.String,System.Int32)">
            <summary>
                Sets a goto for a remote destination for this Chunk.
            </summary>
            <param name="filename">the file name of the destination document</param>
            <param name="page">the page of the destination to go to. First page is 1</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetSkew(System.Single,System.Single)">
            <summary>
                Skews the text to simulate italic and other effects.
                Try  alpha=0  and  beta=12 .
            </summary>
            <param name="alpha">the first angle in degrees</param>
            <param name="beta">the second angle in degrees</param>
            <returns>this  Chunk </returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetSplitCharacter(iTextSharp.text.ISplitCharacter)">
            <summary>
                Sets the split characters.
            </summary>
            <param name="splitCharacter">the SplitCharacter interface</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetTextRenderMode(System.Int32,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Sets the text rendering mode. It can outline text, simulate bold and make
                text invisible.
                PdfContentByte.TEXT_RENDER_MODE_STROKE ,  PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE
                and  PdfContentByte.TEXT_RENDER_MODE_INVISIBLE .
                PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE .
            </summary>
            <param name="mode">the text rendering mode. It can be  PdfContentByte.TEXT_RENDER_MODE_FILL ,</param>
            <param name="strokeWidth">the stroke line width for the modes  PdfContentByte.TEXT_RENDER_MODE_STROKE  and</param>
            <param name="strokeColor">the stroke color or  null  to follow the text color</param>
            <returns>this  Chunk </returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetTextRise(System.Single)">
            <summary>
                Sets the text displacement relative to the baseline. Positive values rise the text,
                negative values lower the text.
            </summary>
            <remarks>
                It can be used to implement sub/basescript.
            </remarks>
            <param name="rise">the displacement in points</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetUnderline(System.Single,System.Single)">
            <summary>
                Sets an horizontal line that can be an underline or a strikethrough.
                Actually, the line can be anywhere vertically and has always the
                Chunk  width. Multiple call to this method will
                produce multiple lines.
            </summary>
            <param name="thickness">the absolute thickness of the line</param>
            <param name="yPosition">the absolute y position relative to the baseline</param>
            <returns>this  Chunk </returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetUnderline(iTextSharp.text.BaseColor,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Sets an horizontal line that can be an underline or a strikethrough.
                Actually, the line can be anywhere vertically and has always the
                Chunk  width. Multiple call to this method will
                produce multiple lines.
                the text color
                PdfContentByte.LINE_CAP_BUTT, PdfContentByte.LINE_CAP_ROUND and
                PdfContentByte.LINE_CAP_PROJECTING_SQUARE
            </summary>
            <param name="color">the color of the line or  null  to follow</param>
            <param name="thickness">the absolute thickness of the line</param>
            <param name="thicknessMul">the thickness multiplication factor with the font size</param>
            <param name="yPosition">the absolute y position relative to the baseline</param>
            <param name="yPositionMul">the position multiplication factor with the font size</param>
            <param name="cap">the end line cap. Allowed values are</param>
            <returns>this  Chunk </returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.setAttribute(System.String,System.Object)">
            <summary>
                Sets an arbitrary attribute.
            </summary>
            <param name="name">the key for the attribute</param>
            <param name="obj">the value of the attribute</param>
            <returns>this Chunk</returns>
        </member>
        <member name="T:iTextSharp.text.Document">
            <summary>
                A generic Document class.
            </summary>
            <remarks>
                All kinds of Text-elements can be added to a HTMLDocument.
                The Document signals all the listeners when an element
                has been added.
                Once a document is created you can add some meta information.
                You can also set the headers/footers.
                You have to open the document before you can write content.
                You can only write content (no more meta-formation!) once a document is opened.
                When you change the header/footer on a certain page, this will be effective starting on the next page.
                Ater closing the document, every listener (as well as its OutputStream) is closed too.
            </remarks>
            <example>
                // creation of the document with a certain size and certain margins
                Document document = new Document(PageSize.A4, 50, 50, 50, 50);
                try {
                // creation of the different writers
                HtmlWriter.GetInstance( document , System.out);
                PdfWriter.GetInstance( document , new FileOutputStream("text.pdf"));
                // we add some meta information to the document
                document.AddAuthor("Bruno Lowagie");
                document.AddSubject("This is the result of a Test.");
                // we define a header and a footer
                HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
                HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));
                footer.SetAlignment(Element.ALIGN_CENTER);
                document.SetHeader(header);
                document.SetFooter(footer);
                // we open the document for writing
                document.Open();
                document.Add(new Paragraph("Hello world"));
                }
                catch (DocumentException de) {
                Console.Error.WriteLine(de.Message);
                }
                document.Close();
            </example>
        </member>
        <member name="F:iTextSharp.text.Document.Compress">
            <summary> Allows the pdf documents to be produced without compression for debugging purposes. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.WmfFontCorrection">
            <summary> Scales the WMF font size. The default value is 0.86.  </summary>
        </member>
        <member name="F:iTextSharp.text.Document.Chapternumber">
            <summary>
                This is a chapter number in case ChapterAutoNumber is used.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Document.footer">
            <summary> This is the textual part of the footer </summary>
        </member>
        <member name="F:iTextSharp.text.Document.header">
            <summary> This is the textual part of a Page; it can contain a header </summary>
        </member>
        <member name="F:iTextSharp.text.Document.IsDocumentClose">
            <summary> Has the document allready been closed? </summary>
        </member>
        <member name="F:iTextSharp.text.Document.IsDocumentOpen">
            <summary> Is the document open or not? </summary>
        </member>
        <member name="F:iTextSharp.text.Document.MarginMirroringTopBottom">
            <summary>
                mirroring of the top/bottom margins
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.Document._listeners">
            <summary> The IDocListener. </summary>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor">
            <summary>
                membervariables concerning the layout
            </summary>
            <summary>
                headers, footers
            </summary>
            <summary>
                Constructs a new Document-object.
            </summary>
            <overloads>
                Has three overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor(iTextSharp.text.Rectangle)">
            <summary>
                Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor(iTextSharp.text.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
        </member>
        <member name="P:iTextSharp.text.Document.Product">
            <summary>
                listener methods
            </summary>
            <summary>
                Gets the product name.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Document.Release">
            <summary>
            Gets the release number.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Document.Bottom">
            <summary>
                Returns the lower left y-coordinate.
            </summary>
            <value>the lower left y-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.BottomMargin">
            <summary>
                Returns the bottom margin.
            </summary>
            <value>the bottom margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.Footer">
            <summary>
                Changes the footer of this document.
            </summary>
            <value>a HeaderFooter</value>
        </member>
        <member name="P:iTextSharp.text.Document.Header">
            <summary>
                Changes the header of this document.
            </summary>
            <value>a HeaderFooter</value>
        </member>
        <member name="P:iTextSharp.text.Document.HtmlStyleClass">
            <summary>
                Gets the style class of the HTML body tag
            </summary>
            <value>the style class of the HTML body tag</value>
        </member>
        <member name="P:iTextSharp.text.Document.JavaScriptOnLoad">
            <summary>
                Gets the JavaScript onLoad command.
            </summary>
            <value>the JavaScript onLoad command.</value>
        </member>
        <member name="P:iTextSharp.text.Document.JavaScriptOnUnLoad">
            <summary>
                Gets the JavaScript onUnLoad command.
            </summary>
            <value>the JavaScript onUnLoad command</value>
        </member>
        <member name="P:iTextSharp.text.Document.Left">
            <summary>
                Returns the lower left x-coordinate.
            </summary>
            <value>the lower left x-coordinate</value>
        </member>
        <member name="P:iTextSharp.text.Document.LeftMargin">
            <summary>
                Returns the left margin.
            </summary>
            <value>the left margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageCount">
            <summary>
                Sets the page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageNumber">
            <summary>
                Returns the current page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageSize">
            <summary>
                Gets the pagesize.
            </summary>
            <value>the page size</value>
        </member>
        <member name="P:iTextSharp.text.Document.Right">
            <summary>
                Returns the upper right x-coordinate.
            </summary>
            <value>the upper right x-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.RightMargin">
            <summary>
                methods to get the layout of the document.
            </summary>
            <summary>
                Return the right margin.
            </summary>
            <value>the right margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.Top">
            <summary>
                Returns the upper right y-coordinate.
            </summary>
            <value>the upper right y-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.TopMargin">
            <summary>
                Returns the top margin.
            </summary>
            <value>the top margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.Version">
            <summary>
                Gets the iText version.
            </summary>
            <value>iText version</value>
        </member>
        <member name="M:iTextSharp.text.Document.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an Element to the Document.
            </summary>
            <param name="element">the Element to add</param>
            <returns>true if the element was added, false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddAuthor(System.String)">
            <summary>
                Adds the author to a Document.
            </summary>
            <param name="author">the name of the author</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddCreationDate">
            <summary>
                Adds the current date and time to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddCreator(System.String)">
            <summary>
                Adds the creator to a Document.
            </summary>
            <param name="creator">the name of the creator</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddDocListener(iTextSharp.text.IDocListener)">
            <summary>
                Adds a IDocListener to the Document.
            </summary>
            <param name="listener">the new IDocListener</param>
        </member>
        <member name="M:iTextSharp.text.Document.AddHeader(System.String,System.String)">
            <summary>
                Adds a user defined header to the document.
            </summary>
            <param name="name">the name of the header</param>
            <param name="content">the content of the header</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddKeywords(System.String)">
            <summary>
                Adds the keywords to a Document.
            </summary>
            <param name="keywords">keywords to add</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddProducer">
            <summary>
                Adds the producer to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddSubject(System.String)">
            <summary>
                Adds the subject to a Document.
            </summary>
            <param name="subject">the subject</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddTitle(System.String)">
            <summary>
                methods concerning the header or some meta information
            </summary>
            <summary>
                Adds the title to a Document.
            </summary>
            <param name="title">the title</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.Close">
            <summary>
                Closes the document.
            </summary>
            <remarks>
                Once all the content has been written in the body, you have to close
                the body. After that nothing can be written to the body anymore.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.Document.GetBottom(System.Single)">
            <summary>
                Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetLeft(System.Single)">
            <summary>
                Returns the lower left x-coordinate considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetRight(System.Single)">
            <summary>
                Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetTop(System.Single)">
            <summary>
                Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.IsMarginMirroring">
            <summary>
                Gets the margin mirroring flag.
            </summary>
            <returns>the margin mirroring flag</returns>
        </member>
        <member name="M:iTextSharp.text.Document.IsOpen">
            <summary>
                Checks if the document is open.
            </summary>
            <returns>true if the document is open</returns>
        </member>
        <member name="M:iTextSharp.text.Document.NewPage">
            <summary>
                Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Document.Open">
            <summary>
                methods implementing the IDocListener interface
            </summary>
            <summary>
                Opens the document.
            </summary>
            <remarks>
                Once the document is opened, you can't write any Header- or Meta-information
                anymore. You have to open the document before you can begin to add content
                to the body of the document.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.Document.RemoveIDocListener(iTextSharp.text.IDocListener)">
            <summary>
                Removes a IDocListener from the Document.
            </summary>
            <param name="listener">the IDocListener that has to be removed.</param>
        </member>
        <member name="M:iTextSharp.text.Document.ResetFooter">
            <summary>
                Resets the footer of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.ResetHeader">
            <summary>
                Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.ResetPageCount">
            <summary>
                Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.SetMarginMirroring(System.Boolean)">
            <summary>
                Set the margin mirroring. It will mirror right/left margins for odd/even pages.
                Note: it will not work with {@link Table}.
                true  to mirror the margins
            </summary>
            <param name="marginMirroring"></param>
            <returns>always  true </returns>
        </member>
        <member name="M:iTextSharp.text.Document.SetMarginMirroringTopBottom(System.Boolean)">
            <summary>
                Set the margin mirroring. It will mirror top/bottom margins for odd/even pages.
                Note: it will not work with {@link Table}.
                true  to mirror the margins
                @since	2.1.6
            </summary>
            <param name="marginMirroringTopBottom"></param>
            <returns>always  true </returns>
        </member>
        <member name="M:iTextSharp.text.Document.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Document.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
                Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a bool</returns>
        </member>
        <member name="T:iTextSharp.text.DocumentException">
            <summary>
                Signals that an error has occurred in a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.BadElementException" />
            <seealso cref="T:iTextSharp.text.Document" />
            <seealso cref="T:iTextSharp.text.DocWriter" />
            <seealso cref="T:iTextSharp.text.IDocListener" />
        </member>
        <member name="M:iTextSharp.text.DocumentException.#ctor">
            <summary>
                Constructs a new DocumentException
            </summary>
            <overloads>
                Has two overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.DocumentException.#ctor(System.String)">
            <summary>
                Construct a new DocumentException
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:iTextSharp.text.DocWriter">
            <summary>
                An abstract Writer class for documents.
            </summary>
            <remarks>
                DocWriter is the abstract class of several writers such
                as PdfWriter and HtmlWriter.
                A DocWriter can be added as a DocListener
                to a certain Document by getting an instance (see method
                GetInstance() in the specific writer-classes).
                Every Element added to the original Document
                will be written to the stream of the listening
                DocWriter.
            </remarks>
            <seealso cref="T:iTextSharp.text.Document" />
            <seealso cref="T:iTextSharp.text.IDocListener" />
        </member>
        <member name="F:iTextSharp.text.DocWriter.EQUALS">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.FORWARD">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.GT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.LT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.NEWLINE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.QUOTE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.SPACE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.TAB">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.closeStream">
            <summary>
                Closes the stream on document close
            </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.Document">
            <summary> This is the document that has to be written. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.open">
            <summary> Is the writer open for writing? </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.Os">
            <summary>
                membervariables
            </summary>
            <summary> The stream of this writer. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.PageSize">
            <summary> The pageSize. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.pause">
            <summary> Do we have to pause all writing actions? </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.#ctor">
            <summary>
                constructor
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                Constructs a DocWriter.
            </summary>
            <param name="document">The Document that has to be written</param>
            <param name="os">The Stream the writer has to write to.</param>
        </member>
        <member name="P:iTextSharp.text.DocWriter.CloseStream">
            <summary>
                implementation of the DocListener methods
            </summary>
        </member>
        <member name="P:iTextSharp.text.DocWriter.Footer">
            <summary>
                Changes the footer of this document.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class if they actually support the use of
                footers.
            </remarks>
            <value>the new footer</value>
        </member>
        <member name="P:iTextSharp.text.DocWriter.Header">
            <summary>
                Changes the header of this document.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class if they actually support the use of
                headers.
            </remarks>
            <value>the new header</value>
        </member>
        <member name="P:iTextSharp.text.DocWriter.PageCount">
            <summary>
                Sets the page number.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class if they actually support the use of
                pagenumbers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Add(iTextSharp.text.IElement)">
            <summary>
                Signals that an Element was added to the Document.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class.
            </remarks>
            <param name="element"></param>
            <returns>false</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Close">
            <summary>
                Signals that the Document was closed and that no other
                Elements will be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.NewPage">
            <summary>
                Signals that an new page has to be started.
            </summary>
            <remarks>
                This does nothing. Has to be overridden if needed.
            </remarks>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Open">
            <summary>
                Signals that the Document was opened.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetFooter">
            <summary>
                Resets the footer of this document.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class if they actually support the use of
                footers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetHeader">
            <summary>
                Resets the header of this document.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class if they actually support the use of
                headers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetPageCount">
            <summary>
                Sets the page number to 0.
            </summary>
            <remarks>
                This method should be overriden in the specific DocWriter classes
                derived from this abstract class if they actually support the use of
                pagenumbers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetMarginMirroringTopBottom(System.Boolean)">
            <summary>
                @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
                @since	2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the margins.
            </summary>
            <remarks>
                This does nothing. Has to be overridden if needed.
            </remarks>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
                Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.GetIsoBytes(System.String)">
            <summary>
                Converts a string into a Byte array
                according to the ISO-8859-1 codepage.
            </summary>
            <param name="text">the text to be converted</param>
            <returns>the conversion result</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Flush">
            <summary>
                Flushes the Stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Pause">
            <summary>
                methods
            </summary>
            <summary>
                Let the writer know that all writing has to be paused.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Resume">
            <summary>
                Checks if writing is paused.
            </summary>
            <returns> true  if writing temporarely has to be paused,  false  otherwise.</returns>
            <summary>
                Let the writer know that writing may be resumed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.AddTabs(System.Int32)">
            <summary>
                Writes a number of tabs.
            </summary>
            <param name="indent">the number of tabs to add</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Write(System.String)">
            <summary>
                Writes a string to the stream.
            </summary>
            <param name="str">the string to write</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Write(System.String,System.String)">
            <summary>
                Writes a key-value pair to the stream.
            </summary>
            <param name="key">the name of an attribute</param>
            <param name="value">the value of an attribute</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteEnd(System.String)">
            <summary>
                Writes an endtag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteEnd">
            <summary>
                Writes an endtag to the stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteMarkupAttributes(System.util.Properties)">
            <summary>
                Writes the markup attributes of the specified MarkupAttributes
                object to the stream.
            </summary>
            <param name="markup">the MarkupAttributes to write.</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteStart(System.String)">
            <summary>
                Writes a starttag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="T:iTextSharp.text.Element">
            <summary>
                Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor" />
            <seealso cref="T:iTextSharp.text.Cell" />
            <seealso cref="T:iTextSharp.text.Chapter" />
            <seealso cref="T:iTextSharp.text.Chunk" />
            <seealso cref="T:iTextSharp.text.Gif" />
            <seealso cref="T:iTextSharp.text.Graphic" />
            <seealso cref="T:iTextSharp.text.Header" />
            <seealso cref="T:iTextSharp.text.Image" />
            <seealso cref="T:iTextSharp.text.Jpeg" />
            <seealso cref="T:iTextSharp.text.List" />
            <seealso cref="T:iTextSharp.text.ListItem" />
            <seealso cref="T:iTextSharp.text.Meta" />
            <seealso cref="T:iTextSharp.text.Paragraph" />
            <seealso cref="T:iTextSharp.text.Phrase" />
            <seealso cref="T:iTextSharp.text.Rectangle" />
            <seealso cref="T:iTextSharp.text.Row" />
            <seealso cref="T:iTextSharp.text.Section" />
            <seealso cref="T:iTextSharp.text.Table" />
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_BASELINE">
            <summary>
                static membervariables (meta information)
            </summary>
            <summary>
                A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_BOTTOM">
            <summary>
                A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_CENTER">
            <summary>
                A possible value for paragraph Element.  This
                specifies that the text is aligned to the center
                and extra whitespace should be placed equally on
                the left and right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_JUSTIFIED">
            <summary>
                A possible value for paragraph Element.  This
                specifies that extra whitespace should be spread
                out through the rows of the paragraph with the
                text lined up with the left and right indent
                except on the last line which should be aligned
                to the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_JUSTIFIED_ALL">
            <summary>
                Does the same as ALIGN_JUSTIFIED but the last line is also spread out.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_LEFT">
            <summary>
                A possible value for paragraph Element.  This
                specifies that the text is aligned to the left
                indent and extra whitespace should be placed on
                the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_MIDDLE">
            <summary>
                A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_RIGHT">
            <summary>
                A possible value for paragraph Element.  This
                specifies that the text is aligned to the right
                indent and extra whitespace should be placed on
                the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_TOP">
            <summary>
                A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_UNDEFINED">
            <summary>
                A possible value for paragraph Element.  This
                specifies that the text is aligned to the left
                indent and extra whitespace should be placed on
                the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ANCHOR">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ANNOTATION">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.AUTHOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_BLACKIS1">
            <summary>
                A flag indicating whether 1-bits are to be interpreted as black pixels
                and 0-bits as white pixels,
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENCODEDBYTEALIGN">
            <summary>
                A flag indicating whether the filter expects extra 0-bits before each
                encoded line so that the line begins on a byte boundary.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENDOFBLOCK">
            <summary>
                A flag indicating whether the filter expects the encoded data to be
                terminated by an end-of-block pattern, overriding the Rows
                parameter. The use of this flag will set the key /EndOfBlock to false.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENDOFLINE">
            <summary>
                A flag indicating whether end-of-line bit patterns are required to be
                present in the encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG3_1D">
            <summary>
                Pure one-dimensional encoding (Group 3, 1-D)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG3_2D">
            <summary>
                Mixed one- and two-dimensional encoding (Group 3, 2-D)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG4">
            <summary>
                Pure two-dimensional encoding (Group 4)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CELL">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CHAPTER">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CHUNK">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CREATIONDATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CREATOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.HEADER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.IMGRAW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.IMGTEMPLATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JBIG2">
            <summary>
                This is a possible type of  Element .
                @since	2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JPEG">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JPEG2000">
            <summary>
                This is a possible type of  Element .
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.KEYWORDS">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.LIST">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.LISTITEM">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.MARKED">
            <summary>
                This is a possible type of  Element .
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.MULTI_COLUMN_TEXT">
            <summary> This is a possible type of  Element . </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PARAGRAPH">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PHRASE">
            <summary>
                static membervariables (content)
            </summary>
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PRODUCER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PTABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.RECTANGLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ROW">
            <summary>
                static membervariables (tables)
            </summary>
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.SECTION">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.SUBJECT">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.TABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.TITLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.YMARK">
            <summary>
                This is a possible type of  Element .
                @since 2.1.2
            </summary>
        </member>
        <member name="T:iTextSharp.text.ElementTags">
            <summary>
                A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ABSOLUTEX">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ABSOLUTEY">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN">
            <summary> attribute of paragraph/image/table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_BASELINE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_BOTTOM">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_CENTER">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_INDENTATION_ITEMS">
            <summary>
                a possible list attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_JUSTIFIED">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_JUSTIFIED_ALL">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_LEFT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_MIDDLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_RIGHT">
            <summary>
                alignment attribute values
            </summary>
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_TOP">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ANCHOR">
            <summary> the anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ANNOTATION">
            <summary> the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.APPLICATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.AUTHOR">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.AUTO_INDENT_ITEMS">
            <summary>
                a possible list attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BACKGROUNDCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGBLUE">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGGREEN">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGRED">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BLUE">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BOOKMARKOPEN">
            <summary> the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BORDERCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BORDERWIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BOTTOM">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELL">
            <summary> the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLPADDING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLSFITPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLSPACING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CHAPTER">
            <summary> the chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CHUNK">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLOR">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLUMNS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CONTENT">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CONVERT2PDFP">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CREATIONDATE">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEFAULT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEFAULTDIR">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DESTINATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.EMBEDDED">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ENCODING">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ENTITY">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FACE">
            <summary>
                a possible list attribute
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FILE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FIRST">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FONT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FOOTER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GRAYFILL">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GREEN">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HEADER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HORIZONTALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HORIZONTALRULE">
            <summary> the possible value of a tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ID">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.IGNORE">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.IMAGE">
            <summary> the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENT">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENTATIONLEFT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENTATIONRIGHT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ITEXT">
            <summary> the root tag. </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.KEEPTOGETHER">
            <summary> attribute of paragraph </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.KEYWORDS">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LASTHEADERROW">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LEADING">
            <summary> attribute of phrase/paragraph/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LEFT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LETTERED">
            <summary> attribute of the list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LIST">
            <summary> the list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LISTITEM">
            <summary> the listitem tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LISTSYMBOL">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LLX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LLY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LOWERCASE">
            <summary>
                a possible list attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NAME">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NAMED">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NEWLINE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NEWPAGE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NOWRAP">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBER">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBERDEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBERED">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.OFFSET">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.OPERATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ORIENTATION">
            <summary>
                the possible value of a tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PAGE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PAGE_SIZE">
            <summary>
                the possible value of a tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PARAGRAPH">
            <summary> the paragraph tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PARAMETERS">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PHRASE">
            <summary> the phrase tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PLAINHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PLAINWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PRODUCER">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.RED">
            <summary>
                Chunks
            </summary>
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.REFERENCE">
            <summary>
                Phrases, Anchors, Lists and Paragraphs
            </summary>
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.RIGHT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROTATION">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROW">
            <summary> the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROWSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SCALEDHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SCALEDWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SECTION">
            <summary>
                Chapters and Sections
            </summary>
            <summary> the section tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SIZE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SRC">
            <summary>
                attribute of the image or iframe tag
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.STYLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SUBJECT">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SYMBOLINDENT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TABLE">
            <summary> the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TABLEFITSPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TEXTWRAP">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TITLE">
            <summary> attribute of the root and annotation tag (also a special tag within a chapter or section) </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TOP">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.UNDERLYING">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.UNKNOWN">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URL">
            <summary>
                Misc
            </summary>
            <summary> attribute of the image and annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.VERTICALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.WIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.WIDTHS">
            <summary>
                tables/cells
            </summary>
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.Generictag">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.Localdestination">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.Localgoto">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.Remotegoto">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.Subsupscript">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="M:iTextSharp.text.ElementTags.AlignmentValue(System.String)">
            <summary>
                methods
            </summary>
            <summary>
                Translates a String value to an alignment value.
                (written by Norman Richards, integrated into iText by Bruno)
            </summary>
            <param name="alignment">value (one of the ALIGN_ constants of the Element interface)</param>
        </member>
        <member name="M:iTextSharp.text.ElementTags.GetAlignment(System.Int32)">
            <summary>
                Translates the alignment value to a String value.
            </summary>
            <param name="alignment">the alignment value</param>
            <returns>the translated value</returns>
        </member>
        <member name="T:iTextSharp.text.exceptions.BadPasswordException">
            <summary>
                Typed exception used when opening an existing PDF document.
                Gets thrown when the document isn't a valid PDF document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.exceptions.BadPasswordException.#ctor(System.String)">
            <summary>
                Creates an exception saying the user password was incorrect.
            </summary>
        </member>
        <member name="T:iTextSharp.text.exceptions.IllegalPdfSyntaxException">
            <summary>
                Typed exception used when creating PDF syntax that isn't valid.
            </summary>
        </member>
        <member name="M:iTextSharp.text.exceptions.IllegalPdfSyntaxException.#ctor(System.String)">
            <summary>
                Creates an exception saying the PDF syntax isn't correct.
            </summary>
            <param name="message">message	some extra info about the exception</param>
        </member>
        <member name="T:iTextSharp.text.exceptions.InvalidPdfException">
            <summary>
                Typed exception used when opening an existing PDF document.
                Gets thrown when the document isn't a valid PDF document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.exceptions.InvalidPdfException.#ctor(System.String)">
            <summary>
                Creates an instance of a NoPdfException.
            </summary>
            <param name="message">the reason why the document isn't a PDF document according to iText.</param>
        </member>
        <member name="T:iTextSharp.text.exceptions.UnsupportedPdfException">
            <summary>
                Typed exception used when opening an existing PDF document.
                Gets thrown when the document isn't a valid PDF document according to iText,
                but it's different from the InvalidPdfException in the sense that it may
                be an iText limitation(most of the times it isn't but you might have
                bumped into something that has been added to the PDF specs, but that isn't
                supported in iText yet).
            </summary>
        </member>
        <member name="M:iTextSharp.text.exceptions.UnsupportedPdfException.#ctor(System.String)">
            <summary>
                Creates an instance of an UnsupportedPdfException.
            </summary>
            <param name="message">the reason why the document isn't a PDF document according to iText.</param>
        </member>
        <member name="T:iTextSharp.text.factories.ElementFactory">
            <summary>
                This class is able to create Element objects based on a list of properties.
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetAnchor(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetAnnotation(System.util.Properties)">
            <summary>
                Creates an Annotation object based on a list of properties.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetCell(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetChapter(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetChunk(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetImage(System.util.Properties)">
            <summary>
                Returns an Image that has been constructed taking in account
                the value of some attributes.
            </summary>
            <param name="attributes">Some attributes</param>
            <returns>an Image</returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetList(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetListItem(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetParagraph(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetPhrase(System.util.Properties)">
            <summary>
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetSection(iTextSharp.text.Section,System.util.Properties)">
            <summary>
            </summary>
            <param name="parent"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetTable(System.util.Properties)">
            <summary>
                Creates an Table object based on a list of properties.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.setRectangleProperties(iTextSharp.text.Rectangle,System.util.Properties)">
            <summary>
                Sets some Rectangle properties (for a Cell, Table,...).
            </summary>
            <param name="rect"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:iTextSharp.text.factories.GreekAlphabetFactory">
            <summary>
                This class can produce String combinations representing a number built with
                Greek letters (from alpha to omega, then alpha alpha, alpha beta, alpha gamma).
                We are aware of the fact that the original Greek numbering is different;
                See http://www.cogsci.indiana.edu/farg/harry/lan/grknum.htm#ancient
                but this isn't implemented yet; the main reason being the fact that we
                need a font that has the obsolete Greek characters qoppa and sampi.
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetString(System.Int32)">
            <summary>
                Changes an int into a lower case Greek letter combination.
            </summary>
            <param name="index">the original number</param>
            <returns>the letter combination</returns>
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetLowerCaseString(System.Int32)">
            <summary>
                Changes an int into a lower case Greek letter combination.
            </summary>
            <param name="index">the original number</param>
            <returns>the letter combination</returns>
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetUpperCaseString(System.Int32)">
            <summary>
                Changes an int into a upper case Greek letter combination.
            </summary>
            <param name="index">the original number</param>
            <returns>the letter combination</returns>
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetString(System.Int32,System.Boolean)">
            <summary>
                Changes an int into a Greek letter combination.
            </summary>
            <param name="index">the original number</param>
            <param name="lowercase"></param>
            <returns>the letter combination</returns>
        </member>
        <member name="T:iTextSharp.text.factories.RomanAlphabetFactory">
            <summary>
                This class can produce String combinations representing a number.
                "a" to "z" represent 1 to 26, "AA" represents 27, "AB" represents 28,
                and so on; "ZZ" is followed by "AAA".
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetLowerCaseString(System.Int32)">
            <summary>
                Translates a positive integer (not equal to zero)
                into a String using the letters 'a' to 'z';
                1 = a, 2 = b, ..., 26 = z, 27 = aa, 28 = ab,...
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetString(System.Int32)">
            <summary>
                Translates a positive integer (not equal to zero)
                into a String using the letters 'a' to 'z';
                1 = a, 2 = b, ..., 26 = z, 27 = aa, 28 = ab,...
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetString(System.Int32,System.Boolean)">
            <summary>
                Translates a positive integer (not equal to zero)
                into a String using the letters 'a' to 'z'
                (a = 1, b = 2, ..., z = 26, aa = 27, ab = 28,...).
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetUpperCaseString(System.Int32)">
            <summary>
                Translates a positive integer (not equal to zero)
                into a String using the letters 'A' to 'Z';
                1 = A, 2 = B, ..., 26 = Z, 27 = AA, 28 = AB,...
            </summary>
        </member>
        <member name="T:iTextSharp.text.factories.RomanNumberFactory">
            <summary>
                This class can produce String combinations representing a roman number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory._roman">
            <summary>
                Array with Roman digits.
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetLowerCaseString(System.Int32)">
            <summary>
                Changes an int into a lower case roman number.
            </summary>
            <param name="index">the original number</param>
            <returns>the roman number (lower case)</returns>
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetString(System.Int32)">
            <summary>
                Changes an int into a lower case roman number.
            </summary>
            <param name="index">the original number</param>
            <returns>the roman number (lower case)</returns>
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetString(System.Int32,System.Boolean)">
            <summary>
                Changes an int into a roman number.
            </summary>
            <param name="index">the original number</param>
            <param name="lowercase"></param>
            <returns>the roman number (lower case)</returns>
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetUpperCaseString(System.Int32)">
            <summary>
                Changes an int into an upper case roman number.
            </summary>
            <param name="index">the original number</param>
            <returns>the roman number (lower case)</returns>
        </member>
        <member name="T:iTextSharp.text.factories.RomanNumberFactory.RomanDigit">
            <summary>
                Helper class for Roman Digits
            </summary>
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.Digit">
            <summary>
                part of a roman number
            </summary>
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.Pre">
            <summary>
                can the digit be used as a prefix
            </summary>
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.Value">
            <summary>
                value of the roman digit
            </summary>
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.#ctor(System.Char,System.Int32,System.Boolean)">
            <summary>
                Constructs a roman digit
            </summary>
            <param name="digit">the roman digit</param>
            <param name="value">the value</param>
            <param name="pre">can it be used as a prefix</param>
        </member>
        <member name="T:iTextSharp.text.Font">
            <summary>
                Contains all the specifications of a font: fontfamily, size, style and color.
            </summary>
            <example>
                Paragraph p = new Paragraph("This is a paragraph",
                new Font(Font.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)) );
            </example>
        </member>
        <member name="F:iTextSharp.text.Font.BOLD">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.BOLDITALIC">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.COURIER">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.DEFAULTSIZE">
            <summary> the value of the default size. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.HELVETICA">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.ITALIC">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.NORMAL">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.STRIKETHRU">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.SYMBOL">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.TIMES_ROMAN">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.UNDEFINED">
            <summary> the value of an undefined attribute. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.UNDERLINE">
            <summary>
                static membervariables for the different styles
            </summary>
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.ZAPFDINGBATS">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font._baseFont">
            <summary>
                static membervariables
            </summary>
            <summary>
                membervariables
            </summary>
            <summary> the external font </summary>
        </member>
        <member name="F:iTextSharp.text.Font._color">
            <summary> the value of the color. </summary>
        </member>
        <member name="F:iTextSharp.text.Font._family">
            <summary> the value of the fontfamily. </summary>
        </member>
        <member name="F:iTextSharp.text.Font._size">
            <summary> the value of the fontsize. </summary>
        </member>
        <member name="F:iTextSharp.text.Font._style">
            <summary> the value of the style. </summary>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.Font)">
            <summary>
                constructors
            </summary>
            <summary>
                Copy constructor of a Font
            </summary>
            <param name="other">the font that has to be copied</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font.</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font.</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single,System.Int32)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single,System.Int32)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32)">
            <summary>
                Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor">
            <summary>
                Constructs a Font.
            </summary>
            <overloads>
                Has nine overloads.
            </overloads>
        </member>
        <member name="P:iTextSharp.text.Font.BaseFont">
            <summary>
                implementation of the Comparable interface
            </summary>
            <summary>
                Gets the BaseFont inside this object.
            </summary>
            <value>the BaseFont</value>
        </member>
        <member name="P:iTextSharp.text.Font.CalculatedSize">
            <summary>
                Gets the size that can be used with the calculated  BaseFont .
            </summary>
            <returns>the size that can be used with the calculated  BaseFont </returns>
        </member>
        <member name="P:iTextSharp.text.Font.CalculatedStyle">
            <summary>
                Gets the style that can be used with the calculated  BaseFont .
            </summary>
            <returns>the style that can be used with the calculated  BaseFont </returns>
        </member>
        <member name="P:iTextSharp.text.Font.Color">
            <summary>
                Get/set the color of this font.
            </summary>
            <value>the color of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.Family">
            <summary>
                Gets the family of this font.
            </summary>
            <value>the value of the family</value>
        </member>
        <member name="P:iTextSharp.text.Font.Familyname">
            <summary>
                FAMILY
            </summary>
            <summary>
                Gets the familyname as a string.
            </summary>
            <value>the familyname</value>
        </member>
        <member name="P:iTextSharp.text.Font.Size">
            <summary>
                Get/set the size of this font.
            </summary>
            <value>the size of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.Style">
            <summary>
                Gets the style of this font.
            </summary>
            <value>the style of this font</value>
        </member>
        <member name="M:iTextSharp.text.Font.CompareTo(System.Object)">
            <summary>
                Compares this Font with another
            </summary>
            <param name="obj">the other Font</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetFamilyIndex(System.String)">
            <summary>
                Translates a string-value of a certain family
                into the index that is used for this family in this class.
            </summary>
            <param name="family">A string representing a certain font-family</param>
            <returns>the corresponding index</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetStyleValue(System.String)">
            <summary>
                Translates a string-value of a certain style
                into the index value is used for this style in this class.
            </summary>
            <param name="style">a string</param>
            <returns>the corresponding value</returns>
        </member>
        <member name="M:iTextSharp.text.Font.Difference(iTextSharp.text.Font)">
            <summary>
                Replaces the attributes that are equal to null with
                the attributes of a given font.
            </summary>
            <param name="font">the font of a bigger element class</param>
            <returns>a Font</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetCalculatedBaseFont(System.Boolean)">
            <summary>
                BASEFONT
            </summary>
            <summary>
                Gets the  BaseFont  this class represents.
                For the built-in fonts a  BaseFont  is calculated.
                false  to always use  Cp1252
            </summary>
            <param name="specialEncoding"> true  to use the special encoding for Symbol and ZapfDingbats,</param>
            <returns>the  BaseFont  this class represents</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetCalculatedLeading(System.Single)">
            <summary>
                SIZE
            </summary>
            <summary>
                Gets the leading that can be used with this font.
                a certain linespacing
            </summary>
            <param name="linespacing"></param>
            <returns>the height of a line</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsBold">
            <summary>
                STYLE
            </summary>
            <summary>
                checks if this font is Bold.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsItalic">
            <summary>
                checks if this font is Bold.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsStandardFont">
            <summary>
                Checks if the properties of this font are undefined or null.
                If so, the standard should be used.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsStrikethru">
            <summary>
                checks if the style of this font is STRIKETHRU.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsUnderlined">
            <summary>
                checks if this font is underlined.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.SetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
                COLOR
            </summary>
            <summary>
                Sets the color.
            </summary>
            <param name="red">the red-value of the new color</param>
            <param name="green">the green-value of the new color</param>
            <param name="blue">the blue-value of the new color</param>
        </member>
        <member name="M:iTextSharp.text.Font.SetFamily(System.String)">
            <summary>
                Sets the family using a String ("Courier",
                "Helvetica", "Times New Roman", "Symbol" or "ZapfDingbats").
            </summary>
            <param name="family">A String representing a certain font-family.</param>
        </member>
        <member name="M:iTextSharp.text.Font.SetStyle(System.String)">
            <summary>
                Sets the style using a String containing one of
                more of the following values: normal, bold, italic, underline, strike.
            </summary>
            <param name="style">A String representing a certain style.</param>
        </member>
        <member name="M:iTextSharp.text.Font.SetStyle(System.Int32)">
            <summary>
                Sets the style.
            </summary>
            <param name="style">the style.</param>
        </member>
        <member name="T:iTextSharp.text.FontFactory">
            <summary>
                If you are using True Type fonts, you can declare the paths of the different ttf- and ttc-files
                to this static class first and then create fonts in your code using one of the static getFont-method
                without having to enter a path as parameter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_BOLDOBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_OBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_BOLDOBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_OBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.SYMBOL">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_BOLDITALIC">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_ITALIC">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_ROMAN">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.ZAPFDINGBATS">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactory.DefaultEmbedding">
            <summary> This is the default value of the <VAR>embedded</VAR> variable. </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactory.DefaultEncoding">
            <summary> This is the default encoding to use. </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactory.RegisteredFamilies">
            <summary>
                Gets a set of registered font families.
            </summary>
            <value>a set of registered font families</value>
        </member>
        <member name="P:iTextSharp.text.FontFactory.RegisteredFonts">
            <summary>
                Gets a set of registered fontnames.
            </summary>
            <value>a set of registered fontnames</value>
        </member>
        <member name="M:iTextSharp.text.FontFactory.Contains(System.String)">
            <summary>
                Checks whether the given font is contained within the object
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>true if font is contained within the object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.BaseColor,System.Boolean)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <param name="cached">
                true if the font comes from the cache or is added to the cache if new, false if the font is always
                created new
            </param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.util.Properties)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="attributes">the attributes of a Font object</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single,System.Int32)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,System.Int32)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.IsRegistered(System.String)">
            <summary>
                Checks if a certain font is registered.
            </summary>
            <param name="fontname">the name of the font that has to be checked</param>
            <returns>true if the font is found</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.Register(System.String)">
            <summary>
                Register a ttf- or a ttc-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
        </member>
        <member name="M:iTextSharp.text.FontFactory.Register(System.String,System.String)">
            <summary>
                Register a ttf- or a ttc-file and use an alias for the font contained in the ttf-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
            <param name="alias">the alias you want to use for the font</param>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectories">
            <summary>
                Register fonts in some probable directories. It usually works in Windows,
                Linux and Solaris.
            </summary>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectory(System.String)">
            <summary>
                Register all the fonts in a directory.
            </summary>
            <param name="dir">the directory</param>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectory(System.String,System.Boolean)">
            <summary>
                Register all the fonts in a directory and possibly its subdirectories.
                @since 2.1.2
            </summary>
            <param name="dir">the directory</param>
            <param name="scanSubdirectories">recursively scan subdirectories if  true</param>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterFamily(System.String,System.String,System.String)">
            <summary>
                Register a font by giving explicitly the font family and name.
            </summary>
            <param name="familyName">the font family</param>
            <param name="fullName">the font name</param>
            <param name="path">the font path</param>
        </member>
        <member name="T:iTextSharp.text.FontFactoryImp">
            <summary>
                If you are using True Type fonts, you can declare the paths of the different ttf- and ttc-files
                to this class first and then create fonts in your code using one of the getFont method
                without having to enter a path as parameter.
                It's a registry class and defined as a singleton to prevent misusing it.
            </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.Instance">
            <summary>
                Gets an Instance of FontFactoryImp
            </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.DefaultEmbedding">
            <summary>
                Gets or set DefaultEmbedding
            </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.DefaultEncoding">
            <summary>
                Gets or set DefaultEncoding
            </summary>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.RegisteredFamilies">
            <summary>
                Gets a set of registered font families.
            </summary>
            <value>a set of registered font families</value>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.RegisteredFonts">
            <summary>
                Gets a set of registered fontnames.
            </summary>
            <value>a set of registered fontnames</value>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.BaseColor,System.Boolean)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <param name="cached">
                true if the font comes from the cache or is added to the cache if new, false if the font is always
                created new
            </param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.util.Properties)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="attributes">the attributes of a Font object</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Single,System.Int32)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Single)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single,System.Int32)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String)">
            <summary>
                Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.IsRegistered(System.String)">
            <summary>
                Checks if a certain font is registered.
            </summary>
            <param name="fontname">the name of the font that has to be checked</param>
            <returns>true if the font is found</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.Register(System.String)">
            <summary>
                Register a ttf- or a ttc-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.Register(System.String,System.String)">
            <summary>
                Register a ttf- or a ttc-file and use an alias for the font contained in the ttf-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
            <param name="alias">the alias you want to use for the font</param>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterDirectories">
            <summary>
                Register fonts in some probable directories. It usually works in Windows,
                Linux and Solaris.
            </summary>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterDirectory(System.String)">
            <summary>
                Register all the fonts in a directory.
            </summary>
            <param name="dir">the directory</param>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterDirectory(System.String,System.Boolean)">
            <summary>
                Register all the fonts in a directory and possibly its subdirectories.
                @since 2.1.2
            </summary>
            <param name="dir">the directory</param>
            <param name="scanSubdirectories">recursively scan subdirectories if  true</param>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterFamily(System.String,System.String,System.String)">
            <summary>
                Register a font by giving explicitly the font family and name.
            </summary>
            <param name="familyName">the font family</param>
            <param name="fullName">the font name</param>
            <param name="path">the font path</param>
        </member>
        <member name="T:iTextSharp.text.GreekList">
            <summary>
                A special-version of  LIST  whitch use greek-letters.
                @see com.lowagie.text.List
            </summary>
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor">
            <summary>
                Initialization
            </summary>
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor(System.Int32)">
            <summary>
                Initialisierung
            </summary>
            <param name="symbolIndent">indent</param>
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor(System.Boolean,System.Int32)">
            <summary>
                Initialisierung
            </summary>
            <param name="greeklower">greek-char in lowercase</param>
            <param name="symbolIndent">indent</param>
        </member>
        <member name="M:iTextSharp.text.GreekList.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an  Object  to the  List .
            </summary>
            <param name="o">the object to add.</param>
            <returns>true if adding the object succeeded</returns>
        </member>
        <member name="M:iTextSharp.text.GreekList.SetGreekFont">
            <summary>
                change the font to SYMBOL
            </summary>
        </member>
        <member name="T:iTextSharp.text.Header">
            <summary>
                This is an Element that contains
                some userdefined meta information about the document.
            </summary>
            <example>
                Header header = new Header("inspired by", "William Shakespeare");
            </example>
        </member>
        <member name="F:iTextSharp.text.Header._name">
            <summary>
                membervariables
            </summary>
            <summary> This is the content of this chunk of text. </summary>
        </member>
        <member name="M:iTextSharp.text.Header.#ctor(System.String,System.String)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Header.
            </summary>
            <param name="name">the name of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="P:iTextSharp.text.Header.Name">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="T:iTextSharp.text.HeaderFooter">
            <summary>
                A HeaderFooter-object is a Rectangle with text
                that can be put above and/or below every page.
            </summary>
            <example>
                HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
                HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));
                document.SetHeader(header);
                document.SetFooter(footer);
            </example>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter._numbered">
            <summary>
                membervariables
            </summary>
            <summary> Does the page contain a pagenumber? </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter._after">
            <summary> This is the Phrase that comes after the pagenumber. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter._alignment">
            <summary> This is alignment of the header/footer. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter._before">
            <summary> This is the Phrase that comes before the pagenumber. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter._pageN">
            <summary> This is number of the page. </summary>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.#ctor(iTextSharp.text.Phrase,iTextSharp.text.Phrase)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a HeaderFooter-object.
            </summary>
            <param name="before">the Phrase before the pagenumber</param>
            <param name="after">the Phrase after the pagenumber</param>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.#ctor(iTextSharp.text.Phrase,System.Boolean)">
            <summary>
                Constructs a Header-object with a pagenumber at the end.
            </summary>
            <param name="before">the Phrase before the pagenumber</param>
            <param name="numbered">true if the page has to be numbered</param>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.After">
            <summary>
                methods
            </summary>
            <summary>
                Get/set the part that comes after the pageNumber.
            </summary>
            <value>a Phrase</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Alignment">
            <summary>
                Sets the Element.
            </summary>
            <value>the new alignment</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Before">
            <summary>
                Get/set the part that comes before the pageNumber.
            </summary>
            <value>a Phrase</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.PageNumber">
            <summary>
                Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Paragraph">
            <summary>
                Gets the Paragraph that can be used as header or footer.
            </summary>
            <returns>a Paragraph</returns>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.IsNumbered">
            <summary>
                Checks if the HeaderFooter contains a page number.
            </summary>
            <returns>true if the page has to be numbered</returns>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.SetAlignment(System.String)">
            <summary>
                Sets the alignment of this HeaderFooter.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="T:iTextSharp.text.html.HtmlEncoder">
            <summary>
                This class converts a  String  to the HTML-format of a String.
                To convert the  String , each character is examined:
                ASCII-characters from 000 till 031 are represented as &amp;#xxx;
                (with xxx = the value of the character)
                ASCII-characters from 032 t/m 127 are represented by the character itself, except for:
                '\n' becomes &lt;BR&gt;\n
                &quot; becomes &amp;quot;
                &amp; becomes &amp;amp;
                &lt; becomes &amp;lt;
                &gt; becomes &amp;gt;
                ASCII-characters from 128 till 255 are represented as &amp;#xxx;
                (with xxx = the value of the character)
                Example:
                String htmlPresentation = HtmlEncoder.Encode("Marie-Th&#233;r&#232;se S&#248;rensen");
                for more info: see O'Reilly; "HTML: The Definitive Guide" (page 164)
                @author  mario.maccarini@rug.ac.be
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlEncoder._htmlCode">
            <summary>
                membervariables
            </summary>
            <summary>
                List with the HTML translation of all the characters.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.Encode(System.String)">
            <summary>
                methods
            </summary>
            <summary>
                Converts a  String  to the HTML-format of this  String .
            </summary>
            <param name="str">The  String  to convert</param>
            <returns>a  String </returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.Encode(iTextSharp.text.BaseColor)">
            <summary>
                Converts a  Color  into a HTML representation of this  Color .
            </summary>
            <param name="color">the  Color  that has to be converted.</param>
            <returns>the HTML representation of this <COLOR>Color</COLOR></returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.GetAlignment(System.Int32)">
            <summary>
                Translates the alignment value.
            </summary>
            <param name="alignment">the alignment value</param>
            <returns>the translated value</returns>
        </member>
        <member name="T:iTextSharp.text.html.HtmlParser">
            <summary>
                This class can be used to parse an XML file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="xDoc"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlReader)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlReader,System.String)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlReader,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlReader)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlReader,System.String)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlReader,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="T:iTextSharp.text.html.HtmlPeer">
            <summary>
                This interface is implemented by the peer of all the iText objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.#ctor(System.String,System.String)">
            <summary>
                Creates a XmlPeer.
            </summary>
            <param name="name">the iText name of the tag</param>
            <param name="alias">the Html name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.AddAlias(System.String,System.String)">
            <summary>
                Sets an alias for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="alias">the custom tagname</param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.GetAttributes(System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                @see com.lowagie.text.xml.XmlPeer#getAttributes(org.xml.sax.Attributes)
            </summary>
        </member>
        <member name="T:iTextSharp.text.html.HtmlTagMap">
            <summary>
                The  Tags -class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.#ctor">
            <summary>
                Constructs an HtmlTagMap.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsBody(System.String)">
            <summary>
                Checks if this is the root tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is BODY or body</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsHead(System.String)">
            <summary>
                Checks if this is the head tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is HEAD or head</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsHtml(System.String)">
            <summary>
                Checks if this is the root tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is HTML or html</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsLink(System.String)">
            <summary>
                Checks if this is the linl tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is LINK or link</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsMeta(System.String)">
            <summary>
                Checks if this is the meta tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is META or meta</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsSpecialTag(System.String)">
            <summary>
                Checks if this is a special tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is a HTML, HEAD, META, LINK or BODY tag (case insensitive)</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsTitle(System.String)">
            <summary>
                Checks if this is the title tag.
            </summary>
            <param name="tag">a tagvalue</param>
            <returns>true if tag is TITLE or title</returns>
        </member>
        <member name="T:iTextSharp.text.html.HtmlTags">
            <summary>
                A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN">
            <summary>
                attribute of paragraph/image/table tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_BASELINE">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_BOTTOM">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_CENTER">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_JUSTIFIED">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_LEFT">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_MIDDLE">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_RIGHT">
            <summary>
                alignment attribute values
            </summary>
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_TOP">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALT">
            <summary>
                attribute of the image tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ANCHOR">
            <summary>
                the anchor tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.AUTHOR">
            <summary>
                attribute of the root tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.B">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BACKGROUNDCOLOR">
            <summary>
                attribute of the table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BODY">
            <summary>
                the body tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BORDERCOLOR">
            <summary>
                attribute of the table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BORDERWIDTH">
            <summary>
                attribute of the table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BOTTOM">
            <summary>
                attribute of the table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BOTTOMMARGIN">
            <summary>
                This is a possible HTML attribute for the BODY tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELL">
            <summary>
                the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELLPADDING">
            <summary>
                attribute of the table tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELLSPACING">
            <summary>
                attribute of the table tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CHUNK">
            <summary>
                the chunk tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CODE">
            <summary>
                Phrases, Anchors, Lists and Paragraphs
            </summary>
            <summary>
                the phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLOR">
            <summary>
                attribute of the chunk/table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLSPAN">
            <summary>
                attribute of the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLUMNS">
            <summary>
                attribute of the table tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CONTENT">
            <summary>
                This is a possible HTML attribute for the HEAD tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.DEFAULT">
            <summary>
                the possible value of an alignment attribute
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.DIV">
            <summary>
                The DIV tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.EM">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.FONT">
            <summary>
                attribute of the chunk tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HEAD">
            <summary>
                the head tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HEADERCELL">
            <summary>
                attribute of the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HORIZONTALALIGN">
            <summary>
                attribute of the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HORIZONTALRULE">
            <summary>
                the possible value of a tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HTML">
            <summary>
                the root tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.I">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.IMAGE">
            <summary>
                the image tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT">
            <summary>
                This is a possible value for the LANGUAGE attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT_ONLOAD">
            <summary>
                This is a possible HTML attribute for the BODY tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT_ONUNLOAD">
            <summary>
                This is a possible HTML attribute for the BODY tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.KEYWORDS">
            <summary>
                attribute of the root tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LANGUAGE">
            <summary>
                This is a possible HTML attribute for the SCRIPT tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LEFT">
            <summary>
                attribute of chapter/section/paragraph/table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LEFTMARGIN">
            <summary>
                This is a possible HTML attribute for the BODY tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LINK">
            <summary>
                The LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LISTITEM">
            <summary>
                the listitem tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.META">
            <summary>
                the meta tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NAME">
            <summary>
                attribute of anchor tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NEWLINE">
            <summary>
                the newpage tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NOWRAP">
            <summary>
                attribute of the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ORDEREDLIST">
            <summary>
                the list tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PARAGRAPH">
            <summary>
                the paragraph tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PLAINHEIGHT">
            <summary>
                attribute of the image tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PLAINWIDTH">
            <summary>
                attribute of the image tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PRE">
            <summary>
                This is a possible HTML attribute for auto-formated
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.REFERENCE">
            <summary>
                attribute of anchor tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.REL">
            <summary>
                This is a possible HTML attribute for the LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.RIGHT">
            <summary>
                attribute of chapter/section/paragraph/table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.RIGHTMARGIN">
            <summary>
                This is a possible HTML attribute for the BODY tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ROW">
            <summary>
                the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ROWSPAN">
            <summary>
                attribute of the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.S">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SCRIPT">
            <summary>
                the script tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SIZE">
            <summary>
                Chunks
            </summary>
            <summary>
                attribute of the chunk tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SPAN">
            <summary>
                The SPAN tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STRONG">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STYLE">
            <summary>
                This is used for inline css style information
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STYLESHEET">
            <summary>
                This is a possible HTML attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUB">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUBJECT">
            <summary>
                attribute of the root tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUP">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TABLE">
            <summary>
                the table tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TEXT_CSS">
            <summary>
                This is a possible HTML attribute for the LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TITLE">
            <summary>
                the title tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TOP">
            <summary>
                attribute of the table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TOPMARGIN">
            <summary>
                This is a possible HTML attribute for the BODY tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TYPE">
            <summary>
                This is a possible HTML attribute for the LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.U">
            <summary>
                some phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.UNORDEREDLIST">
            <summary>
                the list tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.URL">
            <summary>
                Misc
            </summary>
            <summary>
                attribute of the image tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.VAR">
            <summary>
                the phrase tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.VERTICALALIGN">
            <summary>
                attribute of the cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.WIDTH">
            <summary>
                tables/cells
            </summary>
            <summary>
                attribute of the table/cell tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.H">
            <summary>
                attribute of anchor tag
            </summary>
        </member>
        <member name="T:iTextSharp.text.html.HtmlWriter">
            <summary>
                A  DocWriter  class for HTML.
                An  HtmlWriter  can be added as a  DocListener
                to a certain  Document  by getting an instance.
                Every  Element  added to the original  Document
                will be written to the  Stream  of this  HtmlWriter .
                Example:
                // creation of the document with a certain size and certain margins
                Document document = new Document(PageSize.A4, 50, 50, 50, 50);
                try {
                // this will write HTML to the Standard Stream
                HtmlWriter.GetInstance(document, System.out);
                // this will write HTML to a file called text.html
                HtmlWriter.GetInstance(document, new FileOutputStream("text.html"));
                // this will write HTML to for instance the Stream of a HttpServletResponse-object
                HtmlWriter.GetInstance(document, response.GetOutputStream());
                }
                catch (DocumentException de) {
                System.err.Println(de.GetMessage());
                }
                // this will close the document and all the OutputStreams listening to it
                document.Close();
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.NBSP">
            <summary>
                static membervariables (tags)
            </summary>
            <summary>
                This is a possible HTML-tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.Begincomment">
            <summary>
                This is a possible HTML-tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.Endcomment">
            <summary>
                This is a possible HTML-tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.Currentfont">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the current font of the HTML.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.footer">
            <summary>
                This is the textual part of the footer
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.header">
            <summary>
                This is the textual part of a header
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.Imagepath">
            <summary>
                This is a path for images.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.Markup">
            <summary>
                Store the markup properties of a MarkedObject.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.PageN">
            <summary>
                Stores the page number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.Standardfont">
            <summary>
                This is the standard font of the HTML.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                constructor
            </summary>
            <summary>
                Constructs a  HtmlWriter .
            </summary>
            <param name="doc">The  Document  that has to be written as HTML</param>
            <param name="os">The  Stream  the writer has to write to.</param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                get an instance of the HtmlWriter
            </summary>
            <summary>
                Gets an instance of the  HtmlWriter .
            </summary>
            <param name="document">The  Document  that has to be written</param>
            <param name="os">The  Stream  the writer has to write to.</param>
            <returns>a new  HtmlWriter </returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Add(iTextSharp.text.IElement)">
            <summary>
                implementation of the DocListener methods
            </summary>
            <summary>
                Signals that an new page has to be started.
                @throws  DocumentException when a document isn't open yet, or has been closed
            </summary>
            <returns> true  if this action succeeded,  false  if not.</returns>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Open">
            <summary>
                Signals that an  Element  was added to the  Document .
                @throws  DocumentException when a document isn't open yet, or has been closed
            </summary>
            <returns> true  if the element was added,  false  if not.</returns>
            <summary>
                Signals that the  Document  has been opened and that
                Elements  can be added.
                The  HEAD -section of the HTML-document is written.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.ResetImagepath">
            <summary>
                Signals that the  Document  was closed and that no other
                Elements  will be added.
            </summary>
            <summary>
                some protected methods
            </summary>
            <summary>
                Adds the header to the top of the  Document
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Write(iTextSharp.text.IElement,System.Int32)">
            <summary>
                Writes a Metatag in the header.
                @throws  IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteCssProperty(System.String,System.String)">
            <summary>
                Writes out a CSS property.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteJavaScript(iTextSharp.text.Header)">
            <summary>
                Writes a link in the header.
                @throws  IOException
            </summary>
            <param name="header">the element that has to be written</param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteSection(iTextSharp.text.Section,System.Int32)">
            <summary>
                Writes the HTML representation of a section.
            </summary>
            <param name="section">the section to write</param>
            <param name="indent">the indentation</param>
        </member>
        <member name="T:iTextSharp.text.html.TextmyHtmlHandler">
            <summary>
                The  Tags -class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.TextmyHtmlHandler._bodyAttributes">
            <summary>
                These are the properties of the body section.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.TextmyHtmlHandler._tableBorder">
            <summary>
                This is the status of the table border.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.TextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener)">
            <summary>
                Constructs a new SAXiTextHandler that will translate all the events
                triggered by the parser to actions on the  Document -object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
        </member>
        <member name="M:iTextSharp.text.html.TextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener,iTextSharp.text.html.HtmlTagMap)">
            <summary>
                Constructs a new SAXiTextHandler that will translate all the events
                triggered by the parser to actions on the  Document -object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
            <param name="htmlTags">a tagmap translating HTML tags to iText tags</param>
        </member>
        <member name="M:iTextSharp.text.html.TextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener,System.util.NullValueDictionary{System.String,iTextSharp.text.xml.XmlPeer})">
            <summary>
                Constructs a new SAXiTextHandler that will translate all the events
                triggered by the parser to actions on the  Document -object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
            <param name="htmlTags">a tagmap translating HTML tags to iText tags</param>
        </member>
        <member name="M:iTextSharp.text.html.TextmyHtmlHandler.EndElement(System.String,System.String,System.String)">
            <summary>
                This method gets called when a start tag is encountered.
            </summary>
            <param name="uri">the Uniform Resource Identifier</param>
            <param name="lname">
                the local name (without prefix), or the empty string if Namespace processing is not being
                performed.
            </param>
            <param name="name">the name of the tag that is encountered</param>
        </member>
        <member name="T:iTextSharp.text.html.Markup">
            <summary>
                A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BGCOLOR">
            <summary>
                iText specific
            </summary>
            <summary>
                the CSS tag for background color
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERCOLOR">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTH">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHBOTTOM">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHLEFT">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHRIGHT">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHTOP">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_COLOR">
            <summary>
                CSS keys
            </summary>
            <summary>
                the CSS tag for text color
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_DISPLAY">
            <summary>
                CSS key that indicate the way something has to be displayed
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTFAMILY">
            <summary>
                the CSS tag for the font family
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTSIZE">
            <summary>
                the CSS tag for the font size
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTSTYLE">
            <summary>
                the CSS tag for the font style
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTWEIGHT">
            <summary>
                the CSS tag for the font weight
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_LINEHEIGHT">
            <summary>
                the CSS tag for text decorations
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGIN">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINBOTTOM">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINLEFT">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINRIGHT">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINTOP">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDING">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGBOTTOM">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGLEFT">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGRIGHT">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGTOP">
            <summary>
                the CSS tag for the margin of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PAGE_BREAK_AFTER">
            <summary>
                the CSS tag for adding a page break when the document is printed
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PAGE_BREAK_BEFORE">
            <summary>
                the CSS tag for adding a page break when the document is printed
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_TEXTALIGN">
            <summary>
                the CSS tag for the horizontal alignment of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_TEXTDECORATION">
            <summary>
                the CSS tag for text decorations
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_VERTICALALIGN">
            <summary>
                the CSS tag for text decorations
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_VISIBILITY">
            <summary>
                the CSS tag for the visibility of objects
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_ALWAYS">
            <summary>
                value for the CSS tag for adding a page break when the document is printed
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_BLOCK">
            <summary>
                CSS values
            </summary>
            <summary>
                A possible value for the DISPLAY key
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_BOLD">
            <summary>
                a CSS value for text font weight
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_HIDDEN">
            <summary>
                the value if you want to hide objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_INLINE">
            <summary>
                A possible value for the DISPLAY key
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_ITALIC">
            <summary>
                a CSS value for text font style
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_LINETHROUGH">
            <summary>
                a CSS value for text decoration
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_LISTITEM">
            <summary>
                A possible value for the DISPLAY key
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_NONE">
            <summary>
                a CSS value
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_NORMAL">
            <summary>
                a CSS value
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_OBLIQUE">
            <summary>
                a CSS value for text font style
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TABLE">
            <summary>
                A possible value for the DISPLAY key
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TABLECELL">
            <summary>
                A possible value for the DISPLAY key
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TABLEROW">
            <summary>
                A possible value for the DISPLAY key
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNCENTER">
            <summary>
                the CSS value for a horizontal alignment of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNJUSTIFY">
            <summary>
                the CSS value for a horizontal alignment of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNLEFT">
            <summary>
                the CSS value for a horizontal alignment of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNRIGHT">
            <summary>
                the CSS value for a horizontal alignment of an object
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_UNDERLINE">
            <summary>
                a CSS value for text decoration
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.DEFAULT_FONT_SIZE">
            <summary>
                a default value for font-size
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_CSS_CLASS">
            <summary>
                attribute for specifying externally defined CSS class
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_CSS_ID">
            <summary>
                The ID attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_HEIGHT">
            <summary>
                the height attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_HREF">
            <summary>
                HTML attributes
            </summary>
            <summary>
                the hyperlink reference attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_REL">
            <summary>
                This is a possible HTML attribute for the LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_STYLE">
            <summary>
                This is used for inline css style information
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_STYLESHEET">
            <summary>
                This is a possible HTML attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_TYPE">
            <summary>
                This is a possible HTML attribute for the LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_WIDTH">
            <summary>
                the width attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_BODY">
            <summary>
                the markup for the body part of a file
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_DIV">
            <summary>
                HTML tags
            </summary>
            <summary>
                The DIV tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_LINK">
            <summary>
                This is a possible HTML-tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_SPAN">
            <summary>
                The SPAN tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_VALUE_CSS">
            <summary>
                This is a possible HTML attribute for the LINK tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_VALUE_JAVASCRIPT">
            <summary>
                This is a possible value for the language attribute (SCRIPT tag).
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.ITEXT_TAG">
            <summary>
                the key for any tag
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.Markup.DecodeColor(System.String)">
            <summary>
                Converts a  Color  into a HTML representation of this  Color .
            </summary>
            <param name="s">the  Color  that has to be converted.</param>
            <returns>the HTML representation of this  Color </returns>
        </member>
        <member name="M:iTextSharp.text.html.Markup.ParseAttributes(System.String)">
            <summary>
                This method parses a string with attributes and returns a Properties object.
            </summary>
            <param name="str">a string of this form: 'key1="value1"; key2="value2";... keyN="valueN" '</param>
            <returns>a Properties object</returns>
        </member>
        <member name="M:iTextSharp.text.html.Markup.ParseLength(System.String)">
            <summary>
                HTML values
            </summary>
            <summary>
                Parses a length.
            </summary>
            <param name="str">a length in the form of an optional + or -, followed by a number and a unit.</param>
            <returns>a float</returns>
        </member>
        <member name="M:iTextSharp.text.html.Markup.ParseLength(System.String,System.Single)">
            <summary>
                New method contributed by: Lubos Strapko
                @since 2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.Markup.RemoveComment(System.String,System.String,System.String)">
            <summary>
                Removes the comments sections of a String.
                the original String
                the String that marks the start of a Comment section
                the String that marks the end of a Comment section.
            </summary>
            <param name="str"></param>
            <param name="startComment"></param>
            <param name="endComment"></param>
            <returns>the String stripped of its comment section</returns>
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.ChainedProperties.TagAttributes">
            <summary>
                Class that stores the info about one tag in the chain.
            </summary>
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.FactoryProperties">
            <summary>
                @author  psoares
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.GetHyphenation(iTextSharp.text.html.simpleparser.ChainedProperties)">
            <summary>
                Gets a HyphenationEvent based on the hyphenation entry in ChainedProperties.
                @since    2.1.2
            </summary>
            <param name="props">ChainedProperties</param>
            <returns>a HyphenationEvent</returns>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.GetHyphenation(System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Gets a HyphenationEvent based on the hyphenation entry in a HashMap.
                @since    2.1.2
            </summary>
            <param name="props">a HashMap with properties</param>
            <returns>a HyphenationEvent</returns>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.GetHyphenation(System.String)">
            <summary>
                Gets a HyphenationEvent based on a String.
                For instance "en_UK,3,2" returns new HyphenationAuto("en", "UK", 3, 2);
                @since    2.1.2
            </summary>
            <param name="s">String, for instance "en_UK,2,2"</param>
            <returns>a HyphenationEvent</returns>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.InsertStyle(System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                This method isn't used by iText, but you can use it to analyze
                the value of a style attribute inside a HashMap.
                The different elements of the style attribute are added to the
                HashMap as key-value pairs.
                style. After this method is invoked, more keys could be added.
            </summary>
            <param name="h">that should have at least a key named</param>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.InsertStyle(System.util.INullValueDictionary{System.String,System.String},iTextSharp.text.html.simpleparser.ChainedProperties)">
            <summary>
                New method contributed by Lubos Strapko
                @since 2.1.3
            </summary>
            <param name="h"></param>
            <param name="cprops"></param>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.HtmlWorker.#ctor(iTextSharp.text.IDocListener)">
            <summary>
                Creates a new instance of HTMLWorker
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.HtmlWorker.SetMarginMirroringTopBottom(System.Boolean)">
            <summary>
                @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
                @since	2.1.6
            </summary>
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.IncCell">
            <summary>
                @author  psoares
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.#ctor(System.String,iTextSharp.text.html.simpleparser.ChainedProperties)">
            <summary>
                Creates a new instance of IncCell
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.IncTable">
            <summary>
                @author  psoares
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncTable.#ctor(System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Creates a new instance of IncTable
            </summary>
        </member>
        <member name="T:iTextSharp.text.html.WebColors">
            <summary>
                This class is a HashMap that contains the names of colors as a key and the
                corresponding Color as value. (Source: Wikipedia
                http://en.wikipedia.org/wiki/Web_colors )
                @author blowagie
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.WebColors.GetRgbColor(System.String)">
            <summary>
                Gives you a Color based on a name.
                a name such as black, violet, cornflowerblue or #RGB or #RRGGBB
                or rgb(R,G,B)
                @throws IllegalArgumentException
                if the String isn't a know representation of a color.
            </summary>
            <param name="name"></param>
            <returns>the corresponding Color object</returns>
        </member>
        <member name="T:iTextSharp.text.IDocListener">
            <summary>
                A class that implements DocListener will perform some
                actions when some actions are performed on a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.IElementListener" />
            <seealso cref="T:iTextSharp.text.Document" />
            <seealso cref="T:iTextSharp.text.DocWriter" />
        </member>
        <member name="P:iTextSharp.text.IDocListener.Footer">
            <summary>
                methods
            </summary>
            <summary>
                Changes the footer of this document.
            </summary>
            <value>a Footer</value>
        </member>
        <member name="P:iTextSharp.text.IDocListener.Header">
            <summary>
                Changes the header of this document.
            </summary>
            <value>a Header</value>
        </member>
        <member name="P:iTextSharp.text.IDocListener.PageCount">
            <summary>
                Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="M:iTextSharp.text.IDocListener.Close">
            <summary>
                Signals that the Document was closed and that no other
                Elements will be added.
            </summary>
            <remarks>
                The output stream of every writer implementing IDocListener will be closed.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.IDocListener.NewPage">
            <summary>
                Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.Open">
            <summary>
                Signals that the Document has been opened and that
                Elements can be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetFooter">
            <summary>
                Resets the footer of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetHeader">
            <summary>
                Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetPageCount">
            <summary>
                Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMarginMirroring(System.Boolean)">
            <summary>
                Parameter that allows you to do margin mirroring (odd/even pages)
            </summary>
            <param name="marginMirroring"></param>
            <returns>true if succesfull</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMarginMirroringTopBottom(System.Boolean)">
            <summary>
                Parameter that allows you to do top/bottom margin mirroring (odd/even pages)
                @since	2.1.6
            </summary>
            <param name="marginMirroringTopBottom"></param>
            <returns>true if successful</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
                Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="T:iTextSharp.text.IElement">
            <summary>
                Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor" />
            <seealso cref="T:iTextSharp.text.Cell" />
            <seealso cref="T:iTextSharp.text.Chapter" />
            <seealso cref="T:iTextSharp.text.Chunk" />
            <seealso cref="T:iTextSharp.text.Gif" />
            <seealso cref="T:iTextSharp.text.Graphic" />
            <seealso cref="T:iTextSharp.text.Header" />
            <seealso cref="T:iTextSharp.text.Image" />
            <seealso cref="T:iTextSharp.text.Jpeg" />
            <seealso cref="T:iTextSharp.text.List" />
            <seealso cref="T:iTextSharp.text.ListItem" />
            <seealso cref="T:iTextSharp.text.Meta" />
            <seealso cref="T:iTextSharp.text.Paragraph" />
            <seealso cref="T:iTextSharp.text.Phrase" />
            <seealso cref="T:iTextSharp.text.Rectangle" />
            <seealso cref="T:iTextSharp.text.Row" />
            <seealso cref="T:iTextSharp.text.Section" />
            <seealso cref="T:iTextSharp.text.Table" />
        </member>
        <member name="P:iTextSharp.text.IElement.Chunks">
            <summary>
                methods
            </summary>
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.IElement.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.IElement.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.IElement.ToString">
            <summary>
                Gets the content of the text element.
            </summary>
            <returns>the content of the text element</returns>
        </member>
        <member name="T:iTextSharp.text.IElementListener">
            <summary>
                A class that implements ElementListener will perform some
                actions when an Element is added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IElementListener.Add(iTextSharp.text.IElement)">
            <summary>
                Signals that an Element was added to the Document.
            </summary>
            <param name="element">Element added</param>
            <returns>true if the element was added, false if not.</returns>
        </member>
        <member name="T:iTextSharp.text.ILargeElement">
            <summary>
                Interface implemented by Element objects that can potentially consume
                a lot of memory. Objects implementing the LargeElement interface can
                be added to a Document more than once. If you have invoked setCompleted(false),
                they will be added partially and the content that was added will be
                removed until you've invoked setCompleted(true);
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="P:iTextSharp.text.ILargeElement.ElementComplete">
            <summary>
                If you invoke setCompleted(false), you indicate that the content
                of the object isn't complete yet; it can be added to the document
                partially, but more will follow. If you invoke setCompleted(true),
                you indicate that you won't add any more data to the object.
                @since   iText 2.0.8
                adding the object to the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ILargeElement.FlushContent">
            <summary>
                Flushes the content that has been added.
            </summary>
        </member>
        <member name="T:iTextSharp.text.Image">
            <summary>
                An Image is the representation of a graphic element (JPEG, PNG or GIF)
                that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Rectangle" />
        </member>
        <member name="F:iTextSharp.text.Image.AX">
            <summary>
                static membervariables (concerning the presence of borders)
            </summary>
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.AY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.BX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.BY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.CX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.CY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DEFAULT">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.LEFT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.MIDDLE_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_BMP">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_GIF">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JBIG2">
            <summary>
                type of image
                @since	2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JPEG">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JPEG2000">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_NONE">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_PNG">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_TIFF">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_WMF">
            <summary>
                type of image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.RIGHT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.TEXTWRAP">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.UNDERLYING">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image._serialId">
            <summary>
                serial stamping
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image._initialRotation">
            <summary>
                Holds value of property initialRotation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.absoluteX">
            <summary> This is the absolute X-position of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.absoluteY">
            <summary> This is the absolute Y-position of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.alignment">
            <summary> The alignment of the Image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.alt">
            <summary> Text that can be shown instead of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.annotation">
            <summary> if the annotation is not null the image will be clickable. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="F:iTextSharp.text.Image.colorspace">
            <summary> this is the colorspace of a jpeg-image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.compressionLevel">
            <summary>
                The compression level of the content streams.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.deflated">
            <summary>
                Holds value of property deflated.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.dpiX">
            <summary> Holds value of property dpiX. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.dpiY">
            <summary> Holds value of property dpiY. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.indentationLeft">
            <summary>
                for the moment these variables are only used for Images in class Table
            </summary>
            <summary>
                code contributed by Pelikan Stephan
            </summary>
            <summary>
                the indentation to the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.indentationRight">
            <summary>
                the indentation to the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.interpolation">
            <summary> Holds value of property interpolation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.Invert">
            <summary>
                Image color inversion
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.originalData">
            <summary>
                Holds value of property originalData.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.originalType">
            <summary>
                Holds value of property originalType.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.plainHeight">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.plainWidth">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.Profile">
            <summary> ICC Profile attached </summary>
        </member>
        <member name="F:iTextSharp.text.Image.rawData">
            <summary> The raw data of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.RotationRadians">
            <summary> This is the rotation of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.spacingAfter">
            <summary>
                The spacing after the image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.spacingBefore">
            <summary>
                The spacing before the image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Image.Template">
            <summary> The template to be treated as an image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.transparency">
            <summary> this is the transparency information of the raw image</summary>
        </member>
        <member name="F:iTextSharp.text.Image.type">
            <summary> The imagetype. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.url">
            <summary> The URL of the image. </summary>
        </member>
        <member name="M:iTextSharp.text.Image.#ctor(System.Uri)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs an Image-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found.</param>
        </member>
        <member name="M:iTextSharp.text.Image.#ctor(iTextSharp.text.Image)">
            <summary>
                Constructs an Image object duplicate.
            </summary>
            <param name="image">another Image object.</param>
        </member>
        <member name="P:iTextSharp.text.Image.AbsoluteX">
            <summary>
                Returns the absolute X position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:iTextSharp.text.Image.AbsoluteY">
            <summary>
                Returns the absolute Y position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:iTextSharp.text.Image.Alignment">
            <summary>
                Get/set the alignment for the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Alt">
            <summary>
                Get/set the alternative text for the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Image.Annotation">
            <summary>
                Get/set the annotation.
            </summary>
            <value>the Annotation</value>
        </member>
        <member name="P:iTextSharp.text.Image.Bpc">
            <summary>
                Gets the bpc for the image.
            </summary>
            <remarks>
                this only makes sense for Images of the type RawImage.
            </remarks>
            <value>a bpc value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Colorspace">
            <summary>
                Gets the colorspace for the image.
            </summary>
            <remarks>
                this only makes sense for Images of the type Jpeg.
            </remarks>
            <value>a colorspace value</value>
        </member>
        <member name="P:iTextSharp.text.Image.CompressionLevel">
            <summary>
                Sets the compression level to be used if the image is written as a compressed stream.
                @since   2.1.3
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.DpiX">
            <summary>
                Gets the dots-per-inch in the X direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the X direction</value>
        </member>
        <member name="P:iTextSharp.text.Image.DpiY">
            <summary>
                Gets the dots-per-inch in the Y direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the Y direction</value>
        </member>
        <member name="P:iTextSharp.text.Image.ImageMask">
            <summary>
                Get/set the explicit masking.
            </summary>
            <value>the explicit masking</value>
        </member>
        <member name="P:iTextSharp.text.Image.InitialRotation">
            <summary>
                Some image formats, like TIFF may present the images rotated that have
                to be compensated.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.Interpolation">
            <summary>
                Sets the image interpolation. Image interpolation attempts to
                produce a smooth transition between adjacent sample values.
            </summary>
            <value>New value of property interpolation.</value>
        </member>
        <member name="P:iTextSharp.text.Image.Inverted">
            <summary>
                Inverts the meaning of the bits of a mask.
            </summary>
            <value>true to invert the meaning of the bits of a mask</value>
        </member>
        <member name="P:iTextSharp.text.Image.Matrix">
            <summary>
                Returns the transformation matrix of the image.
            </summary>
            <value>an array [AX, AY, BX, BY, CX, CY, DX, DY]</value>
        </member>
        <member name="P:iTextSharp.text.Image.MySerialId">
            <summary>
                returns serial id for this object
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.PlainHeight">
            <summary>
                Gets the plain height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.PlainWidth">
            <summary>
                Gets the plain width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.RawData">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Gets the raw data for the image.
            </summary>
            <remarks>
                this only makes sense for Images of the type RawImage.
            </remarks>
            <value>the raw data</value>
        </member>
        <member name="P:iTextSharp.text.Image.Rotation">
            <summary>
                Sets the rotation of the image in radians.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.RotationDegrees">
            <summary>
                Sets the rotation of the image in degrees.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.ScaledHeight">
            <summary>
                Gets the scaled height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.ScaledWidth">
            <summary>
                Gets the scaled width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Smask">
            <summary>
                Holds value of property smask.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.TagIcc">
            <summary>
                Tags this image with an ICC profile.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.TemplateData">
            <summary>
                Get/set the template to be used as an image.
            </summary>
            <remarks>
                this only makes sense for Images of the type ImgTemplate.
            </remarks>
            <value>the template</value>
        </member>
        <member name="P:iTextSharp.text.Image.Transparency">
            <summary>
                Returns the transparency.
            </summary>
            <value>the transparency</value>
        </member>
        <member name="P:iTextSharp.text.Image.Type">
            <summary>
                Returns the type.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Image.Url">
            <summary>
                Gets the string-representation of the reference to the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Image.WidthPercentage">
            <summary>
                Holds value of property widthPercentage.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.XyRatio">
            <summary>
                Holds value of property XYRatio.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.Image)">
            <summary>
                Gets an instance of an Image.
            </summary>
            <param name="image">an Image</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Uri)">
            <summary>
                Gets an instance of an Image.
            </summary>
            <param name="url">an URL</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
                Creates a JBIG2 Image.
                @since   2.1.5
            </summary>
            <param name="width">the width of the image</param>
            <param name="height">the height of the image</param>
            <param name="data">the raw image data</param>
            <param name="globals">JBIG2 globals</param>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Byte[])">
            <summary>
                Gets an instance of an Image.
            </summary>
            <param name="imgb">a byte array</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(SkiaSharp.SKBitmap,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <summary>
                Converts a .NET image to a Native(PNG, JPG, GIF, WMF) image
            </summary>
            <param name="image"></param>
            <param name="format"></param>
            <param name="quality"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(SkiaSharp.SKBitmap,iTextSharp.text.BaseColor,System.Boolean)">
            <summary>
                Gets an instance of an Image from a SkiaSharp.SKBitmap.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
                if different from null the transparency
                pixels are replaced by this color
            </param>
            <param name="forceBw">if true the image is treated as black and white</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(SkiaSharp.SKBitmap,iTextSharp.text.BaseColor)">
            <summary>
                Gets an instance of an Image from a System.Drawing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
                if different from null the transparency
                pixels are replaced by this color
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.String)">
            <summary>
                Gets an instance of an Image.
            </summary>
            <param name="filename">a filename</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Reuses an existing image.
                @throws BadElementException on error
            </summary>
            <param name="iref">the reference to the image dictionary</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
                Gets an instance of an Image in raw mode.
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="reverseBits"></param>
            <param name="typeCcitt"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="reverseBits"></param>
            <param name="typeCcitt"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
                Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <param name="transparency">
                transparency information in the Mask format of the
                image dictionary
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetImageRotation">
            <summary>
                methods to set information
            </summary>
            <summary>
                Gets the current image rotation in radians.
            </summary>
            <returns>the current image rotation in radians</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasAbsolutePosition">
            <summary>
                Checks if the Images has to be added at an absolute position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasAbsoluteX">
            <summary>
                Checks if the Images has to be added at an absolute X position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasIccProfile">
            <summary>
                Checks is the image has an ICC profile.
            </summary>
            <returns>the ICC profile or null</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsImgRaw">
            <summary>
                Returns true if the image is a ImgRaw-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsImgTemplate">
            <summary>
                Returns true if the image is an ImgTemplate-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsJpeg">
            <summary>
                Returns true if the image is a Jpeg-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsMask">
            <summary>
                Returns true if this Image is a mask.
            </summary>
            <returns>true if this Image is a mask</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsMaskCandidate">
            <summary>
                Returns true if this Image has the
                requisites to be a mask.
            </summary>
            <returns>true if this Image can be a mask</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.MakeMask">
            <summary>
                Make this Image a mask.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsolute(System.Single,System.Single)">
            <summary>
                Scale the image to an absolute width and an absolute height.
            </summary>
            <param name="newWidth">the new width</param>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsoluteHeight(System.Single)">
            <summary>
                Scale the image to an absolute height.
            </summary>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsoluteWidth(System.Single)">
            <summary>
                Scale the image to an absolute width.
            </summary>
            <param name="newWidth">the new width</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScalePercent(System.Single)">
            <summary>
                Scale the image to a certain percentage.
            </summary>
            <param name="percent">the scaling percentage</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScalePercent(System.Single,System.Single)">
            <summary>
                Scale the width and height of an image to a certain percentage.
            </summary>
            <param name="percentX">the scaling percentage of the width</param>
            <param name="percentY">the scaling percentage of the height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleToFit(System.Single,System.Single)">
            <summary>
                Scales the image so that it fits a certain width and height.
            </summary>
            <param name="fitWidth">the width to fit</param>
            <param name="fitHeight">the height to fit</param>
        </member>
        <member name="M:iTextSharp.text.Image.SetAbsolutePosition(System.Single,System.Single)">
            <summary>
                Sets the absolute position of the Image.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
        </member>
        <member name="M:iTextSharp.text.Image.SetDpi(System.Int32,System.Int32)">
            <summary>
                Sets the dots per inch value
                dpi for x coordinates
                dpi for y coordinates
            </summary>
            <param name="dpiX"></param>
            <param name="dpiY"></param>
        </member>
        <member name="M:iTextSharp.text.Image.SimplifyColorspace">
            <summary>
                Replaces CalRGB and CalGray colorspaces with DeviceRGB and DeviceGray.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.GetSerialId">
            <summary>
                generates new serial id
            </summary>
        </member>
        <member name="T:iTextSharp.text.ImgCcitt">
            <summary>
                CCITT Image data that has to be inserted into the document
                @see        Element
                @see        Image
                @author  Paulo Soares
            </summary>
            <summary>
                CCITT Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Image" />
        </member>
        <member name="M:iTextSharp.text.ImgCcitt.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Creats an Image in CCITT mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="reverseBits">
                reverses the bits in data.
                Bit 0 is swapped with bit 7 and so on
            </param>
            <param name="typeCcitt">
                the type of compression in data. It can be
                CCITTG4, CCITTG31D, CCITTG32D
            </param>
            <param name="parameters">
                parameters associated with this stream. Possible values are
                CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and CCITT_ENDOFBLOCK or a
                combination of them
            </param>
            <param name="data">the image data</param>
        </member>
        <member name="T:iTextSharp.text.ImgJbig2">
            <summary>
                Support for JBIG2 images.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.ImgJbig2._global">
            <summary>
                JBIG2 globals
            </summary>
        </member>
        <member name="F:iTextSharp.text.ImgJbig2._globalHash">
            <summary>
                A unique hash
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgJbig2.#ctor">
            <summary>
                Empty constructor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgJbig2.#ctor(System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
                Actual constructor for ImgJBIG2 images.
            </summary>
            <param name="width">the width of the image</param>
            <param name="height">the height of the image</param>
            <param name="data">the raw image data</param>
            <param name="globals">JBIG2 globals</param>
        </member>
        <member name="P:iTextSharp.text.ImgJbig2.GlobalBytes">
            <summary>
                Getter for the JBIG2 global data.
            </summary>
            <returns>an array of bytes</returns>
        </member>
        <member name="P:iTextSharp.text.ImgJbig2.GlobalHash">
            <summary>
                Getter for the unique hash.
            </summary>
            <returns>an array of bytes</returns>
        </member>
        <member name="T:iTextSharp.text.ImgRaw">
            <summary>
                Raw Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Image" />
        </member>
        <member name="M:iTextSharp.text.ImgRaw.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Creats an Image in raw mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component. Must be 1,2,4 or 8</param>
            <param name="data">data the image data</param>
        </member>
        <member name="T:iTextSharp.text.ImgTemplate">
            <summary>
                PdfTemplate that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Image" />
        </member>
        <member name="M:iTextSharp.text.ImgTemplate.#ctor(iTextSharp.text.Image)">
            <summary>
                Creats an Image from a PdfTemplate.
            </summary>
            <param name="image">the Image</param>
        </member>
        <member name="M:iTextSharp.text.ImgTemplate.#ctor(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
                Creats an Image from a PdfTemplate.
            </summary>
            <param name="template">the PdfTemplate</param>
        </member>
        <member name="T:iTextSharp.text.ImgWmf">
            <summary>
                An ImgWMF is the representation of a windows metafile
                that has to be inserted into the document
                @see        Element
                @see        Image
                @see        Gif
                @see        Png
            </summary>
            <summary>
                An ImgWMF is the representation of a windows metafile
                that has to be inserted into the document
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgWmf.#ctor(iTextSharp.text.Image)">
            <summary>
                Constructors
            </summary>
            <summary>
                Constructs an ImgWMF-object
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:iTextSharp.text.ImgWmf.#ctor(System.Uri)">
            <summary>
                Constructs an ImgWMF-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.ImgWmf.#ctor(System.String)">
            <summary>
                Constructs an ImgWMF-object, using a filename.
            </summary>
            <param name="filename">a string-representation of the file that contains the image.</param>
        </member>
        <member name="M:iTextSharp.text.ImgWmf.#ctor(System.Byte[])">
            <summary>
                Constructs an ImgWMF-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:iTextSharp.text.ImgWmf.ReadWmf(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
                Reads the WMF into a template.
            </summary>
            <param name="template">the template to read to</param>
        </member>
        <member name="M:iTextSharp.text.ImgWmf.processParameters">
            <summary>
                This method checks if the image is a valid WMF and processes some parameters.
            </summary>
        </member>
        <member name="T:iTextSharp.text.IRtfElementInterface">
            <summary>
                The RTF jar depends on the iText jar, but the iText jar may not
                depend on the RTF jar. This interface offers a temporary solution
                until we find a more elegant way to solve this.
            </summary>
        </member>
        <member name="T:iTextSharp.text.ISplitCharacter">
            <summary>
                Interface for customizing the split character.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ISplitCharacter.IsSplitCharacter(System.Int32,System.Int32,System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])">
            <summary>
                Returns  true  if the character can split a line. The splitting implementation
                is free to look ahead or look behind characters to make a decision.
            </summary>
            <param name="start">the lower limit of  cc  inclusive</param>
            <param name="current">the pointer to the character in  cc </param>
            <param name="end">the upper limit of  cc  exclusive</param>
            <param name="cc">an array of characters at least  end  sized</param>
            <param name="ck">an array of  PdfChunk . The main use is to be able to call</param>
            <returns> true  if the Character(s) can split a line</returns>
        </member>
        <member name="T:iTextSharp.text.ITextElementArray">
            <summary>
                Interface for a text element to which other objects can be added.
            </summary>
            <seealso cref="T:iTextSharp.text.Phrase" />
            <seealso cref="T:iTextSharp.text.Paragraph" />
            <seealso cref="T:iTextSharp.text.Section" />
            <seealso cref="T:iTextSharp.text.ListItem" />
            <seealso cref="T:iTextSharp.text.Chapter" />
            <seealso cref="T:iTextSharp.text.Anchor" />
            <seealso cref="T:iTextSharp.text.Cell" />
        </member>
        <member name="M:iTextSharp.text.ITextElementArray.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an object to the TextElementArray.
            </summary>
            <param name="o">an object that has to be added</param>
            <returns>true if the addition succeeded; false otherwise</returns>
        </member>
        <member name="T:iTextSharp.text.Jpeg">
            <summary>
                An Jpeg is the representation of a graphic element (JPEG)
                that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Image" />
            <seealso cref="T:iTextSharp.text.Gif" />
            <seealso cref="T:iTextSharp.text.Png" />
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOPARAM_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOT_A_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.UNSUPPORTED_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.VALID_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NoparamMarkers">
            <summary> Jpeg markers without additional parameters. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.UnsupportedMarkers">
            <summary> Unsupported Jpeg markers. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.ValidMarkers">
            <summary> Acceptable Jpeg markers. </summary>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(iTextSharp.text.Image)">
            <summary>
                Constructors
            </summary>
            <summary>
                Construct a Jpeg-object, using a Image
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Uri)">
            <summary>
                Constructs a Jpeg-object, using an Uri.
            </summary>
            <remarks>
                Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="uri">the Uri where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Byte[])">
            <summary>
                Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
                Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image.</param>
            <param name="width">the width you want the image to have</param>
            <param name="height">the height you want the image to have</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.getShort(System.IO.Stream)">
            <summary>
                private static methods
            </summary>
            <summary>
                Reads a short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.getShortInverted(System.IO.Stream)">
            <summary>
                Reads an inverted short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.markerType(System.Int32)">
            <summary>
                Returns a type of marker.
            </summary>
            <param name="marker">an int</param>
            <returns>a type: VALID_MARKER, UNSUPPORTED_MARKER or NOPARAM_MARKER</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.processParameters">
            <summary>
                private methods
            </summary>
            <summary>
                This method checks if the image is a valid JPEG and processes some parameters.
            </summary>
        </member>
        <member name="T:iTextSharp.text.Jpeg2000">
            <summary>
                An  Jpeg2000  is the representation of a graphic element (JPEG)
                that has to be inserted into the document
                @see		Element
                @see		Image
            </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg2000.JP2_BPCC">
            <summary>
                public static final membervariables
            </summary>
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(iTextSharp.text.Image)">
            <summary>
                Constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(System.Uri)">
            <summary>
                Constructs a  Jpeg2000 -object, using an <VAR>url</VAR>.
                @throws BadElementException
                @throws IOException
            </summary>
            <param name="url">where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(System.Byte[])">
            <summary>
                Constructs a  Jpeg2000 -object from memory.
                @throws BadElementException
                @throws IOException
            </summary>
            <param name="img">image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
                Constructs a  Jpeg2000 -object from memory.
                @throws BadElementException
                @throws IOException
            </summary>
            <param name="img">image.</param>
            <param name="width">you want the image to have</param>
            <param name="height">you want the image to have</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.processParameters">
            <summary>
                This method checks if the image is a valid JPEG and processes some parameters.
                @throws BadElementException
                @throws IOException
            </summary>
        </member>
        <member name="T:iTextSharp.text.List">
            <summary>
                A List contains several ListItems.
            </summary>
            <example>
                Example 1:
                List list = new List(true, 20);
                list.Add(new ListItem("First line"));
                list.Add(new ListItem("The second line is longer to see what happens once the end of the line is reached. Will it
                start on a new line?"));
                list.Add(new ListItem("Third line"));
                The result of this code looks like this:
                First line
                The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?
                Third line
                Example 2:
                List overview = new List(false, 10);
                overview.Add(new ListItem("This is an item"));
                overview.Add("This is another item");
                The result of this code looks like this:
                This is an item
                This is another item
            </example>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.ListItem" />
        </member>
        <member name="F:iTextSharp.text.List.ALPHABETICAL">
            <summary>
                a possible value for the lettered parameter
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.LOWERCASE">
            <summary>
                a possible value for the lettered parameter
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.NUMERICAL">
            <summary>
                a possible value for the lettered parameter
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.ORDERED">
            <summary>
                membervariables
            </summary>
            <summary>
                a possible value for the numbered parameter
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.UNORDERED">
            <summary>
                a possible value for the numbered parameter
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.UPPERCASE">
            <summary>
                a possible value for the lettered parameter
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.alignindent">
            <summary>
                Indicates if the indentation of all the items has to be aligned.
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.autoindent">
            <summary>
                Indicates if the indentation has to be set automatically.
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.first">
            <summary> This variable indicates the first number of a numbered list. </summary>
        </member>
        <member name="F:iTextSharp.text.List.indentationLeft">
            <summary> The indentation of this list on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.List.indentationRight">
            <summary> The indentation of this list on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.List.lettered">
            <summary>
                Indicates if the listsymbols are numerical or alphabetical.
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.list">
            <summary> This is the ArrayList containing the different ListItems. </summary>
        </member>
        <member name="F:iTextSharp.text.List.lowercase">
            <summary>
                Indicates if the listsymbols are lowercase or uppercase.
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.numbered">
            <summary>
                Indicates if the list has to be numbered.
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.postSymbol">
            <summary>
                In case you are using numbered/lettered lists, this String is added after the number/letter.
                @since   iText 2.1.1
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.preSymbol">
            <summary>
                In case you are using numbered/lettered lists, this String is added before the number/letter.
                @since   iText 2.1.1
            </summary>
        </member>
        <member name="F:iTextSharp.text.List.symbol">
            <summary> This is the listsymbol of a list that is not numbered. </summary>
        </member>
        <member name="F:iTextSharp.text.List.symbolIndent">
            <summary> The indentation of the listitems. </summary>
        </member>
        <member name="M:iTextSharp.text.List.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  List .
            </summary>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Single)">
            <summary>
                Constructs a  List  with a specific symbol indentation.
                @since   iText 2.0.8
            </summary>
            <param name="symbolIndent">the symbol indentation</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean)">
            <summary>
                Constructs a  List .
            </summary>
            <param name="numbered">a bool</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Constructs a  List .
            </summary>
            <param name="numbered">a bool</param>
            <param name="lettered">has the list to be 'numbered' with letters</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Single)">
            <summary>
                Constructs a List.
            </summary>
            <remarks>
                the parameter symbolIndent is important for instance when
                generating PDF-documents; it indicates the indentation of the listsymbol.
            </remarks>
            <param name="numbered">a bool</param>
            <param name="symbolIndent">the indentation that has to be used for the listsymbol</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Boolean,System.Single)">
            <summary>
                Constructs a List.
            </summary>
            <param name="numbered">a bool</param>
            <param name="lettered">a bool</param>
            <param name="symbolIndent">the indentation that has to be used for the listsymbol</param>
        </member>
        <member name="P:iTextSharp.text.List.Alignindent">
            <summary>
                implementation of the Element-methods
            </summary>
        </member>
        <member name="P:iTextSharp.text.List.First">
            <summary>
                Get/set the first number
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.List.IndentationLeft">
            <summary>
                Get/set the indentation of this paragraph on the left side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.IndentationRight">
            <summary>
                Get/set the indentation of this paragraph on the right side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.Items">
            <summary>
                Gets all the items in the list.
            </summary>
            <value>an ArrayList containing ListItems</value>
        </member>
        <member name="P:iTextSharp.text.List.ListSymbol">
            <summary>
                Sets the symbol
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.List.PostSymbol">
            <summary>
                Sets the String that has to be added after a number or letter in the list symbol.
                @since	iText 2.1.1
            </summary>
        </member>
        <member name="P:iTextSharp.text.List.PreSymbol">
            <summary>
                Sets the String that has to be added before a number or letter in the list symbol.
                @since	iText 2.1.1
            </summary>
        </member>
        <member name="P:iTextSharp.text.List.Size">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Gets the size of the list.
            </summary>
            <value>a size</value>
        </member>
        <member name="P:iTextSharp.text.List.Symbol">
            <summary>
                Get/set the symbol indentation.
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.List.SymbolIndent">
            <summary>
                Gets the symbol indentation.
            </summary>
            <value>the symbol indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.TotalLeading">
            <summary>
                Gets the leading of the first listitem.
            </summary>
            <value>a leading</value>
        </member>
        <member name="P:iTextSharp.text.List.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.List.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.List.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an Object to the List.
            </summary>
            <param name="o">the object to add</param>
            <returns>true is successful</returns>
        </member>
        <member name="M:iTextSharp.text.List.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.List.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.List.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.List.GetPostSymbol">
            <summary>
                Returns the String that is after a number or letter in the list symbol.
                @since	iText 2.1.1
            </summary>
            <returns>String that is after a number or letter in the list symbol</returns>
        </member>
        <member name="M:iTextSharp.text.List.IsEmpty">
            <summary>
                Returns  true  if the list is empty.
            </summary>
            <returns> true  if the list is empty</returns>
        </member>
        <member name="M:iTextSharp.text.List.NormalizeIndentation">
            <summary>
                Makes sure all the items in the list have the same indentation.
            </summary>
        </member>
        <member name="M:iTextSharp.text.List.SetListSymbol(System.String)">
            <summary>
                Sets the listsymbol.
            </summary>
            <remarks>
                This is a shortcut for SetListSymbol(Chunk symbol).
            </remarks>
            <param name="symbol">a string</param>
        </member>
        <member name="T:iTextSharp.text.ListItem">
            <summary>
                A ListItem is a Paragraph
                that can be added to a List.
            </summary>
            <example>
                Example 1:
                List list = new List(true, 20);
                list.Add( new ListItem("First line") );
                list.Add( new ListItem("The second line is longer to see what happens once the end of the line is reached. Will it
                start on a new line?") );
                list.Add( new ListItem("Third line") );
                The result of this code looks like this:
                First line
                The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?
                Third line
                Example 2:
                List overview = new List(false, 10);
                overview.Add( new ListItem("This is an item") );
                overview.Add("This is another item");
                The result of this code looks like this:
                This is an item
                This is another item
            </example>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.List" />
            <seealso cref="T:iTextSharp.text.Paragraph" />
        </member>
        <member name="F:iTextSharp.text.ListItem._symbol">
            <summary>
                membervariables
            </summary>
            <summary> this is the symbol that wil proceed the listitem. </summary>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a ListItem.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single)">
            <summary>
                Constructs a ListItem with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(iTextSharp.text.Chunk)">
            <summary>
                Constructs a ListItem with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.String)">
            <summary>
                Constructs a ListItem with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
                Constructs a ListItem with a certain string
                and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
                Constructs a ListItem with a certain Chunk
                and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,System.String)">
            <summary>
                Constructs a ListItem with a certain string
                and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
                Constructs a ListItem with a certain leading, string
                and Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(iTextSharp.text.Phrase)">
            <summary>
                Constructs a ListItem with a certain Phrase.
            </summary>
            <param name="phrase">a Phrase</param>
        </member>
        <member name="P:iTextSharp.text.ListItem.ListSymbol">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Get/set the listsymbol.
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.ListItem.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.ListItem.IsTag(System.String)">
            <summary>
                methods
            </summary>
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.ListItem.SetIndentationLeft(System.Single,System.Boolean)">
            <summary>
                Sets the indentation of this paragraph on the left side.
            </summary>
        </member>
        <member name="T:iTextSharp.text.MarkedObject">
            <summary>
                Wrapper that allows to add properties to 'basic building block' objects.
                Before iText 1.5 every 'basic building block' implemented the MarkupAttributes interface.
                By setting attributes, you could add markup to the corresponding XML and/or HTML tag.
                This functionality was hardly used by anyone, so it was removed, and replaced by
                the MarkedObject functionality.
            </summary>
        </member>
        <member name="F:iTextSharp.text.MarkedObject.Element">
            <summary>
                The element that is wrapped in a MarkedObject.
            </summary>
        </member>
        <member name="F:iTextSharp.text.MarkedObject.markupAttributes">
            <summary>
                Contains extra markupAttributes
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedObject.#ctor(iTextSharp.text.IElement)">
            <summary>
                Creates a MarkedObject.
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedObject.#ctor">
            <summary>
                This constructor is for internal use only.
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedObject.MarkupAttributes">
            <summary>
            </summary>
            <returns>the markupAttributes</returns>
        </member>
        <member name="P:iTextSharp.text.MarkedObject.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <returns>an  ArrayList </returns>
        </member>
        <member name="P:iTextSharp.text.MarkedObject.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <returns>a type</returns>
        </member>
        <member name="M:iTextSharp.text.MarkedObject.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedObject.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedObject.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                ElementListener .
            </summary>
            <param name="listener">an  ElementListener </param>
            <returns> true  if the element was processed successfully</returns>
        </member>
        <member name="T:iTextSharp.text.MarkedSection">
            <summary>
                Wrapper that allows to add properties to a Chapter/Section object.
                Before iText 1.5 every 'basic building block' implemented the MarkupAttributes interface.
                By setting attributes, you could add markup to the corresponding XML and/or HTML tag.
                This functionality was hardly used by anyone, so it was removed, and replaced by
                the MarkedObject functionality.
            </summary>
        </member>
        <member name="F:iTextSharp.text.MarkedSection.title">
            <summary>
                This is the title of this section.
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.#ctor(iTextSharp.text.Section)">
            <summary>
                Creates a MarkedObject with a Section or Chapter object.
            </summary>
            <param name="section">the marked section</param>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.BookmarkOpen">
            <summary>
                Setter for property bookmarkOpen.
                visible.
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.BookmarkTitle">
            <summary>
                Sets the bookmark title. The bookmark title is the same as the section title but
                can be changed with this method.
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.Indentation">
            <summary>
                Sets the indentation of the content of this  Section .
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.IndentationLeft">
            <summary>
                Sets the indentation of this  Section  on the left side.
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.NumberDepth">
            <summary>
                Sets the depth of the sectionnumbers that will be shown preceding the title.
                If the numberdepth is 0, the sections will not be numbered. If the numberdepth
                is 1, the section will be numbered with their own number. If the numberdepth is
                higher (for instance x > 1), the numbers of x - 1 parents will be shown.
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.Title">
            <summary>
                Sets the title of this section.
            </summary>
        </member>
        <member name="P:iTextSharp.text.MarkedSection.TriggerNewPage">
            <summary>
                Setter for property triggerNewPage.
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.Add(iTextSharp.text.IElement)">
            <summary>
                Adds a  Paragraph ,  List ,  Table  or another  Section
                to this  Section .
                @throws  ClassCastException if the object is not a  Paragraph ,  List ,  Table  or  Section
            </summary>
            <param name="o">an object of type  Paragraph ,  List ,  Table  or another  Section </param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddSection(System.Int32)">
            <summary>
                Adds a collection of  Element s
                to this  Section .
                @throws  ClassCastException if one of the objects isn't a  Paragraph ,  List ,  Table
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddSection">
            <summary>
                Creates a  Section , adds it to this  Section  and returns it.
            </summary>
            <returns>a new Section object</returns>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.NewPage">
            <summary>
                Adds a new page to the section.
                @since    2.1.1
            </summary>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                ElementListener .
            </summary>
            <param name="listener">an  ElementListener </param>
            <returns> true  if the element was processed successfully</returns>
        </member>
        <member name="T:iTextSharp.text.Meta">
            <summary>
                This is an Element that contains
                some meta information about the document.
            </summary>
            <remarks>
                An object of type Meta can not be constructed by the user.
                Userdefined meta information should be placed in a Header-object.
                Meta is reserved for: Subject, Keywords, Author, Title, Producer
                and Creationdate information.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Header" />
        </member>
        <member name="F:iTextSharp.text.Meta._content">
            <summary>
                membervariables
            </summary>
            <summary> This is the content of the Meta-information. </summary>
        </member>
        <member name="F:iTextSharp.text.Meta._type">
            <summary> This is the type of Meta-information this object contains. </summary>
        </member>
        <member name="M:iTextSharp.text.Meta.#ctor(System.Int32,System.String)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Meta.
            </summary>
            <param name="type">the type of meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Meta.#ctor(System.String,System.String)">
            <summary>
                Constructs a Meta.
            </summary>
            <param name="tag">the tagname of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="P:iTextSharp.text.Meta.Content">
            <summary>
                Returns the content of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Name">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Chunks">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Meta.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Meta.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Meta.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to a
                IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.GetType(System.String)">
            <summary>
                Returns the name of the meta information.
            </summary>
            <param name="tag">name to match</param>
            <returns>a string</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.Append(System.String)">
            <summary>
                appends some text to this Meta.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="T:iTextSharp.text.PageSize">
            <summary>
                The PageSize-object contains a number of read only rectangles representing the most common paper sizes.
            </summary>
            <seealso cref="T:iTextSharp.text.RectangleReadOnly" />
        </member>
        <member name="F:iTextSharp.text.PageSize._11X17">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the 11x17 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A0">
            <summary>
                This is the a0 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A1">
            <summary>
                This is the a1 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A10">
            <summary>
                This is the a10 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A2">
            <summary>
                This is the a2 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A3">
            <summary>
                This is the a3 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A4">
            <summary>
                This is the a4 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A5">
            <summary>
                This is the a5 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A6">
            <summary>
                This is the a6 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A7">
            <summary>
                This is the a7 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A8">
            <summary>
                This is the a8 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A9">
            <summary>
                This is the a9 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ArchA">
            <summary>
                This is the archA format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ArchB">
            <summary>
                This is the archB format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ArchC">
            <summary>
                This is the archC format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ArchD">
            <summary>
                This is the archD format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ArchE">
            <summary>
                This is the archE format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B0">
            <summary>
                This is the b0 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B1">
            <summary>
                This is the b1 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B10">
            <summary>
                This is the b10 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B2">
            <summary>
                This is the b2 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B3">
            <summary>
                This is the b3 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B4">
            <summary>
                This is the b4 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B5">
            <summary>
                This is the b5 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B6">
            <summary>
                This is the b6 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B7">
            <summary>
                This is the b7 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B8">
            <summary>
                This is the b8 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B9">
            <summary>
                This is the b9 format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.CrownOctavo">
            <summary>
                This is the Crown Octavo format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.CrownQuarto">
            <summary>
                This is the Crown Quarto format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.DemyOctavo">
            <summary>
                This is the Demy Octavo format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.DemyQuarto">
            <summary>
                This is the Demy Quarto format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Executive">
            <summary>
                This is the executive format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Flsa">
            <summary>
                This is the American Foolscap format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Flse">
            <summary>
                This is the European Foolscap format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Halfletter">
            <summary>
                This is the halfletter format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Id1">
            <summary>
                This is the ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch)
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Id2">
            <summary>
                This is the ISO 7810 ID-2 format (A7 rotated)
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Id3">
            <summary>
                This is the ISO 7810 ID-3 format (B7 rotated)
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.LargeCrownOctavo">
            <summary>
                This is the Large Crown Octavo format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.LargeCrownQuarto">
            <summary>
                This is the Large Crown Quarto format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Ledger">
            <summary>
                This is the ledger format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Legal">
            <summary>
                This is the legal format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Letter">
            <summary>
                This is the letter format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Note">
            <summary>
                This is the note format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.PenguinLargePaperback">
            <summary>
                This is the Penguin large paparback format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.PenguinSmallPaperback">
            <summary>
                This is the Pengiun small paperback format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Postcard">
            <summary>
                This is the postcard format
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.RoyalOctavo">
            <summary>
                This is the Royal Octavo format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.RoyalQuarto">
            <summary>
                This is the Royal Quarto format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.SmallPaperback">
            <summary>
                This is the small paperback format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.Tabloid">
            <summary>
                This is the tabloid format
            </summary>
        </member>
        <member name="M:iTextSharp.text.PageSize.GetRectangle(System.String)">
            <summary>
                This method returns a Rectangle based on a String.
                Possible values are the the names of a constant in this class
                (for instance "A4", "LETTER",...) or a value like "595 842"
            </summary>
        </member>
        <member name="T:iTextSharp.text.Paragraph">
            <summary>
                A Paragraph is a series of Chunks and/or Phrases.
            </summary>
            <remarks>
                A Paragraph has the same qualities of a Phrase, but also
                some additional layout-parameters:
                the indentation
                the alignment of the text
            </remarks>
            <example>
                Paragraph p = new Paragraph("This is a paragraph",
                FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));
            </example>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Phrase" />
            <seealso cref="T:iTextSharp.text.ListItem" />
        </member>
        <member name="F:iTextSharp.text.Paragraph.alignment">
            <summary>
                membervariables
            </summary>
            <summary> The alignment of the text. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.indentationLeft">
            <summary> The indentation of this paragraph on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.indentationRight">
            <summary> The indentation of this paragraph on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.Keeptogether">
            <summary> Does the paragraph has to be kept together on 1 page. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.multipliedLeading">
            <summary>
                The text leading that is multiplied by the biggest font size in the line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.spacingAfter">
            <summary>
                The spacing after the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.spacingBefore">
            <summary>
                The spacing before the paragraph.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Paragraph.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single)">
            <summary>
                Constructs a Paragraph with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(iTextSharp.text.Chunk)">
            <summary>
                Constructs a Paragraph with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
                Constructs a Paragraph with a certain Chunk
                and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.String)">
            <summary>
                Constructs a Paragraph with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
                Constructs a Paragraph with a certain string
                and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,System.String)">
            <summary>
                Constructs a Paragraph with a certain string
                and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
                Constructs a Paragraph with a certain leading, string
                and Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(iTextSharp.text.Phrase)">
            <summary>
                Constructs a Paragraph with a certain Phrase.
            </summary>
            <param name="phrase">a Phrase</param>
        </member>
        <member name="P:iTextSharp.text.Paragraph.Alignment">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Get/set the alignment of this paragraph.
            </summary>
            <value>a integer</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.ExtraParagraphSpace">
            <summary>
                Holds value of property extraParagraphSpace.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Paragraph.FirstLineIndent">
            <summary>
                Holds value of property firstLineIndent.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Paragraph.IndentationLeft">
            <summary>
                Get/set the indentation of this paragraph on the left side.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.IndentationRight">
            <summary>
                Get/set the indentation of this paragraph on the right side.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.KeepTogether">
            <summary>
                Set/get if this paragraph has to be kept together on one page.
            </summary>
            <value>a bool</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.MultipliedLeading">
            <summary>
                Sets the variable leading. The resultant leading will be
                multipliedLeading*maxFontSize where maxFontSize is the
                size of the bigest font in the line.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Paragraph.TotalLeading">
            <summary>
                Gets the total leading.
                This method is based on the assumption that the
                font of the Paragraph is the font of all the elements
                that make part of the paragraph. This isn't necessarily
                true.
            </summary>
            <returns>the total leading (fixed and multiplied)</returns>
        </member>
        <member name="P:iTextSharp.text.Paragraph.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Paragraph.IsTag(System.String)">
            <summary>
                methods
            </summary>
            <summary>
                Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Paragraph.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an Object to the Paragraph.
            </summary>
            <param name="o">the object to add</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Paragraph.SetAlignment(System.String)">
            <summary>
                setting the membervariables
            </summary>
            <summary>
                Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.SetLeading(System.Single,System.Single)">
            <summary>
                Sets the leading fixed and variable. The resultant leading will be
                fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
                size of the bigest font in the line.
            </summary>
            <param name="fixedLeading">the fixed leading</param>
            <param name="multipliedLeading">the variable leading</param>
        </member>
        <member name="T:iTextSharp.text.pdf.AcroFields">
            <summary>
                Query and change fields in existing documents either by method
                calls or by FDF merging.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE">
            <summary>
                A field type invalid or not found.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT">
            <summary>
                A field type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields._fieldCache">
            <summary>
                Holds value of property fieldCache.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields._generateAppearances">
            <summary>
                Holds value of property generateAppearances.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.FieldCache">
            <summary>
                Sets a cache for field appearances. Parsing the existing PDF to
                create a new TextField is time expensive. For those tasks that repeatedly
                fill the same PDF with different field values the use of the cache has dramatic
                speed advantages. An example usage:
                String pdfFile = ...;// the pdf file used as template
                ArrayList xfdfFiles = ...;// the xfdf file names
                ArrayList pdfOutFiles = ...;// the output file names, one for each element in xpdfFiles
                Hashtable cache = new Hashtable();// the appearances cache
                PdfReader originalReader = new PdfReader(pdfFile);
                for (int k = 0; k &lt; xfdfFiles.Size(); ++k) {
                PdfReader reader = new PdfReader(originalReader);
                XfdfReader xfdf = new XfdfReader((String)xfdfFiles.Get(k));
                PdfStamper stp = new PdfStamper(reader, new FileOutputStream((String)pdfOutFiles.Get(k)));
                AcroFields af = stp.GetAcroFields();
                af.SetFieldCache(cache);
                af.SetFields(xfdf);
                stp.Close();
                }
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Fields">
            <summary>
                Gets all the fields. The fields are keyed by the fully qualified field name and
                the value is an instance of  AcroFields.Item .
            </summary>
            <returns>all the fields</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.GenerateAppearances">
            <summary>
                Sets the option to generate appearances. Not generating apperances
                will speed-up form filling but the results can be
                unexpected in Acrobat. Don't use it unless your environment is well
                controlled. The default is  true .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.SubstitutionFonts">
            <summary>
                Sets a list of substitution fonts. The list is composed of  BaseFont  and can also be  null . The fonts in this
                list will be used if the original
                font doesn't contain the needed glyphs.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.TotalRevisions">
            <summary>
                Gets the total number of revisions this document has.
            </summary>
            <returns>the total number of revisions</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Xfa">
            <summary>
                Gets the XFA form processor.
            </summary>
            <returns>the XFA form processor</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.AddSubstitutionFont(iTextSharp.text.pdf.BaseFont)">
            <summary>
                Adds a substitution font to the list. The fonts in this list will be used if the original
                font doesn't contain the needed glyphs.
            </summary>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ExportAsFdf(iTextSharp.text.pdf.FdfWriter)">
            <summary>
                Export the fields as a FDF.
            </summary>
            <param name="writer">the FDF writer</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ExtractRevision(System.String)">
            <summary>
                Extracts a revision from the document.
                it's not a signature field
                @throws IOException on error
            </summary>
            <param name="field">the signature field name</param>
            <returns>an  Stream  covering the revision. Returns  null  if</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetAppearanceStates(System.String)">
            <summary>
                Gets the list of appearance names. Use it to get the names allowed
                with radio and checkbox fields. If the /Opt key exists the values will
                also be included. The name 'Off' may also be valid
                even if not returned in the list.
            </summary>
            <param name="fieldName">the fully qualified field name</param>
            <returns>the list of names or  null  if the field does not exist</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetBlankSignatureNames">
            <summary>
                Gets the field names that have blank signatures.
            </summary>
            <returns>the field names that have blank signatures</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetField(System.String)">
            <summary>
                Gets the field value.
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldItem(System.String)">
            <summary>
                Gets the field structure.
                does not exist
            </summary>
            <param name="name">the name of the field</param>
            <returns>the field structure or  null  if the field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldPositions(System.String)">
            <summary>
                Gets the field box positions in the document. The return is an array of  float
                multiple of 5. For each of this groups the values are: [page, llx, lly, urx,
                ury]. The coordinates have the page rotation in consideration.
            </summary>
            <param name="name">the field name</param>
            <returns>the positions or  null  if field does not exist</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldType(System.String)">
            <summary>
                Gets the field type. The type can be one of:  FIELD_TYPE_PUSHBUTTON ,
                FIELD_TYPE_CHECKBOX ,  FIELD_TYPE_RADIOBUTTON ,
                FIELD_TYPE_TEXT ,  FIELD_TYPE_LIST ,
                FIELD_TYPE_COMBO  or  FIELD_TYPE_SIGNATURE .
                If the field does not exist or is invalid it returns
                FIELD_TYPE_NONE .
            </summary>
            <param name="fieldName">the field name</param>
            <returns>the field type</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetListOptionDisplay(System.String)">
            <summary>
                Gets the list of display option values from fields of type list or combo.
                If the field doesn't exist or the field type is not list or combo it will return
                null .
            </summary>
            <param name="fieldName">the field name</param>
            <returns>the list of export option values from fields of type list or combo</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetListOptionExport(System.String)">
            <summary>
                Gets the list of export option values from fields of type list or combo.
                If the field doesn't exist or the field type is not list or combo it will return
                null .
            </summary>
            <param name="fieldName">the field name</param>
            <returns>the list of export option values from fields of type list or combo</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetListSelection(System.String)">
            <summary>
                Gets the field values of a Choice field.
                @since 2.1.3
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetNewPushbuttonFromField(System.String)">
            <summary>
                Creates a new pushbutton from an existing field. If there are several pushbuttons with the same name
                only the first one is used. This pushbutton can be changed and be used to replace
                an existing one, with the same name or other name, as long is it is in the same document. To replace an existing
                pushbutton
                call {@link #replacePushbuttonField(String,PdfFormField)}.
            </summary>
            <param name="field">the field name that should be a pushbutton</param>
            <returns>a new pushbutton or  null  if the field is not a pushbutton</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetNewPushbuttonFromField(System.String,System.Int32)">
            <summary>
                Creates a new pushbutton from an existing field. This pushbutton can be changed and be used to replace
                an existing one, with the same name or other name, as long is it is in the same document. To replace an existing
                pushbutton
                call {@link #replacePushbuttonField(String,PdfFormField,int)}.
            </summary>
            <param name="field">the field name that should be a pushbutton</param>
            <param name="order">the field order in fields with same name</param>
            <returns>a new pushbutton or  null  if the field is not a pushbutton</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetRevision(System.String)">
            <summary>
                Gets this  field  revision.
            </summary>
            <param name="field">the signature field name</param>
            <returns>the revision or zero if it's not a signature field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetSignatureDictionary(System.String)">
            <summary>
                Gets the signature dictionary, the one keyed by /V.
                a signature
            </summary>
            <param name="name">the field name</param>
            <returns>the signature dictionary keyed by /V or  null  if the field is not</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetSignatureNames">
            <summary>
                Gets the field names that have signatures and are signed.
            </summary>
            <returns>the field names that have signatures and are signed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetTranslatedFieldName(System.String)">
            <summary>
                Gets the long XFA translated name.
            </summary>
            <param name="name">the name of the field</param>
            <returns>the long field name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.MergeXfaData(System.Xml.XmlNode)">
            <summary>
                Merges an XML data structure into this form.
                @throws java.io.IOException on error
                @throws com.lowagie.text.DocumentException o error
            </summary>
            <param name="n">the top node of the data structure</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldAndPositions(System.String)">
            <summary>
                Gets the field by name, and positions.
            </summary>
            <param name="name">the name of the field</param>
            <returns>arraylist with value and positions</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RegenerateField(System.String)">
            <summary>
                Regenerates the field appearance.
                This is usefull when you change a field property, but not its value,
                for instance form.SetFieldProperty("f", "bgcolor", Color.BLUE, null);
                This won't have any effect, unless you use RegenerateField("f") after changing
                the property.
                @throws IOException on error
                @throws DocumentException on error
                false  otherwise
            </summary>
            <param name="name">the fully qualified field name or the partial name in the case of XFA forms</param>
            <returns> true  if the field was found and changed,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveField(System.String,System.Int32)">
            <summary>
                Removes a field from the document. If page equals -1 all the fields with this
                name  are removed from the document otherwise only the fields in
                that particular page are removed.
            </summary>
            <param name="name">the field name</param>
            <param name="page">the page to remove the field from or -1 to remove it from all the pages</param>
            <returns> true  if the field exists,  false otherwise </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveField(System.String)">
            <summary>
                Removes a field from the document.
            </summary>
            <param name="name">the field name</param>
            <returns> true  if the field exists,  false otherwise </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveFieldsFromPage(System.Int32)">
            <summary>
                Removes all the fields from  page .
            </summary>
            <param name="page">the page to remove the fields from</param>
            <returns> true  if any field was removed,  false otherwise </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RenameField(System.String,System.String)">
            <summary>
                Renames a field. Only the last part of the name can be renamed. For example,
                if the original field is "ab.cd.ef" only the "ef" part can be renamed.
                otherwise
            </summary>
            <param name="oldName">the old field name</param>
            <param name="newName">the new field name</param>
            <returns> true  if the renaming was successful,  false </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ReplacePushbuttonField(System.String,iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Replaces the first field with a new pushbutton. The pushbutton can be created with
                {@link #getNewPushbuttonFromField(String)} from the same document or it can be a
                generic PdfFormField of the type pushbutton.
                was not a pushbutton
            </summary>
            <param name="field">the field name</param>
            <param name="button">the  PdfFormField  representing the pushbutton</param>
            <returns> true  if the field was replaced,  false  if the field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ReplacePushbuttonField(System.String,iTextSharp.text.pdf.PdfFormField,System.Int32)">
            <summary>
                Replaces the designated field with a new pushbutton. The pushbutton can be created with
                {@link #getNewPushbuttonFromField(String,int)} from the same document or it can be a
                generic PdfFormField of the type pushbutton.
                was not a pushbutton
            </summary>
            <param name="field">the field name</param>
            <param name="button">the  PdfFormField  representing the pushbutton</param>
            <param name="order">the field order in fields with same name</param>
            <returns> true  if the field was replaced,  false  if the field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetExtraMargin(System.Single,System.Single)">
            <summary>
                Sets extra margins in text fields to better mimic the Acrobat layout.
            </summary>
            <param name="extraMarginLeft">the extra marging left</param>
            <param name="extraMarginTop">the extra margin top</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetField(System.String,System.String)">
            <summary>
                Sets the field value.
                @throws IOException on error
                @throws DocumentException on error
                false  otherwise
            </summary>
            <param name="name">the fully qualified field name or the partial name in the case of XFA forms</param>
            <param name="value">the field value</param>
            <returns> true  if the field was found and changed,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetField(System.String,System.String,System.String)">
            <summary>
                Sets the field value and the display string. The display string
                is used to build the appearance in the cases where the value
                is modified by Acrobat with JavaScript and the algorithm is
                known.
                the  value  parameter will be used
                false  otherwise
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <param name="name">the fully qualified field name or the partial name in the case of XFA forms</param>
            <param name="value">the field value</param>
            <param name="display">the string that is used for the appearance. If  null </param>
            <returns> true  if the field was found and changed,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFieldProperty(System.String,System.String,System.Object,System.Int32[])">
            <summary>
                Sets a field property. Valid property names are:
                textfont - sets the text font. The value for this entry is a  BaseFont .
                textcolor - sets the text color. The value for this entry is a  java.awt.Color .
                textsize - sets the text size. The value for this entry is a  Float .
                bgcolor - sets the background color. The value for this entry is a  java.awt.Color .
                If  null  removes the background.
                bordercolor - sets the border color. The value for this entry is a  java.awt.Color .
                If  null  removes the border.
                Set to  null  to process all
            </summary>
            <param name="field">the field name</param>
            <param name="name">the property name</param>
            <param name="value">the property value</param>
            <param name="inst">an array of  int  indexing into  AcroField.Item.merged  elements to process.</param>
            <returns> true  if the property exists,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFieldProperty(System.String,System.String,System.Int32,System.Int32[])">
            <summary>
                Sets a field property. Valid property names are:
                flags - a set of flags specifying various characteristics of the field�s widget annotation.
                The value of this entry replaces that of the F entry in the form�s corresponding annotation dictionary.
                setflags - a set of flags to be set (turned on) in the F entry of the form�s corresponding
                widget annotation dictionary. Bits equal to 1 cause the corresponding bits in F to be set to 1.
                clrflags - a set of flags to be cleared (turned off) in the F entry of the form�s corresponding
                widget annotation dictionary. Bits equal to 1 cause the corresponding
                bits in F to be set to 0.
                fflags - a set of flags specifying various characteristics of the field. The value
                of this entry replaces that of the Ff entry in the form�s corresponding field dictionary.
                setfflags - a set of flags to be set (turned on) in the Ff entry of the form�s corresponding
                field dictionary. Bits equal to 1 cause the corresponding bits in Ff to be set to 1.
                clrfflags - a set of flags to be cleared (turned off) in the Ff entry of the form�s corresponding
                field dictionary. Bits equal to 1 cause the corresponding bits in Ff
                to be set to 0.
                Set to  null  to process all
            </summary>
            <param name="field">the field name</param>
            <param name="name">the property name</param>
            <param name="value">the property value</param>
            <param name="inst">an array of  int  indexing into  AcroField.Item.merged  elements to process.</param>
            <returns> true  if the property exists,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFields(iTextSharp.text.pdf.FdfReader)">
            <summary>
                Sets the fields by FDF merging.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <param name="fdf">the FDF form</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetListOption(System.String,System.String[],System.String[])">
            <summary>
                Sets the option list for fields of type list or combo. One of  exportValues
                or  displayValues  may be  null  but not both. This method will only
                set the list but will not set the value or appearance. For that, calling  setField()
                is required.
                An example:
                PdfReader pdf = new PdfReader("input.pdf");
                PdfStamper stp = new PdfStamper(pdf, new FileOutputStream("output.pdf"));
                AcroFields af = stp.GetAcroFields();
                af.SetListOption("ComboBox", new String[]{"a", "b", "c"}, new String[]{"first", "second", "third"});
                af.SetField("ComboBox", "b");
                stp.Close();
            </summary>
            <param name="fieldName">the field name</param>
            <param name="exportValues">the export values</param>
            <param name="displayValues">the display values</param>
            <returns> true  if the operation succeeded,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetListSelection(System.String,System.String[])">
            <summary>
                Sets different values in a list selection.
                No appearance is generated yet; nor does the code check if multiple select is allowed.
                @since 2.1.4
            </summary>
            <param name="name">the name of the field</param>
            <param name="value">an array with values that need to be selected</param>
            <returns>true only if the field value was changed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SignatureCoversWholeDocument(System.String)">
            <summary>
                Checks is the signature covers the entire document or just part of it.
                false  otherwise
            </summary>
            <param name="name">the signature field name</param>
            <returns> true  if the signature covers the entire document,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.VerifySignature(System.String)">
            <summary>
                Verifies a signature. An example usage is:
                KeyStore kall = PdfPKCS7.LoadCacertsKeyStore();
                PdfReader reader = new PdfReader("my_signed_doc.pdf");
                AcroFields af = reader.GetAcroFields();
                ArrayList names = af.GetSignatureNames();
                for (int k = 0; k &lt; names.Size(); ++k) {
                String name = (String)names.Get(k);
                System.out.Println("Signature name: " + name);
                System.out.Println("Signature covers whole document: " + af.SignatureCoversWholeDocument(name));
                PdfPKCS7 pk = af.VerifySignature(name);
                Calendar cal = pk.GetSignDate();
                Certificate pkc[] = pk.GetCertificates();
                System.out.Println("Subject: " + PdfPKCS7.GetSubjectFields(pk.GetSigningCertificate()));
                System.out.Println("Document modified: " + !pk.Verify());
                Object fails[] = PdfPKCS7.VerifyCertificates(pkc, kall, null, cal);
                if (fails == null)
                System.out.Println("Certificates verified against the KeyStore");
                else
                System.out.Println("Certificate failed: " + fails[1]);
                }
            </summary>
            <param name="name">the signature field name</param>
            <returns>a  PdfPKCS7  class to continue the verification</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.AcroFields.Item">
            <summary>
                The field representations for retrieval and modification.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WRITE_MERGED">
            <summary>
                writeToAll  constant.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WRITE_VALUE">
            <summary>
                writeToAll  and  markUsed  constant.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WRITE_WIDGET">
            <summary>
                writeToAll  and  markUsed  constant.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.Merged">
            <summary>
                An array of  PdfDictionary  with all the field
                and widget tags merged.
                @deprecated (will remove 'public' in the future)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.Page">
            <summary>
                An array of  Integer  with the page numbers where
                the widgets are displayed.
                @deprecated (will remove 'public' in the future)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.TabOrder">
            <summary>
                An array of  Integer  with the tab order of the field in the page.
                @deprecated (will remove 'public' in the future)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.Values">
            <summary>
                An array of  PdfDictionary  where the value tag /V
                is present.
                @deprecated (will remove 'public' in the future)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WidgetRefs">
            <summary>
                An array of  PdfDictionary  with the widget references.
                @deprecated (will remove 'public' in the future)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.Widgets">
            <summary>
                An array of  PdfDictionary  with the widgets.
                @deprecated (will remove 'public' in the future)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Item.Size">
            <summary>
                Preferred method of determining the number of instances
                of a given field.
                @since 2.1.5
            </summary>
            <returns>number of instances</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetMerged(System.Int32)">
            <summary>
                Retrieve the merged dictionary for the given instance.  The merged
                dictionary contains all the keys present in parent fields, though they
                may have been overwritten (or modified?) by children.
                Example: a merged radio field dict will contain /V
                @since 2.1.5
            </summary>
            <param name="idx">instance index</param>
            <returns>the merged dictionary for the given instance</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetPage(System.Int32)">
            <summary>
                Retrieve the page number of the given instance
                @since 2.1.5
            </summary>
            <param name="idx"></param>
            <returns>remember, pages are "1-indexed", not "0-indexed" like field instances.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetTabOrder(System.Int32)">
            <summary>
                Gets the tabOrder.
                @since 2.1.5
            </summary>
            <param name="idx"></param>
            <returns>tab index of the given field instance</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetValue(System.Int32)">
            <summary>
                Retrieve the value dictionary of the given instance
                @since 2.1.5
            </summary>
            <param name="idx">instance index</param>
            <returns>dictionary storing this instance's value. It may be shared across instances.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetWidget(System.Int32)">
            <summary>
                Retrieve the widget dictionary of the given instance
                @since 2.1.5
            </summary>
            <param name="idx">instance index</param>
            <returns>The dictionary found in the appropriate page's Annot array.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetWidgetRef(System.Int32)">
            <summary>
                Retrieve the reference to the given instance
                @since 2.1.5
            </summary>
            <param name="idx">instance index</param>
            <returns>reference to the given field instance</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.MarkUsed(iTextSharp.text.pdf.AcroFields,System.Int32)">
            <summary>
                Mark all the item dictionaries used matching the given flags
                @since 2.1.5
            </summary>
            <param name="parentFields"></param>
            <param name="writeFlags">WRITE_MERGED is ignored</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.WriteToAll(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject,System.Int32)">
            <summary>
                This function writes the given key/value pair to all the instances
                of merged, widget, and/or value, depending on the  writeFlags  setting
                @since 2.1.5
            </summary>
            <param name="key">you'll never guess what this is for.</param>
            <param name="value">if value is null, the key will be removed</param>
            <param name="writeFlags">ORed together WRITE_* flags</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddMerged(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Adds a merged dictionary to this Item.
                @since 2.1.5
            </summary>
            <param name="mergeDict"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddPage(System.Int32)">
            <summary>
                Adds a page to the current Item.
                @since 2.1.5
            </summary>
            <param name="pg"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddTabOrder(System.Int32)">
            <summary>
                Adds a tab order value to this Item.
                @since 2.1.5
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddValue(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Add a value dict to this Item
                @since 2.1.5
            </summary>
            <param name="value">new value dictionary</param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddWidget(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Add a widget dict to this Item
                @since 2.1.5
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddWidgetRef(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Add a widget ref to this Item
                @since 2.1.5
            </summary>
            <param name="widgRef"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.ForcePage(System.Int32,System.Int32)">
            <summary>
                forces a page value into the Item.
                @since 2.1.5
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.Remove(System.Int32)">
            <summary>
                Remove the given instance from this item.  It is possible to
                remove all instances using this function.
                @since 2.1.5
            </summary>
            <param name="killIdx"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.ArabicLigaturizer">
            <summary>
                Shape arabic characters. This code was inspired by an LGPL'ed C library:
                Pango ( see http://www.pango.com/ ). Note that the code of this is the
                original work of Paulo Soares. Hence it is perfectly justifiable to distribute
                it under the MPL.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_AN">
            <summary>
                Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_AN_EXTENDED">
            <summary>
                Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_MASK">
            <summary>
                Bit mask for digit type options.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_AN2EN">
            <summary>
                Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN">
            <summary>
                Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN_INIT_AL">
            <summary>
                Digit shaping option:
                Replace European digits (U+0030...U+0039) by Arabic-Indic digits
                if the most recent strongly directional character
                is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
                The initial state at the start of the text is assumed to be an Arabic,
                letter, so European digits at the start of the text will change.
                Compare to DIGITS_ALEN2AN_INT_LR.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN_INIT_LR">
            <summary>
                Digit shaping option:
                Replace European digits (U+0030...U+0039) by Arabic-Indic digits
                if the most recent strongly directional character
                is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
                The initial state at the start of the text is assumed to be not an Arabic,
                letter, so European digits at the start of the text will not change.
                Compare to DIGITS_ALEN2AN_INIT_AL.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_MASK">
            <summary>
                Bit mask for digit shaping options.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DigitsReserved">
            <summary>
                Not a valid option value.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ArabicLigaturizer.Doublelig(System.Text.StringBuilder,System.Int32)">
            <summary>
                return len
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.BadPdfFormatException">
            <summary>
                Signals that a bad PDF format has been used to construct a  PdfObject .
                @see        PdfException
                @see        PdfBoolean
                @see        PdfNumber
                @see        PdfString
                @see        PdfName
                @see        PdfDictionary
                @see        PdfFont
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.Barcode">
            <summary>
                Base class containing properties and methods commom to all
                barcode types.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODABAR">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128_RAW">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128_UCC">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.EAN13">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.EAN8">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.PLANET">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.POSTNET">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.SUPP2">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.SUPP5">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.UPCA">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.UPCE">
            <summary>
                A type of barcode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.altText">
            <summary>
                The alternate text to be used, if present.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.barHeight">
            <summary>
                The height of the bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.baseline">
            <summary>
                If positive, the text distance under the bars. If zero or negative,
                the text distance above the bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.checksumText">
            <summary>
                Shows the generated checksum in the the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.code">
            <summary>
                The code to generate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.codeType">
            <summary>
                The code type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.extended">
            <summary>
                Generates extended barcode 39.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.font">
            <summary>
                The text font.  null  if no text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.generateChecksum">
            <summary>
                The optional checksum generation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.guardBars">
            <summary>
                Show the guard bars for barcode EAN.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.inkSpreading">
            <summary>
                The ink spreading.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.n">
            <summary>
                The bar multiplier for wide bars or the distance between
                bars for Postnet and Planet.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.size">
            <summary>
                The size of the text or the height of the shorter bar
                in Postnet.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.startStopText">
            <summary>
                Show the start and stop character '*' in the text for
                the barcode 39 or 'ABCD' for codabar.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.textAlignment">
            <summary>
                The text Element. Can be  Element.ALIGN_LEFT ,
                Element.ALIGN_CENTER  or  Element.ALIGN_RIGHT .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.x">
            <summary>
                The minimum bar width.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.AltText">
            <summary>
                Sets the alternate text. If present, this text will be used instead of the
                text derived from the supplied code.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.BarHeight">
            <summary>
                Gets the height of the bars.
            </summary>
            <returns>the height of the bars</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Baseline">
            <summary>
                Gets the text baseline.
                If positive, the text distance under the bars. If zero or negative,
                the text distance above the bars.
            </summary>
            <returns>the baseline.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.ChecksumText">
            <summary>
                Sets the property to show the generated checksum in the the text.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Code">
            <summary>
                Gets the code to generate.
            </summary>
            <returns>the code to generate</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.CodeType">
            <summary>
                Gets the code type.
            </summary>
            <returns>the code type</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Extended">
            <summary>
                Sets the property to generate extended barcode 39.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Font">
            <summary>
                Gets the text font.  null  if no text.
            </summary>
            <returns>the text font.  null  if no text</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.GenerateChecksum">
            <summary>
                The property for the optional checksum generation.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.GuardBars">
            <summary>
                Sets the property to show the guard bars for barcode EAN.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.N">
            <summary>
                Gets the bar multiplier for wide bars.
            </summary>
            <returns>the bar multiplier for wide bars</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Size">
            <summary>
                Gets the size of the text.
            </summary>
            <returns>the size of the text</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.StartStopText">
            <summary>
                Gets the property to show the start and stop character '*' in the text for
                the barcode 39.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.TextAlignment">
            <summary>
                Gets the text Element. Can be  Element.ALIGN_LEFT ,
                Element.ALIGN_CENTER  or  Element.ALIGN_RIGHT .
            </summary>
            <returns>the text alignment</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.X">
            <summary>
                Gets the minimum bar width.
            </summary>
            <returns>the minimum bar width</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode.CreateImageWithBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Creates an  Image  with the barcode.
                serves no other use
                @see #placeBarcode(PdfContentByte cb, Color barColor, Color textColor)
            </summary>
            <param name="cb">the  PdfContentByte  to create the  Image . It</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the  Image </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode.CreateTemplateWithBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Creates a template with the barcode.
                serves no other use
                @see #placeBarcode(PdfContentByte cb, Color barColor, Color textColor)
            </summary>
            <param name="cb">the  PdfContentByte  to create the template. It</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the template</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.Barcode128">
            <summary>
                Implements the code 128 and UCC/EAN-128. Other symbologies are allowed in raw mode.
                The code types allowed are:
                CODE128  - plain barcode 128.
                CODE128_UCC  - support for UCC/EAN-128 with a full list of AI.
                CODE128_RAW  - raw mode. The code attribute has the actual codes from 0
                to 105 followed by '&#92;uffff' and the human readable text.
                The default parameters are:
                x = 0.8f;
                font = BaseFont.CreateFont("Helvetica", "winansi", false);
                size = 8;
                baseline = size;
                barHeight = size * 3;
                textint= Element.ALIGN_CENTER;
                codeType = CODE128;
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_AB_TO_C">
            <summary>
                The charset code change.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_AC_TO_B">
            <summary>
                The charset code change.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_BC_TO_A">
            <summary>
                The charset code change.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.FNC1_INDEX">
            <summary>
                The code for UCC/EAN-128.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_A">
            <summary>
                The start code.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_B">
            <summary>
                The start code.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_C">
            <summary>
                The start code.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128._bars">
            <summary>
                The bars to generate the code.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128._barsStop">
            <summary>
                The stop bars.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.#ctor">
            <summary>
                Creates new Barcode128
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode128.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode128.Code">
            <summary>
                Sets the code to generate. If it's an UCC code and starts with '(' it will
                be split by the AI. This code in UCC mode is valid:
                (01)00000090311314(10)ABC123(15)060916
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetBarsCode128Raw(System.String)">
            <summary>
                Generates the bars. The input has the actual barcodes, not
                the human readable text.
            </summary>
            <param name="text">the barcode</param>
            <returns>the bars</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetHumanReadableUccean(System.String)">
            <summary>
                Gets the human readable text of a sequence of AI.
            </summary>
            <param name="code">the text</param>
            <returns>the human readable text</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetRawText(System.String,System.Boolean)">
            <summary>
                Converts the human readable text to the characters needed to
                create a barcode. Some optimization is done to get the shortest code.
                the character FNC1 is added
            </summary>
            <param name="text">the text to convert</param>
            <param name="ucc"> true  if it is an UCC/EAN-128. In this case</param>
            <returns>the code ready to be fed to GetBarsCode128Raw()</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.RemoveFnc1(System.String)">
            <summary>
                Removes the FNC1 codes in the text.
            </summary>
            <param name="code">the text to clean</param>
            <returns>the cleaned text</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetPackedRawDigits(System.String,System.Int32,System.Int32)">
            <summary>
                Packs the digits for charset C also considering FNC1. It assumes that all the parameters
                are valid.
            </summary>
            <param name="text">the text to pack</param>
            <param name="textIndex">where to pack from</param>
            <param name="numDigits">the number of digits to pack. It is always an even number</param>
            <returns>the packed digits, two digits per character</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.IsNextDigits(System.String,System.Int32,System.Int32)">
            <summary>
                Returns  true  if the next  numDigits
                starting from index  textIndex  are numeric skipping any FNC1.
            </summary>
            <param name="text">the text to check</param>
            <param name="textIndex">where to check from</param>
            <param name="numDigits">the number of digits to check</param>
            <returns>the check result</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.Barcode39">
            <summary>
                Implements the code 39 and code 39 extended. The default parameters are:
                x = 0.8f;
                n = 2;
                font = BaseFont.CreateFont("Helvetica", "winansi", false);
                size = 8;
                baseline = size;
                barHeight = size * 3;
                textint= Element.ALIGN_CENTER;
                generateChecksum = false;
                checksumText = false;
                startStopText = true;
                extended = false;
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.Chars">
            <summary>
                The index chars to  BARS .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.EXTENDED">
            <summary>
                The character combinations to make the code 39 extended.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39._bars">
            <summary>
                The bars to generate the code.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.#ctor">
            <summary>
                Creates a new Barcode39.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode39.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetBarsCode39(System.String)">
            <summary>
                Creates the bars.
                stop characters
            </summary>
            <param name="text">the text to create the bars. This text does not include the start and</param>
            <returns>the bars</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetCode39Ex(System.String)">
            <summary>
                Converts the extended text into a normal, escaped text,
                ready to generate bars.
            </summary>
            <param name="text">the extended text</param>
            <returns>the escaped text</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetChecksum(System.String)">
            <summary>
                Calculates the checksum.
            </summary>
            <param name="text">the text</param>
            <returns>the checksum</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeCodabar">
            <summary>
                Implements the code codabar. The default parameters are:
                x = 0.8f;
                n = 2;
                font = BaseFont.CreateFont("Helvetica", "winansi", false);
                size = 8;
                baseline = size;
                barHeight = size * 3;
                textAlignment = Element.ALIGN_CENTER;
                generateChecksum = false;
                checksumText = false;
                startStopText = false;
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeCodabar.Chars">
            <summary>
                The index chars to  BARS .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeCodabar._bars">
            <summary>
                The bars to generate the code.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.#ctor">
            <summary>
                Creates a new BarcodeCodabar.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeCodabar.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.GetBarsCodabar(System.String)">
            <summary>
                Creates the bars.
            </summary>
            <param name="text">the text to create the bars</param>
            <returns>the bars</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeDatamatrix">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ASCII">
            <summary>
                ASCII encodation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_AUTO">
            <summary>
                The best encodation will be used.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_B256">
            <summary>
                Binary encodation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_C40">
            <summary>
                C40 encodation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_EDIFACT">
            <summary>
                EDIFACT encodation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ERROR_EXTENSION">
            <summary>
                An error while parsing an extension.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ERROR_INVALID_SQUARE">
            <summary>
                The dimensions given for the symbol are illegal.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ERROR_TEXT_TOO_BIG">
            <summary>
                The text is too big for the symbology capabilities.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_EXTENSION">
            <summary>
                Allows extensions to be embedded at the start of the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_NO_ERROR">
            <summary>
                No error.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_RAW">
            <summary>
                No encodation needed. The bytes provided are already encoded.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_TEST">
            <summary>
                Doesn't generate the image but returns all the other information.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_TEXT">
            <summary>
                TEXT encodation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_X21">
            <summary>
                X21 encodation.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.BitImage">
            <summary>
                Gets the generated image. The image is represented as a stream of bytes, each byte representing
                8 pixels, 0 for white and 1 for black, with the high-order bit of each byte first. Each row
                is aligned at byte boundaries. The dimensions of the image are defined by height and width
                plus 2 * ws.
            </summary>
            <returns>the generated image</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.Height">
            <summary>
                Gets/sets the height of the barcode. If the height is zero it will be calculated. This height doesn't include the
                whitespace border, if any.
                The allowed dimensions are (height, width):
                10, 10
                12, 12
                8, 18
                14, 14
                8, 32
                16, 16
                12, 26
                18, 18
                20, 20
                12, 36
                22, 22
                16, 36
                24, 24
                26, 26
                16, 48
                32, 32
                36, 36
                40, 40
                44, 44
                48, 48
                52, 52
                64, 64
                72, 72
                80, 80
                88, 88
                96, 96
                104, 104
                120, 120
                132, 132
                144, 144
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.Options">
            <summary>
                Gets/sets the options for the barcode generation. The options can be:
                One of:
                DM_AUTO  - the best encodation will be used
                DM_ASCII  - ASCII encodation
                DM_C40  - C40 encodation
                DM_TEXT  - TEXT encodation
                DM_B256  - binary encodation
                DM_X21  - X21 encodation
                DM_EDIFACT  - EDIFACT encodation
                DM_RAW  - no encodation. The bytes provided are already encoded and will be added directly to the barcode, using
                padding if needed. It assumes that the encodation state is left at ASCII after the last byte.
                One of:
                DM_EXTENSION  - allows extensions to be embedded at the start of the text:
                exxxxxx - ECI number xxxxxx
                m5 - macro 5
                m6 - macro 6
                f - FNC1
                saabbccccc - Structured Append, aa symbol position (1-16), bb total number of symbols (2-16), ccccc file
                identification (0-64515)
                p - Reader programming
                . - extension terminator
                Example for a structured append, symbol 2 of 6, with FNC1 and ECI 000005. The actual text is "Hello".
                s020600075fe000005.Hello
                One of:
                DM_TEST  - doesn't generate the image but returns all the other information.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.Width">
            <summary>
                Gets/sets the width of the barcode. If the width is zero it will be calculated. This width doesn't include the
                whitespace border, if any.
                The allowed dimensions are (height, width):
                10, 10
                12, 12
                8, 18
                14, 14
                8, 32
                16, 16
                12, 26
                18, 18
                20, 20
                12, 36
                22, 22
                16, 36
                24, 24
                26, 26
                16, 48
                32, 32
                36, 36
                40, 40
                44, 44
                48, 48
                52, 52
                64, 64
                72, 72
                80, 80
                88, 88
                96, 96
                104, 104
                120, 120
                132, 132
                144, 144
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.Ws">
            <summary>
                Gets/sets the whitespace border around the barcode.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.CreateDrawingImage(System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Creates a  java.awt.Image . A successful call to the method  generate()
                before calling this method is required.
            </summary>
            <param name="foreground">the color of the bars</param>
            <param name="background">the color of the background</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.CreateImage">
            <summary>
                Gets an  Image  with the barcode. A successful call to the method  generate()
                before calling this method is required.
                @throws BadElementException on error
            </summary>
            <returns>the barcode  Image </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.Generate(System.String)">
            <summary>
                Creates a barcode. The  String  is interpreted with the ISO-8859-1 encoding
                DM_NO_ERROR  - no error.
                DM_ERROR_TEXT_TOO_BIG  - the text is too big for the symbology capabilities.
                DM_ERROR_INVALID_SQUARE  - the dimensions given for the symbol are illegal.
                DM_ERROR_EXTENSION  - an error was while parsing an extension.
                @throws java.io.UnsupportedEncodingException on error
            </summary>
            <param name="text">the text</param>
            <returns>the status of the generation. It can be one of this values:</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.Generate(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Creates a barcode.
                DM_NO_ERROR  - no error.
                DM_ERROR_TEXT_TOO_BIG  - the text is too big for the symbology capabilities.
                DM_ERROR_INVALID_SQUARE  - the dimensions given for the symbol are illegal.
                DM_ERROR_EXTENSION  - an error was while parsing an extension.
            </summary>
            <param name="text">the text</param>
            <param name="textOffset">the offset to the start of the text</param>
            <param name="textSize">the text size</param>
            <returns>the status of the generation. It can be one of this values:</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.Placement.corner1(System.Int32)">
            <summary>
                "cornerN" places 8 bits of the four special corner cases in ECC200
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.Placement.ecc200">
            <summary>
                "ECC200" fills an nrow x ncol array with appropriate values for ECC200
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.Placement.module(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                "module" places "chr+bit" with appropriate wrapping within array[]
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.Placement.utah(System.Int32,System.Int32,System.Int32)">
            <summary>
                "utah" places the 8 bits of a utah-shaped symbol character in ECC200
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeEan">
            <summary>
                Generates barcodes in several formats: EAN13, EAN8, UPCA, UPCE,
                supplemental 2 and 5. The default parameters are:
                x = 0.8f;
                font = BaseFont.CreateFont("Helvetica", "winansi", false);
                size = 8;
                baseline = size;
                barHeight = size * 3;
                guardBars = true;
                codeType = EAN13;
                code = "";
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.Even">
            <summary>
                Marker for even parity.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.Odd">
            <summary>
                Marker for odd parity.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.TotalbarsEan13">
            <summary>
                The total number of bars for EAN13.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.TotalbarsEan8">
            <summary>
                The total number of bars for EAN8.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.TotalbarsSupp2">
            <summary>
                The total number of bars for supplemental 2.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.TotalbarsSupp5">
            <summary>
                The total number of bars for supplemental 5.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan.TotalbarsUpce">
            <summary>
                The total number of bars for UPCE.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._bars">
            <summary>
                The basic bar widths.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._guardEan13">
            <summary>
                The bar positions that are guard bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._guardEan8">
            <summary>
                The bar positions that are guard bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._guardEmpty">
            <summary>
                The bar positions that are guard bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._guardUpca">
            <summary>
                The bar positions that are guard bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._guardUpce">
            <summary>
                The bar positions that are guard bars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._parity13">
            <summary>
                Sequence of parities to be used with EAN13.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._parity2">
            <summary>
                Sequence of parities to be used with supplemental 2.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._parity5">
            <summary>
                Sequence of parities to be used with supplemental 2.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._paritye">
            <summary>
                Sequence of parities to be used with UPCE.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._textposEan13">
            <summary>
                The x coordinates to place the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEan._textposEan8">
            <summary>
                The x coordinates to place the text.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.#ctor">
            <summary>
                Creates new BarcodeEAN
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeEan.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.CalculateEanParity(System.String)">
            <summary>
                Calculates the EAN parity character.
            </summary>
            <param name="code">the code</param>
            <returns>the parity character</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.ConvertUpcAtoUpce(System.String)">
            <summary>
                Converts an UPCA code into an UPCE code. If the code can not
                be converted a  null  is returned.
                code could not be converted
            </summary>
            <param name="text">the code to convert. It must have 12 numeric characters</param>
            <returns>the 8 converted digits or  null  if the</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.GetBarsEan13(System.String)">
            <summary>
                Creates the bars for the barcode EAN13 and UPCA.
            </summary>
            <param name="_code">the text with 13 digits</param>
            <returns>the barcode</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.GetBarsEan8(System.String)">
            <summary>
                Creates the bars for the barcode EAN8.
            </summary>
            <param name="_code">the text with 8 digits</param>
            <returns>the barcode</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.GetBarsSupplemental2(System.String)">
            <summary>
                Creates the bars for the barcode supplemental 2.
            </summary>
            <param name="_code">the text with 2 digits</param>
            <returns>the barcode</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.GetBarsSupplemental5(System.String)">
            <summary>
                Creates the bars for the barcode supplemental 5.
            </summary>
            <param name="_code">the text with 5 digits</param>
            <returns>the barcode</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.GetBarsUpce(System.String)">
            <summary>
                Creates the bars for the barcode UPCE.
            </summary>
            <param name="_code">the text with 8 digits</param>
            <returns>the barcode</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEan.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeEansupp">
            <summary>
                This class takes 2 barcodes, an EAN/UPC and a supplemental
                and creates a single barcode with both combined in the
                expected layout. The UPC/EAN should have a positive text
                baseline and the supplemental a negative one (in the supplemental
                the text is on the top of the barcode.
                The default parameters are:
                n = 8; // horizontal distance between the two barcodes
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEansupp.Ean">
            <summary>
                The barcode with the EAN/UPC.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEansupp.Supp">
            <summary>
                The barcode with the supplemental.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEansupp.#ctor(iTextSharp.text.pdf.Barcode,iTextSharp.text.pdf.Barcode)">
            <summary>
                Creates new combined barcode.
            </summary>
            <param name="ean">the EAN/UPC barcode</param>
            <param name="supp">the supplemental barcode</param>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeEansupp.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEansupp.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeInter25">
            <summary>
                Implements the code interleaved 2 of 5. The text can include
                non numeric characters that are printed but do not generate bars.
                The default parameters are:
                x = 0.8f;
                n = 2;
                font = BaseFont.CreateFont("Helvetica", "winansi", false);
                size = 8;
                baseline = size;
                barHeight = size * 3;
                textint= Element.ALIGN_CENTER;
                generateChecksum = false;
                checksumText = false;
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeInter25._bars">
            <summary>
                The bars to generate the code.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.#ctor">
            <summary>
                Creates new BarcodeInter25
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeInter25.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.GetBarsInter25(System.String)">
            <summary>
                Creates the bars for the barcode.
            </summary>
            <param name="text">the text. It can contain non numeric characters</param>
            <returns>the barcode</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.GetChecksum(System.String)">
            <summary>
                Calculates the checksum.
            </summary>
            <param name="text">the numeric text</param>
            <returns>the checksum</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.KeepNumbers(System.String)">
            <summary>
                Deletes all the non numeric characters from  text .
            </summary>
            <param name="text">the text</param>
            <returns>a  string  with only numeric characters</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodePdf417">
            <summary>
                Generates the 2D barcode PDF417. Supports dimensioning auto-sizing, fixed
                and variable sizes, automatic and manual error levels, raw codeword input,
                codeword size optimization and bitmap inversion. The output can
                be a CCITT G4  Image  or a raw bitmap.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_AUTO_ERROR_LEVEL">
            <summary>
                The error level correction is set automatically according
                to ISO 15438 recomendations.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_FIXED_COLUMNS">
            <summary>
                The size will be at least  codeColumns
                with a variable number of  codeRows .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_FIXED_RECTANGLE">
            <summary>
                The size of the barcode will be at least  codeColumns*codeRows .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_FIXED_ROWS">
            <summary>
                The size will be at least  codeRows
                with a variable number of  codeColumns .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_FORCE_BINARY">
            <summary>
                One single binary segment is used
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_INVERT_BITMAP">
            <summary>
                Inverts the output bits of the raw bitmap that is normally
                bit one for black. It has only effect for the raw bitmap.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_USE_ASPECT_RATIO">
            <summary>
                Auto-size is made based on  aspectRatio  and  yHeight .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_USE_ERROR_LEVEL">
            <summary>
                The error level correction is set by the user. It can be 0 to 8.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_USE_MACRO">
            <summary>
                Use Macro PDF417 Encoding
                @see #setMacroFileId(String)
                @see #setMacroSegmentId(int)
                @see #setMacroSegmentCount(int)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417.PDF417_USE_RAW_CODEWORDS">
            <summary>
                No  text  interpretation is done and the content of  codewords
                is used directly.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._codewords">
            <summary>
                Holds value of property codewords.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._aspectRatio">
            <summary>
                Holds value of property aspectRatio.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._bitColumns">
            <summary>
                Holds value of property bitColumns.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._codeColumns">
            <summary>
                Holds value of property codeColumns.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._codeRows">
            <summary>
                Holds value of property codeRows.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._lenCodewords">
            <summary>
                Holds value of property lenCodewords.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._options">
            <summary>
                Holds value of property options.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._outBits">
            <summary>
                Holds value of property outBits.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._text">
            <summary>
                Holds value of property text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePdf417._yHeight">
            <summary>
                Holds value of property yHeight.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePdf417.#ctor">
            <summary>
                Creates a new  BarcodePDF417  with the default settings.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.AspectRatio">
            <summary>
                Sets the barcode aspect ratio. A ratio or 0.5 will make the
                barcode width twice as large as the height.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.BitColumns">
            <summary>
                Gets the number of X pixels of  outBits .
            </summary>
            <returns>the number of X pixels of  outBits </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.CodeColumns">
            <summary>
                Sets the number of barcode data columns.
                This number may be changed to keep the barcode valid.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.CodeRows">
            <summary>
                Gets the number of Y pixels of  outBits .
                It is also the number of rows in the barcode.
            </summary>
            <returns>the number of Y pixels of  outBits </returns>
            <summary>
                Sets the number of barcode rows. This number may be changed
                to keep the barcode valid.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.Codewords">
            <summary>
                Gets the codeword array. This array is always 928 elements long.
                It can be writen to if the option  PDF417_USE_RAW_CODEWORDS
                is set.
            </summary>
            <returns>the codeword array</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.ErrorLevel">
            <summary>
                Gets the error level correction used for the barcode. It may different
                from the previously set value.
            </summary>
            <returns>the error level correction used for the barcode</returns>
            <summary>
                Sets the error level correction for the barcode.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.LenCodewords">
            <summary>
                Sets the length of the codewords.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.MacroFileId">
            <summary>
                Sets the File ID for macro PDF417 encoding
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.MacroSegmentCount">
            <summary>
                Sets the segment count for macro PDF417 encoding
                @see #setMacroSegmentId(int)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.MacroSegmentId">
            <summary>
                Sets the segment id for macro PDF417 encoding
                @see #setMacroSegmentCount(int)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.Options">
            <summary>
                Sets the options to generate the barcode. This can be all
                the  PDF417_*  constants.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.OutBits">
            <summary>
                Gets the raw image bits of the barcode. The image will have to
                be scaled in the Y direction by  yHeight .
            </summary>
            <returns>The raw barcode image</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.Text">
            <summary>
                Sets the bytes that form the barcode. This bytes should
                be interpreted in the codepage Cp437.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePdf417.YHeight">
            <summary>
                Sets the Y pixel height relative to X. It is usually 3.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePdf417.GetImage">
            <summary>
                Gets an  Image  with the barcode. The image will have to be
                scaled in the Y direction by  yHeight for the barcode
                to have the right printing aspect.
                @throws BadElementException on error
            </summary>
            <returns>the barcode  Image </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePdf417.PaintCode">
            <summary>
                Paints the barcode. If no exception was thrown a valid barcode is available.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePdf417.SetDefaultParameters">
            <summary>
                Set the default settings that correspond to  PDF417_USE_ASPECT_RATIO
                and  PDF417_AUTO_ERROR_LEVEL .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePdf417.SetText(System.String)">
            <summary>
                Sets the text that will form the barcode. This text is converted
                to bytes using the encoding Cp437.
                @throws UnsupportedEncodingException if the encoding Cp437 is not supported
            </summary>
            <param name="s">the text that will form the barcode</param>
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodePostnet">
            <summary>
                Implements the Postnet and Planet barcodes. The default parameters are:
                n = 72f / 22f; // distance between bars
                x = 0.02f * 72f; // bar width
                barHeight = 0.125f * 72f; // height of the tall bars
                size = 0.05f * 72f; // height of the short bars
                codeType = POSTNET; // type of code
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePostnet._bars">
            <summary>
                The bars for each character.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.#ctor">
            <summary>
                Creates new BarcodePostnet
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePostnet.BarcodeSize">
            <summary>
                Gets the maximum area that the barcode and the text, if
                any, will occupy. The lower left corner is always (0, 0).
            </summary>
            <returns>the size the barcode occupies.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.GetBarsPostnet(System.String)">
            <summary>
                Creates the bars for Postnet.
            </summary>
            <param name="text">the code to be created without checksum</param>
            <returns>the bars</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
                Places the barcode in a  PdfContentByte . The
                barcode is always placed at coodinates (0, 0). Use the
                translation matrix to move it elsewhere.
                The bars and text are written in the following colors:
                barColor
                textColor
                Result
                null
                null
                bars and text painted with current fill color
                barColor
                null
                bars and text painted with  barColor
                null
                textColor
                bars painted with current color text painted with  textColor
                barColor
                textColor
                bars painted with  barColor  text painted with  textColor
            </summary>
            <param name="cb">the  PdfContentByte  where the barcode will be placed</param>
            <param name="barColor">the color of the bars. It can be  null </param>
            <param name="textColor">the color of the text. It can be  null </param>
            <returns>the dimensions the barcode occupies</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.BaseField">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_MEDIUM">
            <summary>
                A medium border with 2 point width.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_THICK">
            <summary>
                A thick border with 3 point width.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_THIN">
            <summary>
                A thin border with 1 point width.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.COMB">
            <summary>
                combo box flag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.DO_NOT_SCROLL">
            <summary>
                The field will not scroll (horizontally for single-line
                fields, vertically for multiple-line fields) to accommodate more text
                than will fit within its annotation rectangle. Once the field is full, no
                further text will be accepted.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.DO_NOT_SPELL_CHECK">
            <summary>
                The text entered in the field will not be spell-checked.
                This flag is meaningful only in text fields and in combo
                fields with the  EDIT  flag set.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.EDIT">
            <summary>
                If set the combo box includes an editable text box as well as a drop list; if
                clear, it includes only a drop list.
                This flag is only meaningful with combo fields.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.FILE_SELECTION">
            <summary>
                The text entered in the field represents the pathname of
                a file whose contents are to be submitted as the value of the field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.HIDDEN">
            <summary>
                The field is hidden.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.HIDDEN_BUT_PRINTABLE">
            <summary>
                The field is hidden but is printable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.MULTILINE">
            <summary>
                The field may contain multiple lines of text.
                This flag is only meaningful with text fields.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.PASSWORD">
            <summary>
                The field is intended for entering a secure password that should
                not be echoed visibly to the screen.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.READ_ONLY">
            <summary>
                The user may not change the value of the field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.REQUIRED">
            <summary>
                The field must have a value at the time it is exported by a submit-form
                action.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.VISIBLE">
            <summary>
                The field is visible.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.VISIBLE_BUT_DOES_NOT_PRINT">
            <summary>
                The field is visible but does not print.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.fieldName">
            <summary>
                Holds value of property fieldName.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.maxCharacterLength">
            <summary>
                Holds value of property maxCharacterLength.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.options">
            <summary>
                Holds value of property options.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.rotation">
            <summary>
                Holds value of property rotation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.visibility">
            <summary>
                Holds value of property visibility.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            <summary>
                Creates a new  TextField .
                will be included in the field allowing it to be used as a kid field.
            </summary>
            <param name="writer">the document  PdfWriter </param>
            <param name="box">the field location and dimensions</param>
            <param name="fieldName">the field name. If  null  only the widget keys</param>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Alignment">
            <summary>
                Sets the text horizontal alignment. It can be  Element.ALIGN_LEFT ,
                Element.ALIGN_CENTER  and  Element.ALIGN_RIGHT .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BackgroundColor">
            <summary>
                Sets the background color. Set to  null  for
                transparent background.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderColor">
            <summary>
                Sets the border color. Set to  null  to remove
                the border.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderStyle">
            <summary>
                Sets the border style. The styles are found in  PdfBorderDictionary
                and can be  STYLE_SOLID ,  STYLE_DASHED ,
                STYLE_BEVELED ,  STYLE_INSET  and
                STYLE_UNDERLINE .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderWidth">
            <summary>
                Sets the border width in points. To eliminate the border
                set the border color to  null .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Box">
            <summary>
                Sets the field dimension and position.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.FieldName">
            <summary>
                Sets the field name.
                will be included in the field allowing it to be used as a kid field.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Font">
            <summary>
                Sets the text font. If  null  then Helvetica
                will be used.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.FontSize">
            <summary>
                Sets the font size. If 0 then auto-sizing will be used but
                only for text fields.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.MaxCharacterLength">
            <summary>
                Sets the maximum length of the field�s text, in characters.
                It is only meaningful for text fields.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Options">
            <summary>
                Sets the option flags. The option flags can be a combination by oring of
                READ_ONLY ,  REQUIRED ,
                MULTILINE ,  DO_NOT_SCROLL ,
                PASSWORD ,  FILE_SELECTION ,
                DO_NOT_SPELL_CHECK  and  EDIT .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Rotation">
            <summary>
                Sets the field rotation. This value should be the same as
                the page rotation where the field will be shown.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Text">
            <summary>
                Sets the text for text fields.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.TextColor">
            <summary>
                Sets the text color. If  null  the color used
                will be black.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Visibility">
            <summary>
                Sets the field visibility flag. This flags can be one of
                VISIBLE ,  HIDDEN ,  VISIBLE_BUT_DOES_NOT_PRINT
                and  HIDDEN_BUT_PRINTABLE .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.MoveFields(iTextSharp.text.pdf.PdfDictionary,iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Moves the field keys from  from  to  to . The moved keys
                are removed from  from .
            </summary>
            <param name="from">the source</param>
            <param name="to">the destination. It may be  null </param>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.SetRotationFromPage(iTextSharp.text.Rectangle)">
            <summary>
                Convenience method to set the field rotation the same as the
                page rotation.
            </summary>
            <param name="page">the page</param>
        </member>
        <member name="T:iTextSharp.text.pdf.BaseFont">
            <summary>
                Summary description for BaseFont.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ASCENT">
            <summary>
                The maximum height above the baseline reached by glyphs in this
                font, excluding the height of glyphs for accented characters.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_ASCENT">
            <summary>
                java.awt.Font property
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_DESCENT">
            <summary>
                java.awt.Font property
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_LEADING">
            <summary>
                java.awt.Font property
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_MAXADVANCE">
            <summary>
                java.awt.Font property
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXLLX">
            <summary>
                The lower left x glyph coordinate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXLLY">
            <summary>
                The lower left y glyph coordinate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXURX">
            <summary>
                The upper right x glyph coordinate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXURY">
            <summary>
                The upper right y glyph coordinate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CACHED">
            <summary>
                if the font has to be cached
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CAPHEIGHT">
            <summary>
                The y coordinate of the top of flat capital letters, measured from
                the baseline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CID_NEWLINE">
            <summary>
                The fake CID code that represents a newline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_BOLD">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_BOLDOBLIQUE">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_OBLIQUE">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1250">
            <summary>
                A possible encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1252">
            <summary>
                A possible encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1257">
            <summary>
                A possible encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.DESCENT">
            <summary>
                The maximum depth below the baseline reached by glyphs in this
                font. The value is a negative number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.EMBEDDED">
            <summary>
                if the font has to be embedded
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_CJK">
            <summary>
                The font is CJK.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_DOCUMENT">
            <summary>
                A font already inside the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_T1">
            <summary>
                The font is Type 1.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_T3">
            <summary>
                A Type3 font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_TT">
            <summary>
                The font is True Type with a standard encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_TTUNI">
            <summary>
                The font is True Type with a Unicode encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_BOLD">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_BOLDOBLIQUE">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_OBLIQUE">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.IDENTITY_H">
            <summary>
                The Unicode encoding with horizontal writing.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.IDENTITY_V">
            <summary>
                The Unicode encoding with vertical writing.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ITALICANGLE">
            <summary>
                The angle, expressed in degrees counterclockwise from the vertical,
                of the dominant vertical strokes of the font. The value is
                negative for fonts that slope to the right, as almost all italic fonts do.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.MACROMAN">
            <summary>
                A possible encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.NOT_CACHED">
            <summary>
                if the font doesn't have to be cached
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED">
            <summary>
                if the font doesn't have to be embedded
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.notdef">
            <summary>
                a not defined character in a custom PDF encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.RESOURCE_PATH">
            <summary>
                The path to the font resources.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.STRIKETHROUGH_POSITION">
            <summary>
                The strikethrough position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.STRIKETHROUGH_THICKNESS">
            <summary>
                The strikethrough thickness.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUBSCRIPT_OFFSET">
            <summary>
                The recommended vertical offset from the baseline for subscripts for this font. Usually a negative value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUBSCRIPT_SIZE">
            <summary>
                The recommended vertical size for subscripts for this font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUPERSCRIPT_OFFSET">
            <summary>
                The recommended vertical offset from the baseline for superscripts for this font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUPERSCRIPT_SIZE">
            <summary>
                The recommended vertical size for superscripts for this font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SYMBOL">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_BOLD">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_BOLDITALIC">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_ITALIC">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_ROMAN">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.UNDERLINE_POSITION">
            <summary>
                The underline position. Usually a negative value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.UNDERLINE_THICKNESS">
            <summary>
                The underline thickness.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.WINANSI">
            <summary>
                A possible encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ZAPFDINGBATS">
            <summary>
                This is a possible value of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BuiltinFonts14">
            <summary>
                list of the 14 built in fonts.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FontCache">
            <summary>
                cache for the fonts already used.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.compressionLevel">
            <summary>
                The compression level for the font stream.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.differences">
            <summary>
                encoding names
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.directTextToByte">
            <summary>
                Converts  char  directly to  byte
                by casting.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.Embedded">
            <summary>
                true if the font is to be embedded in the PDF
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.encoding">
            <summary>
                encoding used with this font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FontSpecific">
            <summary>
                true if the font must use its built in encoding. In that case the
                encoding  is only used to map a char to the position inside
                the font, not to the expected char name.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontType">
            <summary>
                The font type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.forceWidthsOutput">
            <summary>
                Forces the output of the width array. Only matters for the 14
                built-in fonts.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SpecialMap">
            <summary>
                Custom encodings use this map to key the Unicode character
                to the single byte code.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.subset">
            <summary>
                Indicates if all the glyphs and widths for that particular
                encoding should be included in the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.unicodeDifferences">
            <summary>
                same as differences but with the unicode codes
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.widths">
            <summary>
                table of characters widths for this encoding
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.AllNameEntries">
            <summary>
                Gets all the entries of the names-table. If it is a True Type font
                each array element will have {Name ID, Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"4", "", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.CodePagesSupported">
            <summary>
                Gets the code pages supported by the font. This has only meaning
                with True Type fonts.
            </summary>
            <returns>the code pages supported by the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.CompressionLevel">
            <summary>
                Sets the compression level to be used for the font streams.
                @since 2.1.3
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Differences">
            <summary>
                Gets the array with the names of the characters.
            </summary>
            <returns>the array with the names of the characters</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.DirectTextToByte">
            <summary>
                Sets the conversion of  char  directly to  byte
                by casting. This is a low level feature to put the bytes directly in
                the content stream without passing through string.GetBytes().
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Encoding">
            <summary>
                Gets the encoding used to convert  string  into  byte[] .
            </summary>
            <returns>the encoding name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.FamilyFontName">
            <summary>
                Gets the family name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the family name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.FontType">
            <summary>
                Gets the font type. The font types can be: FONT_TYPE_T1,
                FONT_TYPE_TT, FONT_TYPE_CJK and FONT_TYPE_TTUNI.
            </summary>
            <returns>the font type</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.ForceWidthsOutput">
            <summary>
                Set to  true  to force the generation of the
                widths array.
                widths array
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.FullFontName">
            <summary>
                Gets the full name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.PostscriptFontName">
            <summary>
                Gets the postscript font name.
            </summary>
            <returns>the postscript font name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Subset">
            <summary>
                Indicates if all the glyphs and widths for that particular
                encoding should be included in the document. When set to  true
                only the glyphs used will be included in the font. When set to  false
                and {@link #addSubsetRange(int[])} was not called the full font will be included
                otherwise just the characters ranges will be included.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.UnicodeDifferences">
            <summary>
                Gets the array with the unicode characters.
            </summary>
            <returns>the array with the unicode characters</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Widths">
            <summary>
                Gets the font width array.
            </summary>
            <returns>the font width array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont">
            <summary>
                Creates a new font. This will always be the default Helvetica font (not embedded).
                This method is introduced because Helvetica is used in many examples.
                @throws  IOException         This shouldn't occur ever
                @throws  DocumentException   This shouldn't occur ever
                @since   2.1.1
            </summary>
            <returns>a BaseFont object (Helvetica, Winansi, not embedded)</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new font. This font can be one of the 14 built in types,
                a Type1 font referred to by an AFM or PFM file, a TrueType font (simple or collection) or a CJK font from the
                Adobe Asian Font Pack. TrueType fonts and CJK fonts can have an optional style modifier
                appended to the name. These modifiers are: Bold, Italic and BoldItalic. An
                example would be "STSong-Light,Bold". Note that this modifiers do not work if
                the font is embedded. Fonts in TrueType collections are addressed by index such as "msgothic.ttc,1".
                This would get the second font (indexes start at 0), in this case "MS PGothic".
                The fonts are cached and if they already exist they are extracted from the cache,
                not parsed again.
                Besides the common encodings described by name, custom encodings
                can also be made. These encodings will only work for the single byte fonts
                Type1 and TrueType. The encoding string starts with a '#'
                followed by "simple" or "full". If "simple" there is a decimal for the first character position and then a list
                of hex values representing the Unicode codes that compose that encoding.
                The "simple" encoding is recommended for TrueType fonts
                as the "full" encoding risks not matching the character with the right glyph
                if not done with care.
                The "full" encoding is specially aimed at Type1 fonts where the glyphs have to be
                described by non standard names like the Tex math fonts. Each group of three elements
                compose a code position: the one byte code order in decimal or as 'x' (x cannot be the space), the name and the
                Unicode character
                used to access the glyph. The space must be assigned to character position 32 otherwise
                text justification will not work.
                Example for a "simple" encoding that includes the Unicode
                character space, A, B and ecyrillic:
                "# simple 32 0020 0041 0042 0454"
                Example for a "full" encoding for a Type1 Tex font:
                "# full 'A' nottriangeqlleft 0041 'B' dividemultiply 0042 32 space 0020"
                This method calls:
                createFont(name, encoding, embedded, true, null, null);
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
            <param name="name">the name of the font or its location on file</param>
            <param name="encoding">the encoding to be applied to this font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <returns>returns a new font. This font may come from the cache</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a new font. This font can be one of the 14 built in types,
                a Type1 font referred to by an AFM or PFM file, a TrueType font (simple or collection) or a CJK font from the
                Adobe Asian Font Pack. TrueType fonts and CJK fonts can have an optional style modifier
                appended to the name. These modifiers are: Bold, Italic and BoldItalic. An
                example would be "STSong-Light,Bold". Note that this modifiers do not work if
                the font is embedded. Fonts in TrueType collections are addressed by index such as "msgothic.ttc,1".
                This would get the second font (indexes start at 0), in this case "MS PGothic".
                The fonts are cached and if they already exist they are extracted from the cache,
                not parsed again.
                Besides the common encodings described by name, custom encodings
                can also be made. These encodings will only work for the single byte fonts
                Type1 and TrueType. The encoding string starts with a '#'
                followed by "simple" or "full". If "simple" there is a decimal for the first character position and then a list
                of hex values representing the Unicode codes that compose that encoding.
                The "simple" encoding is recommended for TrueType fonts
                as the "full" encoding risks not matching the character with the right glyph
                if not done with care.
                The "full" encoding is specially aimed at Type1 fonts where the glyphs have to be
                described by non standard names like the Tex math fonts. Each group of three elements
                compose a code position: the one byte code order in decimal or as 'x' (x cannot be the space), the name and the
                Unicode character
                used to access the glyph. The space must be assigned to character position 32 otherwise
                text justification will not work.
                Example for a "simple" encoding that includes the Unicode
                character space, A, B and ecyrillic:
                "# simple 32 0020 0041 0042 0454"
                Example for a "full" encoding for a Type1 Tex font:
                "# full 'A' nottriangeqlleft 0041 'B' dividemultiply 0042 32 space 0020"
                This method calls:
                createFont(name, encoding, embedded, true, null, null);
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
                @since   2.1.5
            </summary>
            <param name="name">the name of the font or its location on file</param>
            <param name="encoding">the encoding to be applied to this font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="forceRead">
                in some cases (TrueTypeFont, Type1Font), the full font file will be read and kept in memory if
                forceRead is true
            </param>
            <returns>returns a new font. This font may come from the cache</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
                Creates a new font. This font can be one of the 14 built in types,
                a Type1 font referred to by an AFM or PFM file, a TrueType font (simple or collection) or a CJK font from the
                Adobe Asian Font Pack. TrueType fonts and CJK fonts can have an optional style modifier
                appended to the name. These modifiers are: Bold, Italic and BoldItalic. An
                example would be "STSong-Light,Bold". Note that this modifiers do not work if
                the font is embedded. Fonts in TrueType collections are addressed by index such as "msgothic.ttc,1".
                This would get the second font (indexes start at 0), in this case "MS PGothic".
                The fonts may or may not be cached depending on the flag  cached .
                If the  byte  arrays are present the font will be
                read from them instead of the name. A name is still required to identify
                the font type.
                Besides the common encodings described by name, custom encodings
                can also be made. These encodings will only work for the single byte fonts
                Type1 and TrueType. The encoding string starts with a '#'
                followed by "simple" or "full". If "simple" there is a decimal for the first character position and then a list
                of hex values representing the Unicode codes that compose that encoding.
                The "simple" encoding is recommended for TrueType fonts
                as the "full" encoding risks not matching the character with the right glyph
                if not done with care.
                The "full" encoding is specially aimed at Type1 fonts where the glyphs have to be
                described by non standard names like the Tex math fonts. Each group of three elements
                compose a code position: the one byte code order in decimal or as 'x' (x cannot be the space), the name and the
                Unicode character
                used to access the glyph. The space must be assigned to character position 32 otherwise
                text justification will not work.
                Example for a "simple" encoding that includes the Unicode
                character space, A, B and ecyrillic:
                "# simple 32 0020 0041 0042 0454"
                Example for a "full" encoding for a Type1 Tex font:
                "# full 'A' nottriangeqlleft 0041 'B' dividemultiply 0042 32 space 0020"
                the cache if new, false if the font is always created new
                is true, otherwise it will always be created new
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
                @since   iText 0.80
            </summary>
            <param name="name">the name of the font or its location on file</param>
            <param name="encoding">the encoding to be applied to this font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="cached">true if the font comes from the cache or is added to</param>
            <param name="ttfAfm">the true type font or the afm in a byte array</param>
            <param name="pfb">the pfb in a byte array</param>
            <returns>returns a new font. This font may come from the cache but only if cached</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
                Creates a new font. This font can be one of the 14 built in types,
                a Type1 font referred to by an AFM or PFM file, a TrueType font (simple or collection) or a CJK font from the
                Adobe Asian Font Pack. TrueType fonts and CJK fonts can have an optional style modifier
                appended to the name. These modifiers are: Bold, Italic and BoldItalic. An
                example would be "STSong-Light,Bold". Note that this modifiers do not work if
                the font is embedded. Fonts in TrueType collections are addressed by index such as "msgothic.ttc,1".
                This would get the second font (indexes start at 0), in this case "MS PGothic".
                The fonts may or may not be cached depending on the flag  cached .
                If the  byte  arrays are present the font will be
                read from them instead of the name. A name is still required to identify
                the font type.
                Besides the common encodings described by name, custom encodings
                can also be made. These encodings will only work for the single byte fonts
                Type1 and TrueType. The encoding string starts with a '#'
                followed by "simple" or "full". If "simple" there is a decimal for the first character position and then a list
                of hex values representing the Unicode codes that compose that encoding.
                The "simple" encoding is recommended for TrueType fonts
                as the "full" encoding risks not matching the character with the right glyph
                if not done with care.
                The "full" encoding is specially aimed at Type1 fonts where the glyphs have to be
                described by non standard names like the Tex math fonts. Each group of three elements
                compose a code position: the one byte code order in decimal or as 'x' (x cannot be the space), the name and the
                Unicode character
                used to access the glyph. The space must be assigned to character position 32 otherwise
                text justification will not work.
                Example for a "simple" encoding that includes the Unicode
                character space, A, B and ecyrillic:
                "# simple 32 0020 0041 0042 0454"
                Example for a "full" encoding for a Type1 Tex font:
                "# full 'A' nottriangeqlleft 0041 'B' dividemultiply 0042 32 space 0020"
                the cache if new, false if the font is always created new
                an exception if the font is not recognized. Note that even if true an exception may be thrown in some
                circumstances.
                This parameter is useful for FontFactory that may have to check many invalid font names before finding the right
                one
                is true, otherwise it will always be created new
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
                @since   2.0.3
            </summary>
            <param name="name">the name of the font or its location on file</param>
            <param name="encoding">the encoding to be applied to this font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="cached">true if the font comes from the cache or is added to</param>
            <param name="ttfAfm">the true type font or the afm in a byte array</param>
            <param name="pfb">the pfb in a byte array</param>
            <param name="noThrow">
                if true will not throw an exception if the font is not recognized and will return null, if false
                will throw
            </param>
            <returns>returns a new font. This font may come from the cache but only if cached</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
                Creates a new font. This font can be one of the 14 built in types,
                a Type1 font referred to by an AFM or PFM file, a TrueType font (simple or collection) or a CJK font from the
                Adobe Asian Font Pack. TrueType fonts and CJK fonts can have an optional style modifier
                appended to the name. These modifiers are: Bold, Italic and BoldItalic. An
                example would be "STSong-Light,Bold". Note that this modifiers do not work if
                the font is embedded. Fonts in TrueType collections are addressed by index such as "msgothic.ttc,1".
                This would get the second font (indexes start at 0), in this case "MS PGothic".
                The fonts may or may not be cached depending on the flag  cached .
                If the  byte  arrays are present the font will be
                read from them instead of the name. A name is still required to identify
                the font type.
                Besides the common encodings described by name, custom encodings
                can also be made. These encodings will only work for the single byte fonts
                Type1 and TrueType. The encoding string starts with a '#'
                followed by "simple" or "full". If "simple" there is a decimal for the first character position and then a list
                of hex values representing the Unicode codes that compose that encoding.
                The "simple" encoding is recommended for TrueType fonts
                as the "full" encoding risks not matching the character with the right glyph
                if not done with care.
                The "full" encoding is specially aimed at Type1 fonts where the glyphs have to be
                described by non standard names like the Tex math fonts. Each group of three elements
                compose a code position: the one byte code order in decimal or as 'x' (x cannot be the space), the name and the
                Unicode character
                used to access the glyph. The space must be assigned to character position 32 otherwise
                text justification will not work.
                Example for a "simple" encoding that includes the Unicode
                character space, A, B and ecyrillic:
                "# simple 32 0020 0041 0042 0454"
                Example for a "full" encoding for a Type1 Tex font:
                "# full 'A' nottriangeqlleft 0041 'B' dividemultiply 0042 32 space 0020"
                the cache if new, false if the font is always created new
                an exception if the font is not recognized. Note that even if true an exception may be thrown in some
                circumstances.
                This parameter is useful for FontFactory that may have to check many invalid font names before finding the right
                one
                is true, otherwise it will always be created new
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
                @since   2.1.5
            </summary>
            <param name="name">the name of the font or its location on file</param>
            <param name="encoding">the encoding to be applied to this font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="cached">true if the font comes from the cache or is added to</param>
            <param name="ttfAfm">the true type font or the afm in a byte array</param>
            <param name="pfb">the pfb in a byte array</param>
            <param name="noThrow">
                if true will not throw an exception if the font is not recognized and will return null, if false
                will throw
            </param>
            <param name="forceRead">
                in some cases (TrueTypeFont, Type1Font), the full font file will be read and kept in memory if
                forceRead is true
            </param>
            <returns>returns a new font. This font may come from the cache but only if cached</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Creates a font based on an existing document font. The created font font may not
                behave as expected, depending on the encoding or subset.
            </summary>
            <param name="fontRef">the reference to the document font</param>
            <returns>the font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.EnumerateTtcNames(System.String)">
            <summary>
                Enumerates the postscript font names present inside a
                True Type Collection.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="ttcFile">the file name of the font</param>
            <returns>the postscript font names</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.EnumerateTtcNames(System.Byte[])">
            <summary>
                Enumerates the postscript font names present inside a
                True Type Collection.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="ttcArray">the font as a  byte  array</param>
            <returns>the postscript font names</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAllFontNames(System.String,System.String,System.Byte[])">
            <summary>
                Gets all the names from the font. Only the required tables are read.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="name">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="ttfAfm">the true type font or the afm in a byte array</param>
            <returns>an array of Object[] built with {getPostscriptFontName(), GetFamilyFontName(), GetFullFontName()}</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAllNameEntries(System.String,System.String,System.Byte[])">
            <summary>
                Gets all the entries of the namestable from the font. Only the required tables are read.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="name">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="ttfAfm">the true type font or the afm in a byte array</param>
            <returns>an array of Object[] built with {getPostscriptFontName(), getFamilyFontName(), getFullFontName()}</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDocumentFonts(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Gets a list of all document fonts. Each element of the  ArrayList
                contains a  Object[]{String,PRIndirectReference}  with the font name
                and the indirect reference to it.
            </summary>
            <param name="reader">the document where the fonts are to be listed from</param>
            <returns>the list of fonts and references</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDocumentFonts(iTextSharp.text.pdf.PdfReader,System.Int32)">
            <summary>
                Gets a list of the document fonts in a particular page. Each element of the  ArrayList
                contains a  Object[]{String,PRIndirectReference}  with the font name
                and the indirect reference to it.
            </summary>
            <param name="reader">the document where the fonts are to be listed from</param>
            <param name="page">the page to list the fonts from</param>
            <returns>the list of fonts and references</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetFullFontName(System.String,System.String,System.Byte[])">
            <summary>
                Gets the full name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="name">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="ttfAfm">the true type font or the afm in a byte array</param>
            <returns>the full name of the font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetResourceStream(System.String)">
            <summary>
                Gets the font resources.
                null  if not found
            </summary>
            <param name="key">the name of the resource</param>
            <returns>the  Stream  to get the resource or</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.AddSubsetRange(System.Int32[])">
            <summary>
                Adds a character range when subsetting. The range is an  int  array
                where the first element is the start range inclusive and the second element is the
                end range inclusive. Several ranges are allowed in the same array.
            </summary>
            <param name="range">the character range</param>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CharExists(System.Int32)">
            <summary>
                Checks if a character exists in this font.
                false  otherwise
            </summary>
            <param name="c">the character to check</param>
            <returns> true  if the character has a glyph,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CorrectArabicAdvance">
            <summary>
                iText expects Arabic Diactrics (tashkeel) to have zero advance but some fonts,
                most notably those that come with Windows, like times.ttf, have non-zero
                advance for those characters. This method makes those character to have zero
                width advance and work correctly in the iText Arabic shaping and reordering
                context.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAscent(System.String)">
            <summary>
                Gets the ascent of a  String  in normalized 1000 units. The ascent will always be
                greater than or equal to zero even if all the characters have a lower ascent.
            </summary>
            <param name="text">the  String  to get the ascent of</param>
            <returns>the ascent in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAscentPoint(System.String,System.Single)">
            <summary>
                Gets the ascent of a  String  in points. The ascent will always be
                greater than or equal to zero even if all the characters have a lower ascent.
            </summary>
            <param name="text">the  String  to get the ascent of</param>
            <param name="fontSize">the size of the font</param>
            <returns>the ascent in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetCharBBox(System.Int32)">
            <summary>
                Gets the smallest box enclosing the character contours. It will return
                null  if the font has not the information or the character has no
                contours, as in the case of the space, for example. Characters with no contours may
                also return [0,0,0,0].
                null
            </summary>
            <param name="c">the character to get the contour bounding box from</param>
            <returns>an array of four floats with the bounding box in the format [llx,lly,urx,ury] or</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetCidCode(System.Int32)">
            <summary>
                Gets the CID code given an Unicode.
                It has only meaning with CJK fonts.
            </summary>
            <param name="c">the Unicode</param>
            <returns>the CID equivalent</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDescent(System.String)">
            <summary>
                Gets the descent of a  String  in normalized 1000 units. The descent will always be
                less than or equal to zero even if all the characters have an higher descent.
            </summary>
            <param name="text">the  String  to get the descent of</param>
            <returns>the dexcent in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDescentPoint(System.String,System.Single)">
            <summary>
                Gets the descent of a  String  in points. The descent will always be
                less than or equal to zero even if all the characters have an higher descent.
            </summary>
            <param name="text">the  String  to get the descent of</param>
            <param name="fontSize">the size of the font</param>
            <returns>the dexcent in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetFontDescriptor(System.Int32,System.Single)">
            <summary>
                Gets the font parameter identified by  key . Valid values
                for  key  are  ASCENT ,  CAPHEIGHT ,  DESCENT ,
                ITALICANGLE ,  BBOXLLX ,  BBOXLLY ,  BBOXURX
                and  BBOXURY .
            </summary>
            <param name="key">the parameter to be extracted</param>
            <param name="fontSize">the font size in points</param>
            <returns>the parameter in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetFullFontStream">
            <summary>
                Returns a PdfStream object with the full font program (if possible).
                This method will return null for some types of fonts (CJKFont, Type3Font)
                or if there is no font program available (standard Type 1 fonts).
                @since   2.1.3
            </summary>
            <returns>a PdfStream with the font program</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetKerning(System.Int32,System.Int32)">
            <summary>
                Gets the kerning between two Unicode chars.
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <returns>the kerning to be applied</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetUnicodeEquivalent(System.Int32)">
            <summary>
                Gets the Unicode equivalent to a CID.
                The (inexistent) CID FF00 is translated as '\n'.
                It has only meaning with CJK fonts with Identity encoding.
            </summary>
            <param name="c">the CID code</param>
            <returns>the Unicode equivalent</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidth(System.Int32)">
            <summary>
                Gets the width of a  char  in normalized 1000 units.
            </summary>
            <param name="char1">the unicode  char  to get the width of</param>
            <returns>the width in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidth(System.String)">
            <summary>
                Gets the width of a  string  in normalized 1000 units.
            </summary>
            <param name="text">the  string  to get the witdth of</param>
            <returns>the width in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPoint(System.String,System.Single)">
            <summary>
                Gets the width of a  string  in points.
            </summary>
            <param name="text">the  string  to get the witdth of</param>
            <param name="fontSize">the font size</param>
            <returns>the width in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPoint(System.Int32,System.Single)">
            <summary>
                Gets the width of a  char  in points.
            </summary>
            <param name="char1">the  char  to get the witdth of</param>
            <param name="fontSize">the font size</param>
            <returns>the width in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPointKerned(System.String,System.Single)">
            <summary>
                Gets the width of a  String  in points taking kerning
                into account.
            </summary>
            <param name="text">the  String  to get the witdth of</param>
            <param name="fontSize">the font size</param>
            <returns>the width in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.HasKernPairs">
            <summary>
                Checks if the font has any kerning pairs.
            </summary>
            <returns> true  if the font has any kerning pairs</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.IsEmbedded">
            <summary>
                Gets the embedded flag.
            </summary>
            <returns> true  if the font is embedded.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.IsFontSpecific">
            <summary>
                Gets the symbolic flag of the font.
            </summary>
            <returns> true  if the font is symbolic</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.SetCharAdvance(System.Int32,System.Int32)">
            <summary>
                Sets the character advance.
                false  otherwise
            </summary>
            <param name="c">the character</param>
            <param name="advance">the character advance normalized to 1000 units</param>
            <returns> true  if the advance was set,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.SetKerning(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the kerning between two Unicode chars.
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <param name="kern">the kerning to apply in normalized 1000 units</param>
            <returns> true  if the kerning was applied,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateSubsetPrefix">
            <summary>
                Creates a unique subset prefix to be added to the font name when the font is embedded and subset.
            </summary>
            <returns>the subset prefix</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.ConvertToBytes(System.String)">
            <summary>
                Converts a  string  to a  byte  array according
                to the font's encoding.
            </summary>
            <param name="text">the  string  to be converted</param>
            <returns>an array of  byte  representing the conversion according to the font's encoding</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.ConvertToBytes(System.Int32)">
            <summary>
                Converts a  char  to a  byte  array according
                to the font's encoding.
            </summary>
            <param name="char1">the  String  to be converted</param>
            <returns>an array of  byte  representing the conversion according to the font's encoding</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetRawWidth(System.Int32,System.String)">
            <summary>
                Gets the width from the font according to the Unicode char  c
                or the  name . If the  name  is null it's a symbolic font.
            </summary>
            <param name="c">the unicode char</param>
            <param name="name">the glyph name</param>
            <returns>the width of the char</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetUnicodeDifferences(System.Int32)">
            <summary>
                Gets the Unicode character corresponding to the byte output to the pdf stream.
            </summary>
            <param name="index">the byte index</param>
            <returns>the Unicode character</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            <summary>
                Outputs to the writer the font dictionaries and streams.
                @throws IOException on error
                @throws DocumentException error in generating the object
            </summary>
            <param name="writer">the writer for this document</param>
            <param name="piRef">the font indirect reference</param>
            <param name="oParams">several parameters that depend on the font type</param>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetBaseName(System.String)">
            <summary>
                Gets the name without the modifiers Bold, Italic or BoldItalic.
            </summary>
            <param name="name">the full name of the font</param>
            <returns>the name without the modifiers Bold, Italic or BoldItalic</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.NormalizeEncoding(System.String)">
            <summary>
                Normalize the encoding names. "winansi" is changed to "Cp1252" and
                "macroman" is changed to "MacRoman".
            </summary>
            <param name="enc">the encoding to be normalized</param>
            <returns>the normalized encoding</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateEncoding">
            <summary>
                Creates the  widths  and the  differences  arrays
                @throws UnsupportedEncodingException the encoding is not supported
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.BaseFont.StreamFont">
            <summary>
                Generates the PDF stream with the Type1 and Truetype fonts returning
                a PdfStream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.StreamFont.#ctor(System.Byte[],System.Int32[],System.Int32)">
            <summary>
                Generates the PDF stream with the Type1 and Truetype fonts returning
                a PdfStream.
                @throws DocumentException error in the stream compression
                @since   2.1.3 (replaces the constructor without param compressionLevel)
            </summary>
            <param name="contents">the content of the stream</param>
            <param name="lengths">an array of int that describes the several lengths of each part of the font</param>
            <param name="compressionLevel">the compression level of the Stream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.StreamFont.#ctor(System.Byte[],System.String,System.Int32)">
            <summary>
                Generates the PDF stream for a font.
                @throws DocumentException error in the stream compression
                @since   2.1.3 (replaces the constructor without param compressionLevel)
            </summary>
            <param name="contents">the content of a stream</param>
            <param name="subType">the subtype of the font.</param>
            <param name="compressionLevel">the compression level of the Stream</param>
        </member>
        <member name="T:iTextSharp.text.pdf.BidiLine">
            <summary>
                Does all the line bidirectional processing with PdfChunk assembly.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiLine.#ctor">
            <summary>
                Creates new BidiLine
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiLine.GetWidth(System.Int32,System.Int32)">
            <summary>
                Gets the width of a range of characters.
            </summary>
            <param name="startIdx">the first index to calculate</param>
            <param name="lastIdx">the last inclusive index to calculate</param>
            <returns>the sum of all widths</returns>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.AL">
            <summary>
                Right-to-Left Arabic
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.AN">
            <summary>
                Arabic Number
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.B">
            <summary>
                Paragraph Separator
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.BN">
            <summary>
                Boundary Neutral
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.CS">
            <summary>
                Common Number Separator
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.EN">
            <summary>
                European Number
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ES">
            <summary>
                European Number Separator
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ET">
            <summary>
                European Number Terminator
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.L">
            <summary>
                Left-to-right
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.LRE">
            <summary>
                The bidi types
            </summary>
            <summary>
                Left-to-Right Embedding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.LRO">
            <summary>
                Left-to-Right Override
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.NSM">
            <summary>
                Non-Spacing Mark
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ON">
            <summary>
                Other Neutrals
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.PDF">
            <summary>
                Pop Directional Format
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.R">
            <summary>
                Right-to-Left
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.RLE">
            <summary>
                Right-to-Left Embedding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.RLO">
            <summary>
                Right-to-Left Override
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.S">
            <summary>
                Segment Separator
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.TYPE_MAX">
            <summary>
                Maximum bidi type value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.TYPE_MIN">
            <summary>
                Minimum bidi type value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.WS">
            <summary>
                Whitespace
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#cctor">
            <summary>
            </summary>
            <summary>
                Input
            </summary>
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#ctor(System.SByte[])">
            <summary>
                Initialize using an array of direction types.  Types range from TYPE_MIN to TYPE_MAX inclusive
                and represent the direction codes of the characters in the text.
            </summary>
            <param name="types">the types array</param>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#ctor(System.SByte[],System.SByte)">
            <summary>
                Initialize using an array of direction types and an externally supplied paragraph embedding level.
                The embedding level may be -1, 0, or 1.  -1 means to apply the default algorithm (rules P2 and P3),
                0 is for LTR paragraphs, and 1 is for RTL paragraphs.
            </summary>
            <param name="types">the types array</param>
            <param name="paragraphEmbeddingLevel">the externally supplied paragraph embedding level.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.GetBaseLevel">
            <summary>
                Return the base level of the paragraph.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.GetLevels(System.Int32[])">
            <summary>
            </summary>
            <summary>
                Output
            </summary>
            <summary>
            </summary>
            <summary>
                Return levels array breaking lines at offsets in linebreaks.
                Rule L1.
                The returned levels array contains the resolved level for each
                bidi code passed to the constructor.
                The linebreaks array must include at least one value.
                The values must be in strictly increasing order (no duplicates)
                between 1 and the length of the text, inclusive.  The last value
                must be the length of the text.
            </summary>
            <param name="linebreaks">the offsets at which to break the paragraph</param>
            <returns>the resolved levels of the text</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.computeMultilineReordering(System.SByte[],System.Int32[])">
            <summary>
                Return multiline reordering array for a given level array.
                Reordering does not occur across a line break.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.computeReordering(System.SByte[])">
            <summary>
                Return reordering array for a given level array.  This reorders a single line.
                The reordering is a visual to logical map.  For example,
                the leftmost char is string.CharAt(order[0]).
                Rule L2.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.isWhitespace(System.SByte)">
            <summary>
                Return true if the type is considered a whitespace type for the line break rules.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.processEmbeddings(System.SByte[],System.SByte)">
            <summary>
                2) determining explicit levels
                Rules X1 - X8
                The interaction of these rules makes handling them a bit complex.
                This examines resultTypes but does not modify it.  It returns embedding and
                override information in the result array.  The low 7 bits are the level, the high
                bit is set if the level is an override, and clear if it is an embedding.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.typeForLevel(System.Int32)">
            <summary>
                --- internal utilities -------------------------------------------------
            </summary>
            <summary>
                Return the strong type (L or R) corresponding to the level.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.validateLineBreaks(System.Int32[],System.Int32)">
            <summary>
                Throw exception if line breaks array is invalid.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.validateParagraphEmbeddingLevel(System.SByte)">
            <summary>
                Throw exception if paragraph embedding level is invalid. Special allowance for -1 so that
                default processing can still be performed when using this API.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.validateTypes(System.SByte[])">
            <summary>
                Throw exception if type array is invalid.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.determineExplicitEmbeddingLevels">
            <summary>
                Process embedding format codes.
                Calls processEmbeddings to generate an embedding array from the explicit format codes.  The
                embedding overrides in the array are then applied to the result types, and the result levels are
                initialized.
                @see #processEmbeddings
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.determineParagraphEmbeddingLevel">
            <summary>
                1) determining the paragraph level.
                Rules P2, P3.
                At the end of this function, the member variable paragraphEmbeddingLevel is set to either 0 or 1.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.findRunLimit(System.Int32,System.Int32,System.SByte[])">
            <summary>
                Return the limit of the run starting at index that includes only resultTypes in validSet.
                This checks the value at index, and will return index if that value is not in validSet.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.findRunStart(System.Int32,System.SByte[])">
            <summary>
                Return the start of the run including index that includes only resultTypes in validSet.
                This assumes the value at index is valid, and does not check it.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.reinsertExplicitCodes(System.Int32)">
            <summary>
                Reinsert levels information for explicit codes.
                This is for ease of relating the level information
                to the original input data.  Note that the levels
                assigned to these codes are arbitrary, they're
                chosen so as to avoid breaking level runs.
                types array supplied to constructor)
            </summary>
            <param name="textLength">the length of the data after compression</param>
            <returns>the length of the data (original length of</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.removeExplicitCodes">
            <summary>
                Rules X9.
                Remove explicit codes so that they may be ignored during the remainder
                of the main portion of the algorithm.  The length of the resulting text
                is returned.
            </summary>
            <returns>the length of the data excluding explicit codes and BN.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.resolveImplicitLevels(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            <summary>
                7) resolving implicit embedding levels
                Rules I1, I2.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.resolveNeutralTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            <summary>
                6) resolving neutral types
                Rules N1-N2.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.resolveWeakTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            <summary>
                3) resolving weak types
                Rules W1-W7.
                Note that some weak types (EN, AN) remain after this processing is complete.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.runAlgorithm">
            <summary>
                The algorithm.
                Does not include line-based processing (Rules L1, L2).
                These are applied later in the line-based phase of the algorithm.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.setLevels(System.Int32,System.Int32,System.SByte)">
            <summary>
                Set resultLevels from start up to (but not including) limit to newLevel.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.setTypes(System.Int32,System.Int32,System.SByte)">
            <summary>
                Set resultTypes from start up to (but not including) limit to newType.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.ByteBuffer">
            <summary>
                Acts like a  StringBuilder  but works with  byte  arrays.
                floating point is converted to a format suitable to the PDF.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.HighPrecision">
            <summary>
                If  true  always output floating point numbers with 6 decimal digits.
                If  false  uses the faster, although less precise, representation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.Buf">
            <summary>
                The buffer where the bytes are stored.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.Count">
            <summary>
                The count of bytes in the buffer.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.#ctor">
            <summary>
                Creates new ByteBuffer with capacity 128
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.#ctor(System.Int32)">
            <summary>
                Creates a byte buffer with a certain capacity.
            </summary>
            <param name="size">the initial capacity</param>
        </member>
        <member name="P:iTextSharp.text.pdf.ByteBuffer.Buffer">
            <summary>
                Sets the cache size.
                This can only be used to increment the size.
                If the size that is passed through is smaller than the current size, nothing happens.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ByteBuffer.Size">
            <summary>
                Returns the current size of the buffer.
            </summary>
            <returns>the value of the  count  field, which is the number of valid bytes in this byte buffer.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FormatDouble(System.Double)">
            <summary>
                Outputs a  double  into a format suitable for the PDF.
            </summary>
            <param name="d">a double</param>
            <returns>the  string  representation of the  double </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FormatDouble(System.Double,iTextSharp.text.pdf.ByteBuffer)">
            <summary>
                Outputs a  double  into a format suitable for the PDF.
                buf  is  null . If  buf  is <B>not</B>  null ,
                then the double is appended directly to the buffer and this methods returns  null .
            </summary>
            <param name="d">a double</param>
            <param name="buf">a ByteBuffer</param>
            <returns>the  String  representation of the  double  if</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Appends the subarray of the  byte  array. The buffer will grow by
                len  bytes.
            </summary>
            <param name="b">the array to be appended</param>
            <param name="off">the offset to the start of the array</param>
            <param name="len">the length of bytes to Append</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Byte[])">
            <summary>
                Appends an array of bytes.
            </summary>
            <param name="b">the array to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.String)">
            <summary>
                Appends a  string  to the buffer. The  string  is
                converted according to the encoding ISO-8859-1.
            </summary>
            <param name="str">the  string  to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Char)">
            <summary>
                Appends a  char  to the buffer. The  char  is
                converted according to the encoding ISO-8859-1.
            </summary>
            <param name="c">the  char  to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(iTextSharp.text.pdf.ByteBuffer)">
            <summary>
                Appends another  ByteBuffer  to this buffer.
            </summary>
            <param name="buf">the  ByteBuffer  to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Int32)">
            <summary>
                Appends the string representation of an  int .
            </summary>
            <param name="i">the  int  to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Single)">
            <summary>
                Appends a string representation of a  float  according
                to the Pdf conventions.
            </summary>
            <param name="i">the  float  to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Double)">
            <summary>
                Appends a string representation of a  double  according
                to the Pdf conventions.
            </summary>
            <param name="d">the  double  to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append_i(System.Int32)">
            <summary>
                Appends an  int . The size of the array will grow by one.
            </summary>
            <param name="b">the int to be appended</param>
            <returns>a reference to this  ByteBuffer  object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Reset">
            <summary>
                Sets the size to zero.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ToByteArray">
            <summary>
                Creates a newly allocated byte array. Its size is the current
                size of this output stream and the valid contents of the buffer
                have been copied into it.
            </summary>
            <returns>the current contents of this output stream, as a byte array.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ToString">
            <summary>
                Converts the buffer's contents into a string, translating bytes into
                characters according to the platform's default character encoding.
            </summary>
            <returns>string translated from the buffer's contents.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.WriteTo(System.IO.Stream)">
            <summary>
                Writes the complete contents of this byte buffer output to
                the specified output stream argument, as if by calling the output
                stream's write method using  out.Write(buf, 0, count) .
                @exception  IOException  if an I/O error occurs.
            </summary>
            <param name="str">the output stream to which to write the data.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.convertToChar(System.Byte[])">
            <summary>
                Converts the buffer's contents into a string, translating bytes into
                characters according to the specified character encoding.
                @throws UnsupportedEncodingException
                If the named encoding is not supported.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFont.Buf">
            <summary>
                A random Access File or an array
                (contributed by orly manor)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFont.Fonts">
            <summary>
                Changed from private to protected
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.GetString(System.Char)">
            <summary>
                private String[] strings;
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.IsCid(System.String)">
            <summary>
                get a single CID font. The PDF architecture (1.4)
                supports 16-bit strings only with CID CFF fonts, not
                in Type-1 CFF fonts, so we convert the font to CID if
                it is in the Type-1 format.
                Two other tasks that we need to do are to select
                only a single font from the CFF package (this again is
                a PDF restriction) and to subset the CharStrings glyph
                description.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.GetIndex(System.Int32)">
            <summary>
                read the offsets in the next index
            </summary>
            <summary>
                data structure, convert to global
            </summary>
            <summary>
                offsets, and return them.
            </summary>
            <summary>
                Sets the nextIndexOffset.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.GetEntireIndexRange(System.Int32)">
            <summary>
                List items for the linked list that builds the new CID font.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.DictNumberItem.Emit(System.Byte[])">
            <summary>
                this is imcomplete!
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.DictOffsetItem">
            <summary>
                an unknown offset in a dictionary for the list.
                We will fix up the offset later; for now, assume it's large.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.DictOffsetItem.Emit(System.Byte[])">
            <summary>
                this is incomplete!
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.Font">
            <summary>
                a utility that creates a range item for an entire index
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.IndexOffsetItem">
            <summary>
                An index-offset item for the list.
                The size denotes the required size in the CFF. A positive
                value means that we need a specific size in bytes (for offset arrays)
                and a negative value means that this is a dict item that uses a
                variable-size representation.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.Item.Emit(System.Byte[])">
            <summary>
                Emit the byte stream for this item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.Item.Increment(System.Int32[])">
            <summary>
                remember the current offset and increment by item's size in bytes.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.Item.Xref">
            <summary>
                Fix up cross references to this item (applies only to markers).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.OffsetItem.Set(System.Int32)">
            <summary>
                set the value of an offset item that was initially unknown.
                It will be fixed up latex by a call to xref on some marker.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.RangeItem">
            <summary>
                A range item.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.SubrMarkerItem">
            <summary>
                @author orly manor
                TODO To change the template for this generated type comment go to
                Window - Preferences - Java - Code Generation - Code and Comments
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.UInt16Item">
            <summary>
                Card24 item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.UInt16Item.Emit(System.Byte[])">
            <summary>
                this is incomplete!
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.UInt24Item.Emit(System.Byte[])">
            <summary>
                this is incomplete!
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.UInt32Item">
            <summary>
                Card32 item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.UInt32Item.Emit(System.Byte[])">
            <summary>
                this is incomplete!
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFont.UInt8Item">
            <summary>
                A SID or Card16 item.
            </summary>
            <summary>
                A Card8 item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFont.UInt8Item.Emit(System.Byte[])">
            <summary>
                this is incomplete!
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.CffFontSubset">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.ENDCHAR_OP">
            <summary>
                Operator codes for unused  CharStrings and unused local and global Subrs
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.SubrsEscapeFuncs">
            <summary>
                The Strings in this array represent Type1/Type2 escape operator names
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.SubrsFunctions">
            <summary>
                The Strings in this array represent Type1/Type2 operator names
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.FdArrayUsed">
            <summary>
                A HashMap for keeping the FDArrays being used by the font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.GBias">
            <summary>
                The bias for the global subroutines
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.GlyphsInList">
            <summary>
                The GlyphsUsed keys as an ArrayList
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.GlyphsUsed">
            <summary>
                A HashMap containing the glyphs used in the text after being converted
                to glyph number by the CMap
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.HGSubrsUsed">
            <summary>
                A HashMap for keeping the Global subroutines used in the font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.HSubrsUsed">
            <summary>
                A HashMaps array for keeping the subroutines used in each FontDict
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.HSubrsUsedNonCid">
            <summary>
                A HashMap for keeping the subroutines used in a non-cid font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.LGSubrsUsed">
            <summary>
                The Global SubroutinesUsed HashMaps as ArrayLists
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.LSubrsUsed">
            <summary>
                The SubroutinesUsed HashMaps as ArrayLists
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.LSubrsUsedNonCid">
            <summary>
                The SubroutinesUsed HashMap as ArrayList
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.NewCharStringsIndex">
            <summary>
                The new CharString of the font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.NewGSubrsIndex">
            <summary>
                The new global subroutines index of the font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.NewLSubrsIndex">
            <summary>
                An array of the new Indexs for the local Subr. One index for each FontDict
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.NewSubrsIndexNonCid">
            <summary>
                The new subroutines index for a non-cid font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.NumOfHints">
            <summary>
                Number of arguments to the stem operators in a subroutine calculated recursivly
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CffFontSubset.OutputList">
            <summary>
                The linked list for generating the new font stream
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.util.INullValueDictionary{System.Int32,System.Int32[]})">
            <summary>
                C'tor for CFFFontSubset
            </summary>
            <param name="rf">- The font file</param>
            <param name="glyphsUsed">- a HashMap that contains the glyph used in the subset</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.Process(System.String)">
            <summary>
                The Process function extracts one font out of the CFF file and returns a
                subset version of the original.
                @throws IOException
            </summary>
            <param name="fontName">- The name of the font to be taken out of the CFF</param>
            <returns>The new font stream</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CalcSubrOffsetSize(System.Int32,System.Int32)">
            <summary>
                Calculates how many byte it took to write the offset for the subrs in a specific
                private dict.
            </summary>
            <param name="offset">The Offset for the private dict</param>
            <param name="size">The size of the private dict</param>
            <returns>The size of the offset of the subrs in the private dict</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CountCharset(System.Int32,System.Int32)">
            <summary>
                Calculates the length of the charset according to its format
            </summary>
            <param name="offset">The Charset Offset</param>
            <param name="numofGlyphs">Number of glyphs in the font</param>
            <returns>the length of the Charset</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateNonCidPrivate(System.Int32,iTextSharp.text.pdf.CffFont.OffsetItem)">
            <summary>
                The function creates a private dict for a font that was not CID
                All the keys are copied as is except for the subrs key
            </summary>
            <param name="font">the font</param>
            <param name="subr">The OffsetItem for the subrs of the private</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateNonCidSubrs(System.Int32,iTextSharp.text.pdf.CffFont.IndexBaseItem,iTextSharp.text.pdf.CffFont.OffsetItem)">
            <summary>
                the function marks the beginning of the subrs index and adds the subsetted subrs
                index to the output list.
                @throws IOException
            </summary>
            <param name="font">the font</param>
            <param name="privateBase">IndexBaseItem for the private that's referencing to the subrs</param>
            <param name="subrs">OffsetItem for the subrs</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.ReconstructPrivateDict(System.Int32,iTextSharp.text.pdf.CffFont.OffsetItem[],iTextSharp.text.pdf.CffFont.IndexBaseItem[],iTextSharp.text.pdf.CffFont.OffsetItem[])">
            <summary>
                Function Adds the new private dicts (only for the FDs used) to the list
                @throws IOException
            </summary>
            <param name="font">the font</param>
            <param name="fdPrivate">OffsetItem array one element for each private</param>
            <param name="fdPrivateBase">IndexBaseItem array one element for each private</param>
            <param name="fdSubrs">OffsetItem array one element for each private</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.AssembleIndex(System.Int32[],System.Byte[])">
            <summary>
                Function creates the new index, inserting the count,offsetsize,offset array
                and object array.
            </summary>
            <param name="newOffsets">the subsetted offset array</param>
            <param name="newObjects">the subsetted object array</param>
            <returns>the new index created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildFdArrayUsed(System.Int32)">
            <summary>
                Function reads the FDSelect and builds the FDArrayUsed HashMap According to the glyphs used
            </summary>
            <param name="font">the Number of font being processed</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildFdSubrsOffsets(System.Int32,System.Int32)">
            <summary>
                The function finds for the FD array processed the local subr offset and its
                offset array.
            </summary>
            <param name="font">the font</param>
            <param name="fd">The FDARRAY processed</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildGSubrsUsed(System.Int32)">
            <summary>
                Function scans the Glsubr used ArrayList to find recursive calls
                to Gsubrs and adds to Hashmap and ArrayList
            </summary>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildIndexHeader(System.Int32,System.Int32,System.Int32)">
            <summary>
                Function Build the header of an index
            </summary>
            <param name="count">the count field of the index</param>
            <param name="offsize">the offsize field of the index</param>
            <param name="first">the first offset of the index</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildNewCharString(System.Int32)">
            <summary>
                Function uses BuildNewIndex to create the new index of the subset charstrings
                @throws IOException
            </summary>
            <param name="fontIndex">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildNewFile(System.Int32)">
            <summary>
                The function builds the new output stream according to the subset process
                @throws IOException
            </summary>
            <param name="font">the font</param>
            <returns>the subseted font stream</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildNewIndex(System.Int32[],System.util.INullValueDictionary{System.Int32,System.Int32[]},System.Byte)">
            <summary>
                Function builds the new offset array, object array and assembles the index.
                used for creating the glyph and subrs subsetted index
                @throws IOException
            </summary>
            <param name="offsets">the offset array of the original index</param>
            <param name="used">the hashmap of the used objects</param>
            <param name="operatorForUnusedEntries">the operator inserted into the data stream for unused entries</param>
            <returns>the new index subset version</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildNewLgSubrs(System.Int32)">
            <summary>
                Function builds the new local and global subsrs indices. IF CID then All of
                the FD Array lsubrs will be subsetted.
                @throws IOException
            </summary>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.BuildSubrUsed(System.Int32,System.Int32,System.Int32,System.Int32[],System.util.INullValueDictionary{System.Int32,System.Int32[]},System.Collections.Generic.IList{System.Int32})">
            <summary>
                Function uses ReadAsubr on the glyph used to build the LSubr and Gsubr HashMap.
                The HashMap (of the lsub only) is then scaned recursivly for Lsubr and Gsubrs
                calls.
            </summary>
            <param name="font">the font</param>
            <param name="fd">FD array processed. 0 indicates function was called by non CID font</param>
            <param name="subrOffset">the offset to the subr index to calc the bias</param>
            <param name="subrsOffsets">the offset array of the subr index</param>
            <param name="hSubr">HashMap of the subrs used</param>
            <param name="lSubr">ArrayList of the subrs used</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CalcBias(System.Int32,System.Int32)">
            <summary>
                Function calcs bias according to the CharString type and the count
                of the subrs
            </summary>
            <param name="offset">The offset to the relevent subrs index</param>
            <param name="font">the font</param>
            <returns>The calculated Bias</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CalcHints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
                The function reads the subroutine and returns the number of the hint in it.
                If a call to another subroutine is found the function calls recursively.
            </summary>
            <param name="begin">the start point of the subr</param>
            <param name="end">the end point of the subr</param>
            <param name="lBias">the bias of the Local Subrs</param>
            <param name="gBias">the bias of the Global Subrs</param>
            <param name="lSubrsOffsets">The Offsets array of the subroutines</param>
            <returns>The number of hints in the subroutine read.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CopyHeader">
            <summary>
                Function Copies the header from the original fileto the output list
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CountEntireIndexRange(System.Int32)">
            <summary>
                Function computes the size of an index
            </summary>
            <param name="indexOffset">The offset for the computed index</param>
            <returns>The size of the index</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateCharset(iTextSharp.text.pdf.CffFont.OffsetItem,System.Int32)">
            <summary>
                Function creates new CharSet for non-CID fonts.
                The CharSet built uses a single range for all glyphs
            </summary>
            <param name="charsetRef">OffsetItem for the CharSet</param>
            <param name="nglyphs">the number of glyphs in the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateFdArray(iTextSharp.text.pdf.CffFont.OffsetItem,iTextSharp.text.pdf.CffFont.OffsetItem,System.Int32)">
            <summary>
                Function creates new FDArray for non-CID fonts.
                The FDArray built has only the "Private" operator that points to the font's
                original private dict
            </summary>
            <param name="fdarrayRef">OffsetItem for the FDArray</param>
            <param name="privateRef">OffsetItem for the Private Dict</param>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateFdSelect(iTextSharp.text.pdf.CffFont.OffsetItem,System.Int32)">
            <summary>
                Function creates new FDSelect for non-CID fonts.
                The FDSelect built uses a single range for all glyphs
            </summary>
            <param name="fdselectRef">OffsetItem for the FDSelect</param>
            <param name="nglyphs">the number of glyphs in the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateKeys(iTextSharp.text.pdf.CffFont.OffsetItem,iTextSharp.text.pdf.CffFont.OffsetItem,iTextSharp.text.pdf.CffFont.OffsetItem,iTextSharp.text.pdf.CffFont.OffsetItem)">
            <summary>
                Function adds the keys into the TopDict
            </summary>
            <param name="fdarrayRef">OffsetItem for the FDArray</param>
            <param name="fdselectRef">OffsetItem for the FDSelect</param>
            <param name="charsetRef">OffsetItem for the CharSet</param>
            <param name="charstringsRef">OffsetItem for the CharString</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.CreateNewStringIndex(System.Int32)">
            <summary>
                Function takes the original string item and adds the new strings
                to accomodate the CID rules
            </summary>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.EmptyStack">
            <summary>
                Empty the Type2 Stack
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.HandelStack">
            <summary>
                Function Checks how the current operator effects the run time stack after being run
                An operator may increase or decrease the stack size
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.PopStack">
            <summary>
                Pop one element from the stack
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.PushStack">
            <summary>
                Add an item to the stack
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.ReadASubr(System.Int32,System.Int32,System.Int32,System.Int32,System.util.INullValueDictionary{System.Int32,System.Int32[]},System.Collections.Generic.IList{System.Int32},System.Int32[])">
            <summary>
                The function reads a subrs (glyph info) between begin and end.
                Adds calls to a Lsubr to the hSubr and lSubrs.
                Adds calls to a Gsubr to the hGSubr and lGSubrs.
            </summary>
            <param name="begin">the start point of the subr</param>
            <param name="end">the end point of the subr</param>
            <param name="gBias">the bias of the Global Subrs</param>
            <param name="lBias">the bias of the Local Subrs</param>
            <param name="hSubr">the HashMap for the lSubrs</param>
            <param name="lSubr"></param>
            <param name="lSubrsOffsets">the ArrayList for the lSubrs</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.ReadCommand">
            <summary>
                The function reads the next command after the file pointer is set
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.ReadFdArray(System.Int32)">
            <summary>
                Read the FDArray count, offsize and Offset array
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.ReadFdSelect(System.Int32)">
            <summary>
                Read the FDSelect of the font and compute the array and its length
            </summary>
            <param name="font">The index of the font being processed</param>
            <returns>The Processed FDSelect of the font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.StackOpp">
            <summary>
                Function checks the key and return the change to the stack after the operator
            </summary>
            <returns>The change in the stack. 2-> flush the stack</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.countRange(System.Int32,System.Int32)">
            <summary>
                Function calculates the number of ranges in the Charset
            </summary>
            <param name="numofGlyphs">The number of glyphs in the font</param>
            <param name="type">The format of the Charset</param>
            <returns>The number of ranges in the Charset data structure</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.reconstruct(System.Int32)">
            <summary>
                Function reconstructs the FDArray, PrivateDict and LSubr for CID fonts
                @throws IOException
            </summary>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.pdf.CffFontSubset.reconstructFdArray(System.Int32,iTextSharp.text.pdf.CffFont.OffsetItem[])">
            <summary>
                Function subsets the FDArray and builds the new one with new offsets
                @throws IOException
            </summary>
            <param name="font">The font</param>
            <param name="fdPrivate">OffsetItem Array (one for each FDArray)</param>
        </member>
        <member name="T:iTextSharp.text.pdf.CjkFont">
            <summary>
                Creates a CJK font compatible with the fonts in the Adobe Asian font Pack.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CjkFont.CJK_ENCODING">
            <summary>
                The encoding used in the PDF document for CJK fonts
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CjkFont._cMap">
            <summary>
                The CMap name associated with this font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CjkFont._style">
            <summary>
                The style modifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.CjkFont._fontName">
            <summary>
                The font name
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.CjkFont.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Creates a CJK font.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="fontName">the name of the font</param>
            <param name="enc">the encoding of the font</param>
            <param name="emb">always  false . CJK font and not embedded</param>
        </member>
        <member name="P:iTextSharp.text.pdf.CjkFont.AllNameEntries">
            <summary>
                Gets all the entries of the names-table. If it is a True Type font
                each array element will have {Name ID, Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"4", "", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.CjkFont.FamilyFontName">
            <summary>
                Gets the family name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the family name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.CjkFont.FullFontName">
            <summary>
                Gets the full name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CjkFont.IsCjkFont(System.String,System.String)">
            <summary>
                Checks if its a valid CJK font.
            </summary>
            <param name="fontName">the font name</param>
            <param name="enc">the encoding</param>
            <returns> true  if it is CJK font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CjkFont.GetFontDescriptor(System.Int32,System.Single)">
            <summary>
                Gets the font parameter identified by  key . Valid values
                for  key  are  ASCENT ,  CAPHEIGHT ,  DESCENT
                and  ITALICANGLE .
            </summary>
            <param name="key">the parameter to be extracted</param>
            <param name="fontSize">the font size in points</param>
            <returns>the parameter in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CjkFont.GetFullFontStream">
            <summary>
                You can't get the FontStream of a CJK font (CJK fonts are never embedded),
                so this method always returns null.
                @since   2.1.3
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.CjkFont.GetWidth(System.Int32)">
            <summary>
                Gets the width of a  char  in normalized 1000 units.
            </summary>
            <param name="char1">the unicode  char  to get the width of</param>
            <returns>the width in normalized 1000 units</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.CmykColor">
            <summary>
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.BmpImage">
            <summary>
                Reads a BMP image. All types of BMP can be read.
                It is based in the JAI codec.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.BmpImage.BiRgb">
            <summary>
                Compression Types
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.BmpImage.LcsCalibratedRgb">
            <summary>
                Color space types
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.BmpImage.Version21Bit">
            <summary>
                BMP Image types
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.BmpImage._inputStream">
            <summary>
                BMP variables
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.Uri)">
            <summary>
                Reads a BMP from an url.
                @throws IOException on error
            </summary>
            <param name="url">the url</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.IO.Stream)">
            <summary>
                Reads a BMP from a stream. The stream is not closed.
                @throws IOException on error
            </summary>
            <param name="isp">the stream</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
                Reads a BMP from a stream. The stream is not closed.
                The BMP may not have a header and be considered as a plain DIB.
                @throws IOException on error
            </summary>
            <param name="isp">the stream</param>
            <param name="noHeader">true to process a plain DIB</param>
            <param name="size">the size of the DIB. Not used for a BMP</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.String)">
            <summary>
                Reads a BMP from a file.
                @throws IOException on error
            </summary>
            <param name="file">the file</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.Byte[])">
            <summary>
                Reads a BMP from a byte array.
                @throws IOException on error
            </summary>
            <param name="data">the byte array</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.read1Bit(System.Int32)">
            <summary>
                Deal with 1 Bit images using IndexColorModels
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.read24Bit(System.Byte[])">
            <summary>
                Method to read 24 bit BMP image data
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.read4Bit(System.Int32)">
            <summary>
                Method to read a 4 bit BMP image data
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.read8Bit(System.Int32)">
            <summary>
                Method to read 8 bit BMP image data
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readDWord(System.IO.Stream)">
            <summary>
                Unsigned 4 bytes
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readInt(System.IO.Stream)">
            <summary>
                Signed 4 bytes
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readLong(System.IO.Stream)">
            <summary>
                32 bit signed value
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readShort(System.IO.Stream)">
            <summary>
                Windows defined data type reading methods - everything is little endian
            </summary>
            <summary>
                Signed 16 bits
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readUnsignedByte(System.IO.Stream)">
            <summary>
                Unsigned 8 bits
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readUnsignedInt(System.IO.Stream)">
            <summary>
                Unsigned 4 bytes
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readUnsignedShort(System.IO.Stream)">
            <summary>
                Unsigned 2 bytes
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.readWord(System.IO.Stream)">
            <summary>
                Unsigned 16 bits
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.Ccittg4Encoder">
            <summary>
                Encodes data in the CCITT G4 FAX format.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.Ccittg4Encoder.G3CodeEol">
            <summary>
                status values returned instead of a run length
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Ccittg4Encoder.#ctor(System.Int32)">
            <summary>
                Creates a new encoder.
            </summary>
            <param name="width">the line width</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Ccittg4Encoder.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Encodes a full image.
            </summary>
            <param name="data">the data to encode</param>
            <param name="width">the image width</param>
            <param name="height">the image height</param>
            <returns>the encoded image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Ccittg4Encoder.Close">
            <summary>
                Closes the encoder and returns the encoded data.
            </summary>
            <returns>the encoded data</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Ccittg4Encoder.Fax4Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Encodes a number of lines.
            </summary>
            <param name="data">the data to be encoded</param>
            <param name="offset">the offset into the data</param>
            <param name="size">the size of the data to be encoded</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Ccittg4Encoder.Fax4Encode(System.Byte[],System.Int32)">
            <summary>
                Encodes a number of lines.
            </summary>
            <param name="data">the data to be encoded</param>
            <param name="height">the number of lines to encode</param>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.GifImage">
            <summary>
                Reads gif images of all types. All the images in a gif are read in the constructors
                and can be retrieved with other methods.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.GifImage.Dispose">
            <summary>
                last graphic control extension info
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.GifImage.Prefix">
            <summary>
                LZW decoder working arrays
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.Uri)">
            <summary>
                Reads gif images from an URL.
                @throws IOException on error
            </summary>
            <param name="url">the URL</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.String)">
            <summary>
                Reads gif images from a file.
                @throws IOException on error
            </summary>
            <param name="file">the file</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.Byte[])">
            <summary>
                Reads gif images from a byte array.
                @throws IOException on error
            </summary>
            <param name="data">the byte array</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.IO.Stream)">
            <summary>
                Reads gif images from a stream. The stream isp not closed.
                @throws IOException on error
            </summary>
            <param name="isp">the stream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetFrameCount">
            <summary>
                Gets the number of frames the gif has.
            </summary>
            <returns>the number of frames the gif has</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetFramePosition(System.Int32)">
            <summary>
                Gets the [x,y] position of the frame in reference to the
                logical screen.
            </summary>
            <param name="frame">the frame</param>
            <returns>the [x,y] position of the frame</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetImage(System.Int32)">
            <summary>
                Gets the image from a frame. The first frame isp 1.
            </summary>
            <param name="frame">the frame to get the image from</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetLogicalScreen">
            <summary>
                Gets the logical screen. The images may be smaller and placed
                in some position in this screen to playback some animation.
                No image will be be bigger that this.
            </summary>
            <returns>the logical screen dimensions as [x,y]</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadBlock">
            <summary>
                Reads next variable length block from input.
            </summary>
            <returns>number of bytes stored in "buffer"</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadGraphicControlExt">
            <summary>
                Reads Graphics Control Extension values
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadHeader">
            <summary>
                Reads GIF file header information.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadImage">
            <summary>
                Reads next frame image
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadLsd">
            <summary>
                Reads Logical Screen Descriptor
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadShort">
            <summary>
                Reads next 16-bit value, LSB first
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ResetFrame">
            <summary>
                Resets frame state for reading next image.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.Skip">
            <summary>
                Skips variable length blocks up to and including
                next zero length block.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.Jbig2Image">
            <summary>
                Support for JBIG2 Images.
                This class assumes that we are always embedding into a pdf.
                @since 2.1.5
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Jbig2Image.GetGlobalSegment(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Gets a byte array that can be used as a /JBIG2Globals,
                or null if not applicable to the given jbig2.
            </summary>
            <param name="ra">an random access file or array</param>
            <returns>a byte array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Jbig2Image.GetJbig2Image(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
            <summary>
                returns an Image representing the given page.
            </summary>
            <param name="ra">the file or array containing the image</param>
            <param name="page">the page number of the image</param>
            <returns>an Image object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Jbig2Image.GetNumberOfPages(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Gets the number of pages in a JBIG2 image.
            </summary>
            <param name="ra">a random acces file array containing a JBIG2 image</param>
            <returns>the number of pages</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.Jbig2SegmentReader">
            <summary>
                Class to read a JBIG2 file at a basic level: understand all the segments,
                understand what segments belong to which pages, how many pages there are,
                what the width and height of each page is, and global segments if there
                are any.  Or: the minimum required to be able to take a normal sequential
                or random-access organized file, and be able to embed JBIG2 pages as images
                in a PDF.
                TODO: the indeterminate-segment-size value of dataLength, else?
                @since 2.1.5
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.Jbig2SegmentReader.Jbig2Page">
            <summary>
                Inner class that holds information about a JBIG2 page.
                @since   2.1.5
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Jbig2SegmentReader.Jbig2Page.GetData(System.Boolean)">
            <summary>
                return as a single byte array the header-data for each segment in segment number
                order, EMBEDDED organization, but i am putting the needed segments in SEQUENTIAL organization.
                if for_embedding, skip the segment types that are known to be not for acrobat.
                @throws IOException
            </summary>
            <param name="forEmbedding"></param>
            <returns>a byte array</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.Jbig2SegmentReader.Jbig2Segment">
            <summary>
                Inner class that holds information about a JBIG2 segment.
                @since   2.1.5
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.Jbig2SegmentReader.Jbig2Segment.CompareTo(System.Object)">
            <summary>
                for the globals treeset
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.PngImage">
            <summary>
                Reads a PNG image. All types of PNG can be read.
                It is based in part in the JAI codec.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.cHRM">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.gAMA">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.iCCP">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IDAT">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IEND">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IHDR">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.pHYs">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.PLTE">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.sRGB">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.tRNS">
            <summary>
                A PNG marker.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.Pngid">
            <summary>
                Some PNG specific values.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance of PngImage
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.Uri)">
            <summary>
                Reads a PNG from an url.
                @throws IOException on error
            </summary>
            <param name="url">the url</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.IO.Stream)">
            <summary>
                Reads a PNG from a stream.
                @throws IOException on error
            </summary>
            <param name="isp">the stream</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.String)">
            <summary>
                Reads a PNG from a file.
                @throws IOException on error
            </summary>
            <param name="file">the file</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.Byte[])">
            <summary>
                Reads a PNG from a byte array.
                @throws IOException on error
            </summary>
            <param name="data">the byte array</param>
            <returns>the image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.readFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Gets an  int  from an  Stream .
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TiffConstants">
            <summary>
                A list of constants used in class TIFFImage.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_SUBFILETYPE">
            <summary>
                TIFF Tag Definitions (from tifflib).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.COMPRESSION_IT8CTPAD">
            <summary>
                codes 32895-32898 are reserved for ANSI IT8 TIFF/IT
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.COMPRESSION_PIXARFILM">
            <summary>
                compression codes 32908-32911 are reserved for Pixar
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.COMPRESSION_DCS">
            <summary>
                compression code 32947 is reserved for Oceana Matrix
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_JPEGPROC">
            <summary>
                Tags 512-521 are obsoleted by Technical Note #2
                which specifies a revised JPEG-in-TIFF scheme.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_REFPTS">
            <summary>
                tags 32952-32956 are private tags registered to Island Graphics
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_MATTEING">
            <summary>
                tags 32995-32999 are private tags registered to SGI
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_PIXAR_IMAGEFULLWIDTH">
            <summary>
                tags 33300-33309 are private tags registered to Pixar
            </summary>
            <summary>
                TIFFTAG_PIXAR_IMAGEFULLWIDTH and TIFFTAG_PIXAR_IMAGEFULLLENGTH
                are set when an image has been cropped out of a larger image.
                They reflect the size of the original uncropped image.
                The TIFFTAG_XPOSITION and TIFFTAG_YPOSITION can be used
                to determine the position of the smaller image in the larger one.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_PIXAR_TEXTUREFORMAT">
            <summary>
                Tags 33302-33306 are used to identify special image modes and data
                used by Pixar's texture formats.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_WRITERSERIALNUMBER">
            <summary>
                tag 33405 is a private tag registered to Eastman Kodak
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_COPYRIGHT">
            <summary>
                tag 33432 is listed in the 6.0 spec w/ unknown ownership
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_RICHTIFFIPTC">
            <summary>
                IPTC TAG from RichTIFF specifications
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_IT8SITE">
            <summary>
                34016-34029 are reserved for ANSI IT8 TIFF/IT
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_FRAMECOUNT">
            <summary>
                tags 34232-34236 are private tags registered to Texas Instruments
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_ICCPROFILE">
            <summary>
                tag 34750 is a private tag registered to Adobe?
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_PHOTOSHOP">
            <summary>
                tag 34377 is private tag registered to Adobe for PhotoShop
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_JBIGOPTIONS">
            <summary>
                tag 34750 is a private tag registered to Pixel Magic
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_FAXRECVPARAMS">
            <summary>
                tags 34908-34914 are private tags registered to SGI
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_STONITS">
            <summary>
                tags 37439-37443 are registered to SGI
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_FEDEX_EDR">
            <summary>
                tag 34929 is a private tag registered to FedEx
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffConstants.TIFFTAG_DCSHUESHIFTVALUES">
            <summary>
                tag 65535 is an undefined tag used by Eastman Kodak
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TiffDirectory">
            <summary>
                A class representing an Image File Directory (IFD) from a TIFF 6.0
                stream.  The TIFF file format is described in more detail in the
                comments for the TIFFDescriptor class.
                A TIFF IFD consists of a set of TIFFField tags.  Methods are
                provided to query the set of tags and to obtain the raw field
                array.  In addition, convenience methods are provided for acquiring
                the values of tags that contain a single value that fits into a
                byte, int, long, float, or double.
                Every TIFF file is made up of one or more public IFDs that are
                joined in a linked list, rooted in the file header.  A file may
                also contain so-called private IFDs that are referenced from
                tag data and do not appear in the main list.
                <b>
                    This class is not a committed part of the JAI API.  It may
                    be removed or changed in future releases of JAI.
                </b>
                @see TIFFField
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffDirectory._fieldIndex">
            <summary>
                A Hashtable indexing the fields by tag number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffDirectory._isBigEndian">
            <summary>
                A bool storing the endianness of the stream.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffDirectory._fields">
            <summary>
                An array of TIFFFields.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffDirectory._ifdOffset">
            <summary>
                The offset of this IFD.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffDirectory._nextIfdOffset">
            <summary>
                The offset of the next IFD.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffDirectory._numEntries">
            <summary>
                The number of entries in the IFD.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
            <summary>
                Constructs a TIFFDirectory from a SeekableStream.
                The directory parameter specifies which directory to read from
                the linked list present in the stream; directory 0 is normally
                read but it is possible to store multiple images in a single
                TIFF file by maintaing multiple directories.
            </summary>
            <param name="stream">a SeekableStream to read from.</param>
            <param name="directory">the index of the directory to read.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int64,System.Int32)">
            <summary>
                Constructs a TIFFDirectory by reading a SeekableStream.
                The ifd_offset parameter specifies the stream offset from which
                to begin reading; this mechanism is sometimes used to store
                private IFDs within a TIFF file that are not part of the normal
                sequence of IFDs.
                one at the current stream offset; zero indicates the IFD
                at the current offset.
            </summary>
            <param name="stream">a SeekableStream to read from.</param>
            <param name="ifdOffset">the long byte offset of the directory.</param>
            <param name="directory">the index of the directory to read beyond the</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.#ctor">
            <summary>
                The default constructor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetNumDirectories(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Returns the number of image directories (subimages) stored in a
                given TIFF file, represented by a  SeekableStream .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetField(System.Int32)">
            <summary>
                Returns the value of a given tag as a TIFFField,
                or null if the tag is not present.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsByte(System.Int32,System.Int32)">
            <summary>
                Returns the value of a particular index of a given tag as a
                byte.  The caller is responsible for ensuring that the tag is
                present and has type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
                TIFF_UNDEFINED.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsByte(System.Int32)">
            <summary>
                Returns the value of index 0 of a given tag as a
                byte.  The caller is responsible for ensuring that the tag is
                present and has  type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
                TIFF_UNDEFINED.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsDouble(System.Int32,System.Int32)">
            <summary>
                Returns the value of a particular index of a given tag as a
                double.  The caller is responsible for ensuring that the tag is
                present and has numeric type (all but TIFF_UNDEFINED and
                TIFF_ASCII).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsDouble(System.Int32)">
            <summary>
                Returns the value of index 0 of a given tag as a double.  The
                caller is responsible for ensuring that the tag is present and
                has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsFloat(System.Int32,System.Int32)">
            <summary>
                Returns the value of a particular index of a given tag as a
                float.  The caller is responsible for ensuring that the tag is
                present and has numeric type (all but TIFF_UNDEFINED and
                TIFF_ASCII).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsFloat(System.Int32)">
            <summary>
                Returns the value of index 0 of a given tag as a float.  The
                caller is responsible for ensuring that the tag is present and
                has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsLong(System.Int32,System.Int32)">
            <summary>
                Returns the value of a particular index of a given tag as a
                long.  The caller is responsible for ensuring that the tag is
                present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
                TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFieldAsLong(System.Int32)">
            <summary>
                Returns the value of index 0 of a given tag as a
                long.  The caller is responsible for ensuring that the tag is
                present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
                TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetFields">
            <summary>
                Returns an array of TIFFFields containing all the fields
                in this directory.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetIfdOffset">
            <summary>
                Returns the offset of the IFD corresponding to this
                TIFFDirectory .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetNextIfdOffset">
            <summary>
                Returns the offset of the next IFD after the IFD corresponding to this
                TIFFDirectory .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetNumEntries">
            <summary>
                Returns the number of directory entries.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.GetTags">
            <summary>
                Returns an ordered array of ints indicating the tag
                values.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.IsBigEndian">
            <summary>
                Utilities
            </summary>
            <summary>
                Returns a bool indicating whether the byte order used in the
                the TIFF file is big-endian (i.e. whether the byte order is from
                the most significant to the least significant)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.IsTagPresent(System.Int32)">
            <summary>
                Returns true if a tag appears in the directory.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffDirectory.readDouble(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Methods to read primitive data types from the stream
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder.FlipTable">
            <summary>
                Table to be used when fillOrder = 2, for flipping bytes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._additionalMakeup">
            <summary>
                Additional make up codes for both White and Black runs
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._black">
            <summary>
                Main black run table, using the last 9 bits of possible 13 bit code
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._initBlack">
            <summary>
                Initial black run look up table, uses the first 4 bits of a code
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._twoBitBlack">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._white">
            <summary>
                The main 10 bit white runs lookup table
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._changingElemSize">
            <summary>
                Data structures needed to store changing elements for the previous
            </summary>
            <summary>
                and the current scanline
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._lastChangingElement">
            <summary>
                Element at which to start search in getNextChangingElement
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffFaxDecoder._uncompressedMode">
            <summary>
                Variables set by T4Options
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="fillOrder">The fill order of the compressed data bytes.</param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.Decode1D(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
                One-dimensional decoding methods
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.DecodeT6(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
                Two-dimensional decoding methods
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.advancePointer">
            <summary>
                Move to the next byte boundary
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.decodeBlackCodeWord">
            <summary>
                Returns run length
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.decodeWhiteCodeWord">
            <summary>
                Returns run length
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffFaxDecoder.updatePointer(System.Int32)">
            <summary>
                Move pointer backwards by given amount of bits
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TiffField">
            <summary>
                A class representing a field in a TIFF 6.0 Image File Directory.
                The TIFF file format is described in more detail in the
                comments for the TIFFDescriptor class.
                A field in a TIFF Image File Directory (IFD).  A field is defined
                as a sequence of values of identical data type.  TIFF 6.0 defines
                12 data types, which are mapped internally onto the Java datatypes
                byte, int, long, float, and double.
                <b>
                    This class is not a committed part of the JAI API.  It may
                    be removed or changed in future releases of JAI.
                </b>
                @see TIFFDirectory
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_ASCII">
            <summary>
                Flag for null-terminated ASCII strings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_BYTE">
            <summary>
                Flag for 8 bit unsigned integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_DOUBLE">
            <summary>
                Flag for 64 bit IEEE doubles.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_FLOAT">
            <summary>
                Flag for 32 bit IEEE floats.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_LONG">
            <summary>
                Flag for 32 bit unsigned integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_RATIONAL">
            <summary>
                Flag for pairs of 32 bit unsigned integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_SBYTE">
            <summary>
                Flag for 8 bit signed integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_SHORT">
            <summary>
                Flag for 16 bit unsigned integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_SLONG">
            <summary>
                Flag for 32 bit signed integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_SRATIONAL">
            <summary>
                Flag for pairs of 32 bit signed integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_SSHORT">
            <summary>
                Flag for 16 bit signed integers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField.TIFF_UNDEFINED">
            <summary>
                Flag for 8 bit uninterpreted bytes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField._count">
            <summary>
                The number of data items present in the field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField._data">
            <summary>
                The field data.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField._tag">
            <summary>
                The tag number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TiffField._type">
            <summary>
                The tag type.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.#ctor(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
                Constructs a TIFFField with arbitrary data.  The data
                parameter must be an array of a Java type appropriate for the
                type of the TIFF field.  Since there is no available 32-bit
                unsigned datatype, long is used. The mapping between types is
                as follows:
                TIFF type     Java type
                TIFF_BYTE          byte
                TIFF_ASCII         String
                TIFF_SHORT         char
                TIFF_LONG          long
                TIFF_RATIONAL      long[2]
                TIFF_SBYTE         byte
                TIFF_UNDEFINED     byte
                TIFF_SSHORT        short
                TIFF_SLONG         int
                TIFF_SRATIONAL     int[2]
                TIFF_FLOAT         float
                TIFF_DOUBLE        double
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.#ctor">
            <summary>
                The default constructor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.CompareTo(System.Object)">
            <summary>
                Compares this  TIFFField  with another
                TIFFField  by comparing the tags.
                <b>
                    Note: this class has a natural ordering that is inconsistent
                    with  equals() .
                </b>
                @throws IllegalArgumentException if the parameter is  null .
                @throws ClassCastException if the parameter is not a
                TIFFField .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsBytes">
            <summary>
                Returns the data as an uninterpreted array of bytes.
                The type of the field must be one of TIFF_BYTE, TIFF_SBYTE,
                or TIFF_UNDEFINED;
                For data in TIFF_BYTE format, the application must take
                care when promoting the data to longer integral types
                to avoid sign extension.
                A ClassCastException will be thrown if the field is not
                of type TIFF_BYTE, TIFF_SBYTE, or TIFF_UNDEFINED.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsChars">
            <summary>
                Returns TIFF_SHORT data as an array of chars (unsigned 16-bit
                integers).
                A ClassCastException will be thrown if the field is not
                of type TIFF_SHORT.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsDouble(System.Int32)">
            <summary>
                Returns data in any numerical format as a float.  Data in
                TIFF_SRATIONAL or TIFF_RATIONAL format are evaluated by
                dividing the numerator into the denominator using
                double-precision arithmetic.
                A ClassCastException will be thrown if the field is of
                type TIFF_UNDEFINED or TIFF_ASCII.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsDoubles">
            <summary>
                Returns TIFF_DOUBLE data as an array of doubles.
                A ClassCastException will be thrown if the field is not
                of type TIFF_DOUBLE.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsFloat(System.Int32)">
            <summary>
                Returns data in any numerical format as a float.  Data in
                TIFF_SRATIONAL or TIFF_RATIONAL format are evaluated by
                dividing the numerator into the denominator using
                double-precision arithmetic and then truncating to single
                precision.  Data in TIFF_SLONG, TIFF_LONG, or TIFF_DOUBLE
                format may suffer from truncation.
                A ClassCastException will be thrown if the field is
                of type TIFF_UNDEFINED or TIFF_ASCII.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsFloats">
            <summary>
                Returns TIFF_FLOAT data as an array of floats.
                A ClassCastException will be thrown if the field is not
                of type TIFF_FLOAT.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsInt(System.Int32)">
            <summary>
                Returns data in TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
                TIFF_SSHORT, or TIFF_SLONG format as an int.
                TIFF_BYTE and TIFF_UNDEFINED data are treated as unsigned;
                that is, no sign extension will take place and the returned
                value will be in the range [0, 255].  TIFF_SBYTE data will
                be returned in the range [-128, 127].
                A ClassCastException will be thrown if the field is not of
                type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
                TIFF_SSHORT, or TIFF_SLONG.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsInts">
            <summary>
                Returns TIFF_SLONG data as an array of ints (signed 32-bit
                integers).
                A ClassCastException will be thrown if the field is not
                of type TIFF_SLONG.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsLong(System.Int32)">
            <summary>
                Returns data in TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
                TIFF_SSHORT, TIFF_SLONG, or TIFF_LONG format as a long.
                TIFF_BYTE and TIFF_UNDEFINED data are treated as unsigned;
                that is, no sign extension will take place and the returned
                value will be in the range [0, 255].  TIFF_SBYTE data will
                be returned in the range [-128, 127].
                A ClassCastException will be thrown if the field is not of
                type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
                TIFF_SSHORT, TIFF_SLONG, or TIFF_LONG.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsLongs">
            <summary>
                Returns TIFF_LONG data as an array of longs (signed 64-bit
                integers).
                A ClassCastException will be thrown if the field is not
                of type TIFF_LONG.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsRational(System.Int32)">
            <summary>
                Returns a TIFF_RATIONAL data item as a two-element array
                of ints.
                A ClassCastException will be thrown if the field is not
                of type TIFF_RATIONAL.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsRationals">
            <summary>
                Returns TIFF_RATIONAL data as an array of 2-element arrays of longs.
                A ClassCastException will be thrown if the field is not
                of type TIFF_RATTIONAL.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsShorts">
            <summary>
                Returns TIFF_SSHORT data as an array of shorts (signed 16-bit
                integers).
                A ClassCastException will be thrown if the field is not
                of type TIFF_SSHORT.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsSRational(System.Int32)">
            <summary>
                Returns a TIFF_SRATIONAL data item as a two-element array
                of ints.
                A ClassCastException will be thrown if the field is not
                of type TIFF_SRATIONAL.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsSRationals">
            <summary>
                Returns TIFF_SRATIONAL data as an array of 2-element arrays of ints.
                A ClassCastException will be thrown if the field is not
                of type TIFF_SRATIONAL.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetAsString(System.Int32)">
            <summary>
                Returns a TIFF_ASCII data item as a String.
                A ClassCastException will be thrown if the field is not
                of type TIFF_ASCII.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetCount">
            <summary>
                Returns the number of elements in the IFD.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetTag">
            <summary>
                Returns the tag number, between 0 and 65535.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffField.GetType">
            <summary>
                Returns the type of the data stored in the IFD.
                For a TIFF6.0 file, the value will equal one of the
                TIFF_ constants defined in this class.  For future
                revisions of TIFF, higher values are possible.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TiffImage">
            <summary>
                Reads TIFF images
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.DecodePackbits(System.Byte[],System.Byte[])">
            <summary>
                Uncompress packbits compressed image data.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetNumberOfPages(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Gets the number of pages the TIFF document has.
            </summary>
            <param name="s">the file source</param>
            <returns>the number of pages</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetTiffImage(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
            <summary>
                Reads a page from a TIFF image. Direct mode is not used.
            </summary>
            <param name="s">the file source</param>
            <param name="page">the page to get. The first page is 1</param>
            <returns>the  Image </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetTiffImage(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32,System.Boolean)">
            <summary>
                Reads a page from a TIFF image.
                by direct byte copying. It's faster but may not work
                every time
            </summary>
            <param name="s">the file source</param>
            <param name="page">the page to get. The first page is 1</param>
            <param name="direct">for single strip, CCITT images, generate the image</param>
            <returns>the  Image </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TifflzwDecoder">
            <summary>
                A class for performing LZW decoding.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.Decode(System.Byte[],System.Byte[],System.Int32)">
            <summary>
                Method to decode LZW compressed data.
            </summary>
            <param name="data">The compressed data.</param>
            <param name="uncompData">Array to return the uncompressed data in.</param>
            <param name="h">The number of rows the compressed data contains.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.InitializeStringTable">
            <summary>
                Initialize the string table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.WriteString(System.Byte[])">
            <summary>
                Write out the string just uncompressed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.AddStringToTable(System.Byte[],System.Byte)">
            <summary>
                Add a new string to the string table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.AddStringToTable(System.Byte[])">
            <summary>
                Add a new string to the string table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.ComposeString(System.Byte[],System.Byte)">
            <summary>
                Append  newString  to the end of  oldString .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TifflzwDecoder.GetNextCode">
            <summary>
                Returns the next 9, 10, 11 or 12 bits
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.wmf.InputMeta">
            <summary>
                Summary description for InputMeta.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.wmf.MetaDo">
            <summary>
                Summary description for MetaDo.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.wmf.MetaState.#ctor">
            <summary>
                Creates new MetaState
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.BackgroundMode">
            <summary>
                Getter for property backgroundMode.
            </summary>
            <returns>Value of property backgroundMode.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.CurrentBackgroundColor">
            <summary>
                Getter for property currentBackgroundColor.
            </summary>
            <returns>Value of property currentBackgroundColor.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.CurrentTextColor">
            <summary>
                Getter for property currentTextColor.
            </summary>
            <returns>Value of property currentTextColor.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.PolyFillMode">
            <summary>
                Getter for property polyFillMode.
            </summary>
            <returns>Value of property polyFillMode.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.TextAlign">
            <summary>
                Getter for property textAlign.
            </summary>
            <returns>Value of property textAlign.</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.collection.PdfCollection">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollection.DETAILS">
            <summary>
                A type of PDF Collection
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollection.HIDDEN">
            <summary>
                A type of PDF Collection
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollection.TILE">
            <summary>
                A type of PDF Collection
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollection.#ctor(System.Int32)">
            <summary>
                Constructs a PDF Collection.
            </summary>
            <param name="type">the type of PDF collection.</param>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollection.InitialDocument">
            <summary>
                Identifies the document that will be initially presented
                in the user interface.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollection.Schema">
            <summary>
                Sets the Collection schema dictionary.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollection.Sort">
            <summary>
                Sets the Collection sort dictionary.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.collection.PdfCollectionField">
            <summary>
                @author blowagie
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.CREATIONDATE">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.DATE">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.DESC">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.FILENAME">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.MODDATE">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.NUMBER">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.SIZE">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.TEXT">
            <summary>
                A possible type of collection field.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.FieldType">
            <summary>
                The type of the PDF collection field.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionField.#ctor(System.String,System.Int32)">
            <summary>
                Creates a PdfCollectionField.
            </summary>
            <param name="name">the field name</param>
            <param name="type">the field type</param>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollectionField.Editable">
            <summary>
                Indication if the field value should be editable in the viewer.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollectionField.Order">
            <summary>
                The relative order of the field name. Fields are sorted in ascending order.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollectionField.Visible">
            <summary>
                Sets the initial visibility of the field.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionField.GetValue(System.String)">
            <summary>
                Returns a PdfObject that can be used as the value of a Collection Item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionField.IsCollectionItem">
            <summary>
                Checks if the type of the field is suitable for a Collection Item.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionItem.Schema">
            <summary>
                The PdfCollectionSchema with the names and types of the items.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.#ctor(iTextSharp.text.pdf.collection.PdfCollectionSchema)">
            <summary>
                Constructs a Collection Item that can be added to a PdfFileSpecification.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.String)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,iTextSharp.text.pdf.PdfString)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,iTextSharp.text.pdf.PdfDate)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,iTextSharp.text.pdf.PdfNumber)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.DateTime)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.Int32)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.Single)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.Double)">
            <summary>
                Sets the value of the collection item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.SetPrefix(System.String,System.String)">
            <summary>
                Adds a prefix for the Collection item.
                You can only use this method after you have set the value of the item.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSchema.#ctor">
            <summary>
                Creates a Collection Schema dictionary.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSchema.AddField(System.String,iTextSharp.text.pdf.collection.PdfCollectionField)">
            <summary>
                Adds a Collection field to the Schema.
            </summary>
            <param name="name">the name of the collection field</param>
            <param name="field">a Collection Field</param>
        </member>
        <member name="T:iTextSharp.text.pdf.collection.PdfCollectionSort">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.#ctor(System.String)">
            <summary>
                Constructs a PDF Collection Sort Dictionary.
            </summary>
            <param name="key">the key of the field that will be used to sort entries</param>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.#ctor(System.String[])">
            <summary>
                Constructs a PDF Collection Sort Dictionary.
            </summary>
            <param name="keys">the keys of the fields that will be used to sort entries</param>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.SetSortOrder(System.Boolean)">
            <summary>
                Defines the sort order of the field (ascending or descending).
            </summary>
            <param name="ascending">true is the default, use false for descending order</param>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.SetSortOrder(System.Boolean[])">
            <summary>
                Defines the sort order of the field (ascending or descending).
            </summary>
            <param name="ascending">an array with every element corresponding with a name of a field.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfTargetDictionary.#ctor(iTextSharp.text.pdf.collection.PdfTargetDictionary)">
            <summary>
                Creates dictionary referring to a target document that is the parent of the current document.
            </summary>
            <param name="nested">null if this is the actual target, another target if this is only an intermediate target.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfTargetDictionary.#ctor(System.Boolean)">
            <summary>
                Creates a dictionary referring to a target document.
            </summary>
            <param name="child">
                if false, this refers to the parent document; if true, this refers to a child document, and you'll
                have to specify where to find the child using the other methods of this class
            </param>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.AdditionalPath">
            <summary>
                If this dictionary refers to an intermediate target, you can
                add the next target in the sequence.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.EmbeddedFileName">
            <summary>
                If this dictionary refers to a child that is a document level attachment,
                you need to specify the name that was used to attach the document.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentIndex">
            <summary>
                If this dictionary refers to a child that is a file attachment added to a page,
                you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
                and then specify the index of the attachment added to this page (or use setFileAttachmentName).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentName">
            <summary>
                If this dictionary refers to a child that is a file attachment added to a page,
                you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
                and then specify the name of the attachment added to this page (or use setFileAttachmentIndex).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentPage">
            <summary>
                If this dictionary refers to a child that is a file attachment added to a page,
                you need to specify the page number (or use setFileAttachmentPagename to specify a named destination).
                Once you have specified the page, you still need to specify the attachment using another method.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentPagename">
            <summary>
                If this dictionary refers to a child that is a file attachment added to a page,
                you need to specify the name of the page (or use setFileAttachmentPage to specify the page number).
                Once you have specified the page, you still need to specify the attachment using another method.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.ColorDetails">
            <summary>
                Each spotcolor in the document will have an instance of this class
                @author Phillip Pan (phillip@formstar.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails._colorName">
            <summary>
                The color name that appears in the document body stream
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails._indirectReference">
            <summary>
                The indirect reference to this color
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails._spotcolor">
            <summary>
                The color
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ColorDetails.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfSpotColor)">
            <summary>
                Each spot color used in a document has an instance of this class.
            </summary>
            <param name="colorName">the color name</param>
            <param name="indirectReference">the indirect reference to the font</param>
            <param name="scolor">the  PDfSpotColor </param>
        </member>
        <member name="P:iTextSharp.text.pdf.ColorDetails.ColorName">
            <summary>
                Gets the color name as it appears in the document body.
            </summary>
            <returns>the color name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColorDetails.IndirectReference">
            <summary>
                Gets the indirect reference to this color.
            </summary>
            <returns>the indirect reference to this color</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColorDetails.GetSpotColor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Gets the  SpotColor  object.
            </summary>
            <returns>the  PdfSpotColor </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.ColumnText">
            <summary>
                Formats text in a columnwise form. The text is bound
                on the left and on the right by a sequence of lines. This allows the column
                to have any shape, not only rectangular.
                Several parameters can be set like the first paragraph line indent and
                extra space between paragraphs.
                A call to the method  go  will return one of the following
                situations: the column ended or the text ended.
                I the column ended, a new column definition can be loaded with the method
                setColumns  and the method  go  can be called again.
                If the text ended, more text can be loaded with  addText
                and the method  go  can be called again.
                The only limitation is that one or more complete paragraphs must be loaded
                each time.
                Full bidirectional reordering is supported. If the run direction is
                PdfWriter.RUN_DIRECTION_RTL  the meaning of the horizontal
                alignments and margins is mirrored.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_COMPOSEDTASHKEEL">
            <summary>
                Compose the tashkeel in the ligatures.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_LIG">
            <summary>
                Do some extra double ligatures.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGIT_TYPE_AN">
            <summary>
                Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGIT_TYPE_AN_EXTENDED">
            <summary>
                Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_AN2EN">
            <summary>
                Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN">
            <summary>
                Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN_INIT_AL">
            <summary>
                Digit shaping option:
                Replace European digits (U+0030...U+0039) by Arabic-Indic digits
                if the most recent strongly directional character
                is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
                The initial state at the start of the text is assumed to be an Arabic,
                letter, so European digits at the start of the text will change.
                Compare to DIGITS_ALEN2AN_INT_LR.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN_INIT_LR">
            <summary>
                Digit shaping option:
                Replace European digits (U+0030...U+0039) by Arabic-Indic digits
                if the most recent strongly directional character
                is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
                The initial state at the start of the text is assumed to be not an Arabic,
                letter, so European digits at the start of the text will not change.
                Compare to DIGITS_ALEN2AN_INIT_AL.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.NO_MORE_COLUMN">
            <summary>
                Signals that there is no more column.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.NO_MORE_TEXT">
            <summary>
                Signals that there is no more text available.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_NOLINE">
            <summary>
                The line cannot fit this column position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_OFFLIMITS">
            <summary>
                The line is out the column limits.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_OK">
            <summary>
                The column is valid.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText._arabicOptions">
            <summary>
                Holds value of property arabicOptions.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText._filledWidth">
            <summary>
                Holds value of property filledWidth.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText._linesWritten">
            <summary>
                Holds value of property linesWritten.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText._spaceCharRatio">
            <summary>
                Holds value of property spaceCharRatio.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText._useAscender">
            <summary>
                if true, first line height is adjusted so that the max ascender touches the top
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.alignment">
            <summary>
                The column Element. Default is left Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.ArNovowel">
            <summary>
                Eliminate the arabic vowels
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.BidiLine">
            <summary>
                The chunks that form the text.
            </summary>
            <summary>
                protected ArrayList chunks = new ArrayList();
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.canvas">
            <summary>
                The  PdfContent  where the text will be written to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.CurrentLeading">
            <summary>
                The leading for the current line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.extraParagraphSpace">
            <summary>
                The extra space between paragraphs.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.FixedLeading">
            <summary>
                The fixed text leading.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.followingIndent">
            <summary>
                The following paragraph lines indent.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.indent">
            <summary>
                The first paragraph line indent.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LeftWall">
            <summary>
                The left column bound.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LineStatus">
            <summary>
                The line status when trying to fit a line to a column.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.MaxY">
            <summary>
                Upper bound of the column.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.MinY">
            <summary>
                Lower bound of the column.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.multipliedLeading">
            <summary>
                The text leading that is multiplied by the biggest font size in the line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.RectangularWidth">
            <summary>
                The width of the line when the column is defined as a simple rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rightIndent">
            <summary>
                The right paragraph lines indent.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.RightWall">
            <summary>
                The right column bound.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.yLine">
            <summary>
                The current y line location. Text will be written at this line minus the leading.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.#ctor(iTextSharp.text.pdf.PdfContentByte)">
            <summary>
                Creates a  ColumnText .
                be a template.
            </summary>
            <param name="canvas">the place where the text will be written to. Can</param>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.AdjustFirstLine">
            <summary>
                Sets the first line adjustment. Some objects have properties, like spacing before, that
                behave differently if the object is the first to be written after go() or not. The first line adjustment is
                true  by default but can be changed if several objects are to be placed one
                after the other in the same column calling go() several times.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Alignment">
            <summary>
                Gets the Element.
            </summary>
            <returns>the alignment</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ArabicOptions">
            <summary>
                Sets the arabic shaping options. The option can be AR_NOVOWEL,
                AR_COMPOSEDTASHKEEL and AR_LIG.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Canvas">
            <summary>
                Sets the canvas.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Canvases">
            <summary>
                Sets the canvases.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Descender">
            <summary>
                Gets the biggest descender value of the last line written.
            </summary>
            <returns>the biggest descender value of the last line written</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ExtraParagraphSpace">
            <summary>
                Sets the extra space between paragraphs.
            </summary>
            <returns>the extra space between paragraphs</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.FilledWidth">
            <summary>
                Sets the real width used by the largest line. Only used to set it
                to zero to start another measurement.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.FollowingIndent">
            <summary>
                Gets the following paragraph lines indent.
            </summary>
            <returns>the indent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Indent">
            <summary>
                Gets the first paragraph line indent.
            </summary>
            <returns>the indent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Leading">
            <summary>
                Gets the fixed leading
            </summary>
            <returns>the leading</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.LinesWritten">
            <summary>
                Gets the number of lines written.
            </summary>
            <returns>the number of lines written</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.MultipliedLeading">
            <summary>
                Gets the variable leading
            </summary>
            <returns>the leading</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.RightIndent">
            <summary>
                Gets the right paragraph lines indent.
            </summary>
            <returns>the indent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.RunDirection">
            <summary>
                Gets the run direction.
            </summary>
            <returns>the run direction</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.SpaceCharRatio">
            <summary>
                Gets the space/character extra spacing ratio for
                fully justified text.
            </summary>
            <returns>the space/character extra spacing ratio</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.UseAscender">
            <summary>
                Enables/Disables adjustment of first line height based on max ascender.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.YLine">
            <summary>
                Gets the yLine.
            </summary>
            <returns>the yLine</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Duplicate(iTextSharp.text.pdf.ColumnText)">
            <summary>
                Creates an independent duplicated of the instance  org .
            </summary>
            <param name="org">the original  ColumnText </param>
            <returns>the duplicated</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.GetWidth(iTextSharp.text.Phrase,System.Int32,System.Int32)">
            <summary>
                Gets the width that the line will occupy after writing.
                Only the width of the first line is returned.
            </summary>
            <param name="phrase">the  Phrase  containing the line</param>
            <param name="runDirection">the run direction</param>
            <param name="arabicOptions">the options for the arabic shaping</param>
            <returns>the width of the line</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.GetWidth(iTextSharp.text.Phrase)">
            <summary>
                Gets the width that the line will occupy after writing.
                Only the width of the first line is returned.
            </summary>
            <param name="phrase">the  Phrase  containing the line</param>
            <returns>the width of the line</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.HasMoreText(System.Int32)">
            <summary>
                Checks the status variable and looks if there's still some text.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ShowTextAligned(iTextSharp.text.pdf.PdfContentByte,System.Int32,iTextSharp.text.Phrase,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
                Shows a line of text. Only the first line is written.
            </summary>
            <param name="canvas">where the text is to be written to</param>
            <param name="alignment">the alignment. It is not influenced by the run direction</param>
            <param name="phrase">the  Phrase  with the text</param>
            <param name="x">the x reference position</param>
            <param name="y">the y reference position</param>
            <param name="rotation">the rotation to be applied in degrees counterclockwise</param>
            <param name="runDirection">the run direction</param>
            <param name="arabicOptions">the options for the arabic shaping</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ShowTextAligned(iTextSharp.text.pdf.PdfContentByte,System.Int32,iTextSharp.text.Phrase,System.Single,System.Single,System.Single)">
            <summary>
                Shows a line of text. Only the first line is written.
            </summary>
            <param name="canvas">where the text is to be written to</param>
            <param name="alignment">the alignment</param>
            <param name="phrase">the  Phrase  with the text</param>
            <param name="x">the x reference position</param>
            <param name="y">the y reference position</param>
            <param name="rotation">the rotation to be applied in degrees counterclockwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddElement(iTextSharp.text.IElement)">
            <summary>
                Adds an element. Elements supported are  Paragraph ,
                List ,  PdfPTable ,  Image  and
                Graphic .
                It removes all the text placed with  addText() .
            </summary>
            <param name="element">the  Element </param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddText(iTextSharp.text.Phrase)">
            <summary>
                Adds a  Phrase  to the current text array.
            </summary>
            <param name="phrase">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddText(iTextSharp.text.Chunk)">
            <summary>
                Adds a  Chunk  to the current text array.
                Will not have any effect if AddElement() was called before.
            </summary>
            <param name="chunk">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ClearChunks">
            <summary>
                Clears the chunk array. A call to  go()  will always return
                NO_MORE_TEXT.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Go">
            <summary>
                Outputs the lines to the document. It is equivalent to  go(false) .
                and/or  NO_MORE_COLUMN
                @throws DocumentException on error
            </summary>
            <returns>returns the result of the operation. It can be  NO_MORE_TEXT </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Go(System.Boolean)">
            <summary>
                Outputs the lines to the document. The output can be simulated.
                and/or  NO_MORE_COLUMN
                @throws DocumentException on error
            </summary>
            <param name="simulate"> true  to simulate the writting to the document</param>
            <returns>returns the result of the operation. It can be  NO_MORE_TEXT </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetACopy(iTextSharp.text.pdf.ColumnText)">
            <summary>
                Makes this instance an independent copy of  org .
            </summary>
            <param name="org">the original  ColumnText </param>
            <returns>itself</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetColumns(System.Single[],System.Single[])">
            <summary>
                Sets the columns bounds. Each column bound is described by a
                float[]  with the line points [x1,y1,x2,y2,...].
                The array must have at least 4 elements.
            </summary>
            <param name="leftLine">the left column bound</param>
            <param name="rightLine">the right column bound</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetLeading(System.Single,System.Single)">
            <summary>
                Sets the leading fixed and variable. The resultant leading will be
                fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
                size of the bigest font in the line.
            </summary>
            <param name="fixedLeading">the fixed leading</param>
            <param name="multipliedLeading">the variable leading</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(iTextSharp.text.Phrase,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Simplified method for rectangular columns.
            </summary>
            <param name="phrase">a  Phrase </param>
            <param name="llx">the lower left x corner</param>
            <param name="lly">the lower left y corner</param>
            <param name="urx">the upper right x corner</param>
            <param name="ury">the upper right y corner</param>
            <param name="leading">the leading</param>
            <param name="alignment">the column alignment</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Simplified method for rectangular columns.
            </summary>
            <param name="llx">the lower left x corner</param>
            <param name="lly">the lower left y corner</param>
            <param name="urx">the upper right x corner</param>
            <param name="ury">the upper right y corner</param>
            <param name="leading">the leading</param>
            <param name="alignment">the column alignment</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Simplified method for rectangular columns.
            </summary>
            <param name="llx"></param>
            <param name="lly"></param>
            <param name="urx"></param>
            <param name="ury"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetText(iTextSharp.text.Phrase)">
            <summary>
                Replaces the current text array with this  Phrase .
                Anything added previously with AddElement() is lost.
            </summary>
            <param name="phrase">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.UpdateFilledWidth(System.Single)">
            <summary>
                Replaces the  filledWidth  if greater than the existing one.
            </summary>
            <param name="w">the new  filledWidth  if greater than the existing one</param>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ZeroHeightElement">
            <summary>
                Checks if the element has a height of 0.
                @since 2.1.2
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ConvertColumn(System.Single[])">
            <summary>
                Converts a sequence of lines representing one of the column bounds into
                an internal format.
                Each array element will contain a  float[4]  representing
                the line x = ax + b.
            </summary>
            <param name="cLine">the column array</param>
            <returns>the converted array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsOneLine">
            <summary>
                Finds the intersection between the  yLine  and the two
                column bounds. It will set the  lineStatus  apropriatly.
            </summary>
            <returns>a  float[2] with the x coordinates of the intersection</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsPoint(System.Collections.Generic.IList{System.Single[]})">
            <summary>
                Finds the intersection between the  yLine  and the column. It will
                set the  lineStatus  apropriatly.
            </summary>
            <param name="wall">the column to intersect</param>
            <returns>the x coordinate of the intersection</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsTwoLines">
            <summary>
                Finds the intersection between the  yLine ,
                the  yLine-leading and the two
                column bounds. It will set the  lineStatus  apropriatly.
            </summary>
            <returns>a  float[4] with the x coordinates of the intersection</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.crypto.AesCipher">
            <summary>
                Creates an AES Cipher with CBC and padding PKCS5/7.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.AesCipher.#ctor(System.Boolean,System.Byte[],System.Byte[])">
            <summary>
                Creates a new instance of AESCipher
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.crypto.IvGenerator">
            <summary>
                An initialization vector generator for a CBC block encryption. It's a random generator based on RC4.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.IvGenerator.GetIv">
            <summary>
                Gets a 16 byte random initialization vector.
            </summary>
            <returns>a 16 byte random initialization vector</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.IvGenerator.GetIv(System.Int32)">
            <summary>
                Gets a random initialization vector.
            </summary>
            <param name="len">the length of the initialization vector</param>
            <returns>a random initialization vector</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.crypto.StandardDecryption">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.StandardDecryption.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of StandardDecryption
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.DefaultSplitCharacter">
            <summary>
                The default class that is used to determine whether or not a character
                is a split character. You can subclass this class to define your own
                split characters.
                @since	2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.DefaultSplitCharacter.Default">
            <summary>
                An instance of the default SplitCharacter.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.DefaultSplitCharacter.IsSplitCharacter(System.Int32,System.Int32,System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])">
            <summary>
                Checks if a character can be used to split a  PdfString .
                for the moment every character less than or equal to SPACE, the character '-'
                and some specific unicode ranges are 'splitCharacters'.
            </summary>
            <param name="start">start position in the array</param>
            <param name="current">current position in the array</param>
            <param name="end">end position in the array</param>
            <param name="cc">array that has to be checked</param>
            <param name="ck">chunk array</param>
            <returns>if the character can be used to split a string,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DefaultSplitCharacter.GetCurrentCharacter(System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])">
            <summary>
                Returns the current character
            </summary>
            <param name="current">current position in the array</param>
            <param name="cc">array that has to be checked</param>
            <param name="ck">chunk array</param>
            <returns>current character</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.DocumentFont">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.DocumentFont._metrics">
            <summary>
                code, [glyph, width]
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.#ctor(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Creates a new instance of DocumentFont
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.DocumentFont.AllNameEntries">
            <summary>
                Gets all the entries of the names-table. If it is a True Type font
                each array element will have {Name ID, Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"4", "", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.DocumentFont.FamilyFontName">
            <summary>
                Gets the family name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the family name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.DocumentFont.FullFontName">
            <summary>
                Gets the full name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.DocumentFont.PostscriptFontName">
            <summary>
                Gets the postscript font name.
            </summary>
            <returns>the postscript font name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.DocumentFont.Uni2Byte">
            <summary>
                Exposes the unicode - > CID map that is constructed from the font's encoding
                @since 2.1.7
            </summary>
            <returns>the unicode to CID map</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetFontDescriptor(System.Int32,System.Single)">
            <summary>
                Gets the font parameter identified by  key . Valid values
                for  key  are  ASCENT ,  CAPHEIGHT ,  DESCENT ,
                ITALICANGLE ,  BBOXLLX ,  BBOXLLY ,  BBOXURX
                and  BBOXURY .
            </summary>
            <param name="key">the parameter to be extracted</param>
            <param name="fontSize">the font size in points</param>
            <returns>the parameter in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetFullFontStream">
            <summary>
                Always returns null.
                @since   2.1.3
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetKerning(System.Int32,System.Int32)">
            <summary>
                Gets the kerning between two Unicode chars.
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <returns>the kerning to be applied</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetWidth(System.Int32)">
            <summary>
                Gets the width of a  char  in normalized 1000 units.
            </summary>
            <param name="char1">the unicode  char  to get the width of</param>
            <returns>the width in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.HasKernPairs">
            <summary>
                Checks if the font has any kerning pairs.
            </summary>
            <returns> true  if the font has any kerning pairs</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetRawWidth(System.Int32,System.String)">
            <summary>
                Gets the width from the font according to the Unicode char  c
                or the  name . If the  name  is null it's a symbolic font.
            </summary>
            <param name="c">the unicode char</param>
            <param name="name">the glyph name</param>
            <returns>the width of the char</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            <summary>
                Outputs to the writer the font dictionaries and streams.
                @throws IOException on error
                @throws DocumentException error in generating the object
            </summary>
            <param name="writer">the writer for this document</param>
            <param name="refi">the font indirect reference</param>
            <param name="param">several parameters that depend on the font type</param>
        </member>
        <member name="T:iTextSharp.text.pdf.draw.DottedLineSeparator">
            <summary>
                Element that draws a dotted line from left to right.
                Can be added directly to a document or column.
                Can also be used to create a separator chunk.
                @since   2.1.2
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.DottedLineSeparator.Gap">
            <summary>
                Setter for the gap between the center of the dots of the dotted line.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.DottedLineSeparator.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.draw.DrawInterface#draw(com.lowagie.text.pdf.PdfContentByte, float, float, float, float,
                float)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.draw.IDrawInterface">
            <summary>
                Interface for an Element that allows you to draw something at the current
                vertical position. Trivial implementations are LineSeparator and VerticalPositionMark.
                It is also used to define what has to be drawn by a separator chunk.
                @since 2.1.2
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.IDrawInterface.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implement this method if you want to draw something at the current Y position
                (for instance a line).
            </summary>
            <param name="canvas">the canvas on which you can draw</param>
            <param name="llx">the x coordinate of the left page margin</param>
            <param name="lly">the y coordinate of the bottom page margin</param>
            <param name="urx">the x coordinate of the right page margin</param>
            <param name="ury">the y coordinate of the top page margin</param>
            <param name="y">the current y position on the page</param>
        </member>
        <member name="T:iTextSharp.text.pdf.draw.LineSeparator">
            <summary>
                Element that draws a solid line from left to right.
                Can be added directly to a document or column.
                Can also be used to create a separator chunk.
                @author   Paulo Soares
                @since    2.1.2
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.#ctor(System.Single,System.Single,iTextSharp.text.BaseColor,System.Int32,System.Single)">
            <summary>
                Creates a new instance of the LineSeparator class.
            </summary>
            <param name="lineWidth">the thickness of the line</param>
            <param name="percentage">the width of the line as a percentage of the available page width</param>
            <param name="lineColor">the color of the line</param>
            <param name="align">the alignment</param>
            <param name="offset">the offset of the line relative to the current baseline (negative = under the baseline)</param>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.#ctor">
            <summary>
                Creates a new instance of the LineSeparator class with
                default values: lineWidth 1 user unit, width 100%, centered with offset 0.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.Alignment">
            <summary>
                Setter for the alignment of the line.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.LineWidth">
            <summary>
                Setter for the line width.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.Percentage">
            <summary>
                Setter for the width as a percentage of the available width.
            </summary>
            <returns>a width percentage</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.draw.DrawInterface#draw(com.lowagie.text.pdf.PdfContentByte, float, float, float, float,
                float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.DrawLine(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single)">
            <summary>
                Draws a horizontal line.
            </summary>
            <param name="canvas">the canvas to draw on</param>
            <param name="leftX">the left x coordinate</param>
            <param name="rightX">the right x coordindate</param>
            <param name="y">the y coordinate</param>
        </member>
        <member name="T:iTextSharp.text.pdf.draw.VerticalPositionMark">
            <summary>
                Helper class implementing the DrawInterface. Can be used to add
                horizontal or vertical separators. Won't draw anything unless
                you implement the draw method.
                @since   2.1.2
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.#ctor">
            <summary>
                Creates a vertical position mark that won't draw anything unless
                you define a DrawInterface.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Single)">
            <summary>
                Creates a vertical position mark that won't draw anything unless
                you define a DrawInterface.
            </summary>
            <param name="drawInterface">the drawInterface for this vertical position mark.</param>
            <param name="offset">the offset for this vertical position mark.</param>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.DrawInterface">
            <summary>
                Setter for the interface with the overruling Draw() method.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.Offset">
            <summary>
                Setter for the offset. The offset is relative to the current
                Y position. If you want to underline something, you have to
                choose a negative offset.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.draw.DrawInterface#draw(com.lowagie.text.pdf.PdfContentByte, float, float, float, float,
                float)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.Chunks">
            <summary>
                @see com.lowagie.text.Element#getChunks()
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.Type">
            <summary>
                @see com.lowagie.text.Element#type()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.Process(iTextSharp.text.IElementListener)">
            <summary>
                @see com.lowagie.text.Element#process(com.lowagie.text.ElementListener)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.EnumerateTtc">
            <summary>
                Enumerates all the fonts inside a True Type Collection.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.events.FieldPositioningEvents">
            <summary>
                Class for an index.
                @author Michael Niedermair
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.CellField">
            <summary>
                Keeps the form field that is to be positioned in a cellLayout event.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.FieldWriter">
            <summary>
                The PdfWriter to use when a field has to added in a cell event.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.GenericChunkFields">
            <summary>
                Keeps a map with fields that are to be positioned in inGenericTag.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor">
            <summary>
                Creates a new event. This constructor will be used if you need to position fields with Chunk objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Creates a new event. This constructor will be used if you need to position fields with a Cell Event.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfFormField,iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Creates a new event. This constructor will be used if you need to position fields with a Cell Event.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfWriter,System.String)">
            <summary>
                Creates a new event. This constructor will be used if you need to position fields with a Cell Event.
                @throws DocumentException
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfFormField,System.String)">
            <summary>
                Creates a new event. This constructor will be used if you need to position fields with a Cell Event.
                @throws DocumentException
                @throws IOException
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.events.FieldPositioningEvents.Padding">
            <summary>
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.events.FieldPositioningEvents.Parent">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle,
                com.lowagie.text.pdf.PdfContentByte[])
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.AddField(System.String,iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Add a PdfFormField that has to be tied to a generic Chunk.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            <summary>
                @see com.lowagie.text.pdf.PdfPageEvent#onGenericTag(com.lowagie.text.pdf.PdfWriter, com.lowagie.text.Document,
                com.lowagie.text.Rectangle, java.lang.String)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.events.IndexEvents">
            <summary>
                Class for an index.
                @author Michael Niedermair
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents._indexentry">
            <summary>
                the list for the index entry
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents._indextag">
            <summary>
                keeps the indextag with the pagenumber
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents._comparator">
            <summary>
                Comparator for sorting the index
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents._indexcounter">
            <summary>
                --------------------------------------------------------------------
            </summary>
            <summary>
                indexcounter
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(System.String,System.String,System.String,System.String)">
            <summary>
                Create an index entry.
            </summary>
            <param name="text">The text for the Chunk.</param>
            <param name="in1">The first level.</param>
            <param name="in2">The second level.</param>
            <param name="in3">The third level.</param>
            <returns>Returns the Chunk.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(System.String,System.String)">
            <summary>
                Create an index entry.
            </summary>
            <param name="text">The text for the Chunk.</param>
            <param name="in1">The first level.</param>
            <returns>Returns the Chunk.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(System.String,System.String,System.String)">
            <summary>
                Create an index entry.
            </summary>
            <param name="text">The text for the Chunk.</param>
            <param name="in1">The first level.</param>
            <param name="in2">The second level.</param>
            <returns>Returns the Chunk.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(iTextSharp.text.Chunk,System.String,System.String,System.String)">
            <summary>
                Create an index entry.
            </summary>
            <param name="text">The text.</param>
            <param name="in1">The first level.</param>
            <param name="in2">The second level.</param>
            <param name="in3">The third level.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(iTextSharp.text.Chunk,System.String)">
            <summary>
                Create an index entry.
            </summary>
            <param name="text">The text.</param>
            <param name="in1">The first level.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(iTextSharp.text.Chunk,System.String,System.String)">
            <summary>
                Create an index entry.
            </summary>
            <param name="text">The text.</param>
            <param name="in1">The first level.</param>
            <param name="in2">The second level.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.GetSortedEntries">
            <summary>
                Returns the sorted list with the entries and the collected page numbers.
            </summary>
            <returns>Returns the sorted list with the entries and teh collected page numbers.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            <summary>
                All the text that is passed to this event, gets registered in the indexentry.
                @see com.lowagie.text.pdf.PdfPageEventHelper#onGenericTag(
                com.lowagie.text.pdf.PdfWriter, com.lowagie.text.Document,
                com.lowagie.text.Rectangle, java.lang.String)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.SetComparator(System.Collections.Generic.IComparer{iTextSharp.text.pdf.events.IndexEvents.Entry})">
            <summary>
                Set the comparator.
            </summary>
            <param name="aComparator">The comparator to set.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.events.IndexEvents.Entry">
            <summary>
                --------------------------------------------------------------------
            </summary>
            <summary>
                Class for an index entry.
                In the first step, only in1, in2,in3 and tag are used.
                After the collections of the index entries, pagenumbers are used.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry._in1">
            <summary>
                first level
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry._in2">
            <summary>
                second level
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry._in3">
            <summary>
                third level
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry._pagenumbers">
            <summary>
                the lsit of all page numbers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry._tag">
            <summary>
                the tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry._tags">
            <summary>
                the lsit of all tags.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.#ctor(System.String,System.String,System.String,System.String,iTextSharp.text.pdf.events.IndexEvents)">
            <summary>
                Create a new object.
            </summary>
            <param name="aIn1">The first level.</param>
            <param name="aIn2">The second level.</param>
            <param name="aIn3">The third level.</param>
            <param name="aTag">The tag.</param>
            <param name="parent"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.AddPageNumberAndTag(System.Int32,System.String)">
            <summary>
                Add a pagenumber.
            </summary>
            <param name="number">The page number.</param>
            <param name="tag"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetIn1">
            <summary>
                Returns the in1.
            </summary>
            <returns>Returns the in1.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetIn2">
            <summary>
                Returns the in2.
            </summary>
            <returns>Returns the in2.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetIn3">
            <summary>
                Returns the in3.
            </summary>
            <returns>Returns the in3.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetKey">
            <summary>
                Returns the key for the map-entry.
            </summary>
            <returns>Returns the key for the map-entry.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetPageNumber">
            <summary>
                Returns the pagenumer for this entry.
            </summary>
            <returns>Returns the pagenumer for this entry.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetPagenumbers">
            <summary>
                Returns the pagenumbers.
            </summary>
            <returns>Returns the pagenumbers.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetTag">
            <summary>
                Returns the tag.
            </summary>
            <returns>Returns the tag.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetTags">
            <summary>
                Returns the tags.
            </summary>
            <returns>Returns the tags.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.ToString">
            <summary>
                print the entry (only for test)
            </summary>
            <returns>the toString implementation of the entry</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.events.PdfPageEventForwarder">
            <summary>
                If you want to add more than one page eventa to a PdfWriter,
                you have to construct a PdfPageEventForwarder, add the
                different events to this object and add the forwarder to
                the PdfWriter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.PdfPageEventForwarder.Events">
            <summary>
                ArrayList containing all the PageEvents that have to be executed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)">
            <summary>
                Called when a Chapter is written.
                position  will hold the height at which the chapter will be
                written to.
                the  PdfWriter  for this document
                the document
                the position the chapter will be written to
                the title of the Chapter
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="paragraphPosition"></param>
            <param name="title"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when the end of a Chapter is reached.
                position  will hold the height of the end of the chapter.
                the  PdfWriter  for this document
                the document
                the position of the end of the chapter.
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="position"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when the document is closed.
                Note that this method is called with the page number equal to the last
                page plus one.
                the  PdfWriter  for this document
                the document
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when a page is finished, just before being written to the
                document.
                the  PdfWriter  for this document
                the document
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            <summary>
                Called when a  Chunk  with a generic tag is written.
                It is usefull to pinpoint the  Chunk  location to generate
                bookmarks, for example.
                the  PdfWriter  for this document
                the document
                the  Rectangle  containing the  Chunk
                the text of the tag
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="rect"></param>
            <param name="text"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when the document is opened.
                the  PdfWriter  for this document
                the document
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when a Paragraph is written.
                paragraphPosition  will hold the height at which the
                paragraph will be written to. This is useful to insert bookmarks with
                more control.
                the  PdfWriter  for this document
                the document
                the position the paragraph will be written to
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="paragraphPosition"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when a Paragraph is written.
                paragraphPosition  will hold the height of the end of the
                paragraph.
                the  PdfWriter  for this document
                the document
                the position of the end of the paragraph
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="paragraphPosition"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)">
            <summary>
                Called when a Section is written.
                position  will hold the height at which the section will be
                written to.
                the  PdfWriter  for this document
                the document
                the position the section will be written to
                the number depth of the Section
                the title of the section
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="paragraphPosition"></param>
            <param name="depth"></param>
            <param name="title"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when the end of a Section is reached.
                position  will hold the height of the section end.
                the  PdfWriter  for this document
                the document
                the position of the end of the section
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
            <param name="position"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when a page is initialized.
                Note that if even if a page is not written this method is still called.
                It is preferable to use  onEndPage  to avoid infinite loops.
                the  PdfWriter  for this document
                the document
            </summary>
            <param name="writer"></param>
            <param name="document"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.AddPageEvent(iTextSharp.text.pdf.IPdfPageEvent)">
            <summary>
                Add a page eventa to the forwarder.
            </summary>
            <param name="eventa">an eventa that has to be added to the forwarder.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.events.PdfPCellEventForwarder">
            <summary>
                If you want to add more than one event to a cell,
                you have to construct a PdfPCellEventForwarder, add the
                different events to this object and add the forwarder to
                the PdfPCell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.PdfPCellEventForwarder.Events">
            <summary>
                ArrayList containing all the PageEvents that have to be executed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPCellEventForwarder.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle,
                com.lowagie.text.pdf.PdfContentByte[])
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPCellEventForwarder.AddCellEvent(iTextSharp.text.pdf.IPdfPCellEvent)">
            <summary>
                Add a page event to the forwarder.
            </summary>
            <param name="eventa">an event that has to be added to the forwarder.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.events.PdfPTableEventForwarder">
            <summary>
                If you want to add more than one page event to a PdfPTable,
                you have to construct a PdfPTableEventForwarder, add the
                different events to this object and add the forwarder to
                the PdfWriter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.events.PdfPTableEventForwarder.Events">
            <summary>
                ArrayList containing all the PageEvents that have to be executed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPTableEventForwarder.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                @see com.lowagie.text.pdf.PdfPTableEvent#tableLayout(com.lowagie.text.pdf.PdfPTable, float[][], float[], int, int,
                com.lowagie.text.pdf.PdfContentByte[])
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPTableEventForwarder.AddTableEvent(iTextSharp.text.pdf.IPdfPTableEvent)">
            <summary>
                Add a page event to the forwarder.
            </summary>
            <param name="eventa">an event that has to be added to the forwarder.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.ExtendedColor">
            <summary>
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.FdfReader">
            <summary>
                Reads an FDF form and makes the fields available
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.String)">
            <summary>
                Reads an FDF form.
                @throws IOException on error
            </summary>
            <param name="filename">the file name of the form</param>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.Byte[])">
            <summary>
                Reads an FDF form.
                @throws IOException on error
            </summary>
            <param name="pdfIn">the byte array with the form</param>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.Uri)">
            <summary>
                Reads an FDF form.
                @throws IOException on error
            </summary>
            <param name="url">the URL of the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.IO.Stream)">
            <summary>
                Reads an FDF form.
                end but is not closed
                @throws IOException on error
            </summary>
            <param name="isp">the  InputStream  containing the document. The stream is read to the</param>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfReader.Fields">
            <summary>
                Gets all the fields. The map is keyed by the fully qualified
                field name and the value is a merged  PdfDictionary
                with the field content.
            </summary>
            <returns>all the fields</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfReader.FileSpec">
            <summary>
                Gets the PDF file specification contained in the FDF.
            </summary>
            <returns>the PDF file specification contained in the FDF</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.GetField(System.String)">
            <summary>
                Gets the field dictionary.
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.GetFieldValue(System.String)">
            <summary>
                Gets the field value or  null  if the field does not
                exist or has no value defined.
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field value or  null </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.FdfWriter">
            <summary>
                Writes an FDF form.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FdfWriter._file">
            <summary>
                The PDF file associated with the FDF.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfWriter.File">
            <summary>
                Gets the PDF file name associated with the FDF.
            </summary>
            <returns>the PDF file name associated with the FDF</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.GetField(System.String)">
            <summary>
                Gets the field value.
            </summary>
            <param name="field">the field name</param>
            <returns>the field value or  null  if not found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.GetFields">
            <summary>
                Gets all the fields. The map is keyed by the fully qualified
                field name and the values are  PdfObject .
            </summary>
            <returns>a map with all the fields</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.RemoveField(System.String)">
            <summary>
                Removes the field value.
                false  otherwise
            </summary>
            <param name="field">the field name</param>
            <returns> true  if the field was found and removed,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsAction(System.String,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Sets the field value as a  PDFAction .
                For example, this method allows setting a form submit button action using {@link PdfAction#createSubmitForm(String,
                Object[], int)}.
                This method creates an  A  entry for the specified field in the underlying FDF file.
                Method contributed by Philippe Laflamme (plaflamme)
                false  if the name is incompatible with
                an existing field
                @since	2.1.5
            </summary>
            <param name="field">the fully qualified field name</param>
            <param name="action">the field's action</param>
            <returns> true  if the value was inserted,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsName(System.String,System.String)">
            <summary>
                Sets the field value as a name.
                false  if the name is incompatible with
                an existing field
            </summary>
            <param name="field">the fully qualified field name</param>
            <param name="value">the value</param>
            <returns> true  if the value was inserted,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsString(System.String,System.String)">
            <summary>
                Sets the field value as a string.
                false  if the name is incompatible with
                an existing field
            </summary>
            <param name="field">the fully qualified field name</param>
            <param name="value">the value</param>
            <returns> true  if the value was inserted,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.FdfReader)">
            <summary>
                Sets all the fields from this  FdfReader
            </summary>
            <param name="fdf">the  FdfReader </param>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Sets all the fields from this  PdfReader
            </summary>
            <param name="pdf">the  PdfReader </param>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.AcroFields)">
            <summary>
                Sets all the fields from this  AcroFields
            </summary>
            <param name="af">the  AcroFields </param>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.WriteTo(System.IO.Stream)">
            <summary>
                Writes the content to a stream.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="os">the stream</param>
        </member>
        <member name="T:iTextSharp.text.pdf.FontDetails">
            <summary>
                Each font in the document will have an instance of this class
                where the characters used will be represented.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._baseFont">
            <summary>
                The font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._fontName">
            <summary>
                The font name that appears in the document body stream
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._fontType">
            <summary>
                The font type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._indirectReference">
            <summary>
                The indirect reference to this font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._longTag">
            <summary>
                The map used with double byte encodings. The key is Int(glyph) and the
                value is int[]{glyph, width, Unicode code}
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._shortTag">
            <summary>
                The array used with single byte encodings
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._symbolic">
            <summary>
                true  if the font is symbolic
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails._ttu">
            <summary>
                The font if its an instance of  TrueTypeFontUnicode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.subset">
            <summary>
                Indicates if all the glyphs and widths for that particular
                encoding should be included in the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.BaseFont)">
            <summary>
                Each font used in a document has an instance of this class.
                This class stores the characters used in the document and other
                specifics unique to the current working document.
            </summary>
            <param name="fontName">the font name</param>
            <param name="indirectReference">the indirect reference to the font</param>
            <param name="baseFont">the  BaseFont </param>
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.Subset">
            <summary>
                Indicates if all the glyphs and widths for that particular
                encoding should be included in the document. Set to  false
                to include all.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.BaseFont">
            <summary>
                Gets the  BaseFont  of this font.
            </summary>
            <returns>the  BaseFont  of this font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.FontName">
            <summary>
                Gets the font name as it appears in the document body.
            </summary>
            <returns>the font name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.IndirectReference">
            <summary>
                Gets the indirect reference to this font.
            </summary>
            <returns>the indirect reference to this font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.ConvertToBytes(System.String)">
            <summary>
                Converts the text into bytes to be placed in the document.
                The conversion is done according to the font and the encoding and the characters
                used are stored.
            </summary>
            <param name="text">the text to convert</param>
            <returns>the conversion</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.WriteFont(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Writes the font definition to the document.
            </summary>
            <param name="writer">the  PdfWriter  of this document</param>
        </member>
        <member name="T:iTextSharp.text.pdf.FontSelector">
            <summary>
                Selects the appropriate fonts that contain the glyphs needed to
                render text correctly. The fonts are checked in order until the
                character is found.
                The built in fonts "Symbol" and "ZapfDingbats", if used, have a special encoding
                to allow the characters to be referred by Unicode.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.FontSelector.AddFont(iTextSharp.text.Font)">
            <summary>
                Adds a  Font  to be searched for valid characters.
            </summary>
            <param name="font">the  Font </param>
        </member>
        <member name="M:iTextSharp.text.pdf.FontSelector.Process(System.String)">
            <summary>
                Process the text so that it will render with a combination of fonts
                if needed.
            </summary>
            <param name="text">the text</param>
            <returns>a  Phrase  with one or more chunks</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.GlyphList">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.GrayColor">
            <summary>
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.HyphenationAuto">
            <summary>
                Hyphenates words automatically accordingly to the language and country.
                The hyphenator engine was taken from FOP and uses the TEX patterns. If a language
                is not provided and a TEX pattern for it exists, it can be easily adapted.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.HyphenationAuto.Hyphenator">
            <summary>
                The hyphenator engine.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.HyphenationAuto.Post">
            <summary>
                The second part of the hyphenated word.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.HyphenationAuto.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                Creates a new hyphenation instance usable in  Chunk .
            </summary>
            <param name="lang">the language ("en" for english, for example)</param>
            <param name="country">the country ("GB" for Great-Britain or "none" for no country, for example)</param>
            <param name="leftMin">the minimun number of letters before the hyphen</param>
            <param name="rightMin">the minimun number of letters after the hyphen</param>
        </member>
        <member name="P:iTextSharp.text.pdf.HyphenationAuto.HyphenatedWordPost">
            <summary>
                Gets the second part of the hyphenated word. Must be called
                after  getHyphenatedWordPre() .
            </summary>
            <returns>the second part of the hyphenated word</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.HyphenationAuto.HyphenSymbol">
            <summary>
                Gets the hyphen symbol.
            </summary>
            <returns>the hyphen symbol</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.HyphenationAuto.GetHyphenatedWordPre(System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single)">
            <summary>
                Hyphenates a word and returns the first part of it. To get
                the second part of the hyphenated word call  getHyphenatedWordPost() .
                the hyphen symbol, if any
            </summary>
            <param name="word">the word to hyphenate</param>
            <param name="font">the font used by this word</param>
            <param name="fontSize">the font size used by this word</param>
            <param name="remainingWidth">the width available to fit this word in</param>
            <returns>the first part of the hyphenated word including</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.ByteVector">
            <summary>
                This class implements a simple byte vector with access to the
                underlying array.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector._defaultBlockSize">
            <summary>
                Capacity increment size
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector._n">
            <summary>
                Points to next free item
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Arr">
            <summary>
                The encapsulated array
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Capacity">
            <summary>
                returns current capacity of array
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Length">
            <summary>
                return number of items in array
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.ByteVector.Alloc(System.Int32)">
            <summary>
                This is to implement memory allocation in the array. Like Malloc().
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.CharVector">
            <summary>
                This class implements a simple char vector with access to the
                underlying array.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector._defaultBlockSize">
            <summary>
                Capacity increment size
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector._n">
            <summary>
                Points to next free item
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Arr">
            <summary>
                The encapsulated array
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Capacity">
            <summary>
                returns current capacity of array
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Length">
            <summary>
                return number of items in array
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.CharVector.Clear">
            <summary>
                Reset Vector but don't resize or clear elements
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.Hyphen">
            <summary>
                This class represents a hyphen. A 'full' hyphen is made of 3 parts:
                the pre-break text, post-break text and no-break. If no line-break
                is generated at this position, the no-break text is used, otherwise,
                pre-break and post-break are used. Typically, pre-break is equal to
                the hyphen character and the others are empty. However, this general
                scheme allows support for cases in some languages where words change
                spelling if they're split across lines, like german's 'backen' which
                hyphenates 'bak-ken'. BTW, this comes from TeX.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.Hyphenation">
            <summary>
                This class represents a hyphenated word.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.Hyphenation._len">
            <summary>
                number of hyphenation points in word
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.#ctor(System.String,System.Int32[])">
            <summary>
                rawWord as made of alternating strings and {@link Hyphen Hyphen}
                instances
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.Hyphenation.Length">
            <summary>
            </summary>
            <returns>the number of hyphenation points in the word</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.Hyphenation.HyphenationPoints">
            <summary>
            </summary>
            <returns>the hyphenation points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.GetPreHyphenText(System.Int32)">
            <summary>
            </summary>
            <returns>the pre-break text, not including the hyphen character</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.GetPostHyphenText(System.Int32)">
            <summary>
            </summary>
            <returns>the post-break text</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.HyphenationException">
            <summary>
                @author Carlos Villegas
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.HyphenationTree">
            <summary>
                This tree structure stores the hyphenation patterns in an efficient
                way for fast lookup. It provides the provides the method to
                hyphenate a word.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree._ivalues">
            <summary>
                Temporary map to store interletter values on pattern loading.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.Classmap">
            <summary>
                This map stores the character classes
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.Stoplist">
            <summary>
                This map stores hyphenation exceptions
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.Vspace">
            <summary>
                value space: stores the inteletter values
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddClass(System.String)">
            <summary>
                Add a character class to the tree. It is used by
                {@link SimplePatternParser SimplePatternParser} as callback to
                add character classes. Character classes define the
                valid word characters for hyphenation. If a word contains
                a character not defined in any of the classes, it is not hyphenated.
                It also defines a way to normalize the characters in order
                to compare them with the stored patterns. Usually pattern
                files use only lower case characters, in this case a class
                for letter 'a', for example, should be defined as "aA", the first
                character being the normalization char.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddPattern(System.String,System.String)">
            <summary>
                Add a pattern to the tree. Mainly, to be used by
                {@link SimplePatternParser SimplePatternParser} class as callback to
                add a pattern to the tree.
                desirability and priority of hyphenating at a given point
                within the pattern. It should contain only digit characters.
                (i.e. '0' to '9').
            </summary>
            <param name="pattern">the hyphenation pattern</param>
            <param name="ivalue">interletter weight values indicating the</param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddException(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
                Add an exception to the tree. It is used by
                {@link SimplePatternParser SimplePatternParser} class as callback to
                store the hyphenation exceptions.
                {@link Hyphen hyphen} objects.
            </summary>
            <param name="word">normalized word</param>
            <param name="hyphenatedword">a vector of alternating strings and</param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.PackValues(System.String)">
            <summary>
                Packs the values by storing them in 4 bits, two values into a byte
                Values range is from 0 to 9. We use zero as terminator,
                so we'll add 1 to the value.
                interletter values.
                are stored.
            </summary>
            <param name="values">a string of digits from '0' to '9' representing the</param>
            <returns>the index into the vspace array where the packed values</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hstrcmp(System.Char[],System.Int32,System.Char[],System.Int32)">
            <summary>
                String compare, returns 0 if equal or
                t is a substring of s
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.SearchPatterns(System.Char[],System.Int32,System.Byte[])">
            <summary>
                Search for all possible partial matches of word starting
                at index an update interletter values.
                But it is done in an efficient way since the patterns are
                stored in a ternary tree. In fact, this is the whole purpose
                of having the tree: doing this search without having to test
                every single pattern. The number of patterns for languages
                such as English range from 4000 to 10000. Thus, doing thousands
                of string comparisons for each word to hyphenate would be
                really slow without the tree. The tradeoff is memory, but
                using a ternary tree instead of a trie, almost halves the
                the memory used by Lout or TeX. It's also faster than using
                a hash table
            </summary>
            <param name="word">null terminated word to match</param>
            <param name="index">start index from word</param>
            <param name="il">interletter values array to update</param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hyphenate(System.String,System.Int32,System.Int32)">
            <summary>
                Hyphenate word and return a Hyphenation object.
                before the hyphenation point.
                the hyphenation point.
                the hyphenated word or null if word is not hyphenated.
            </summary>
            <param name="word">the word to be hyphenated</param>
            <param name="remainCharCount">Minimum number of characters allowed</param>
            <param name="pushCharCount">Minimum number of characters allowed after</param>
            <returns>a {@link Hyphenation Hyphenation} object representing</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hyphenate(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                w = "****nnllllllnnn*****",
                where n is a non-letter, l is a letter,
                all n may be absent, the first n is at offset,
                the first l is at offset + iIgnoreAtBeginning;
                word = ".llllll.'\0'***",
                where all l in w are copied into word.
                In the first part of the routine len = w.length,
                in the second part of the routine len = word.length.
                Three indices are used:
                Index(w), the index in w,
                Index(word), the index in word,
                Letterindex(word), the index in the letter part of word.
                The following relations exist:
                Index(w) = offset + i - 1
                Index(word) = i - iIgnoreAtBeginning
                Letterindex(word) = Index(word) - 1
                (see first loop).
                It follows that:
                Index(w) - Index(word) = offset - 1 + iIgnoreAtBeginning
                Index(w) = Letterindex(word) + offset + iIgnoreAtBeginning
            </summary>
            <summary>
                Hyphenate word and return an array of hyphenation points.
                before the hyphenation point.
                the hyphenation point.
                the hyphenated word or null if word is not hyphenated.
            </summary>
            <param name="w">char array that contains the word</param>
            <param name="offset">Offset to first character in word</param>
            <param name="len">Length of word</param>
            <param name="remainCharCount">Minimum number of characters allowed</param>
            <param name="pushCharCount">Minimum number of characters allowed after</param>
            <returns>a {@link Hyphenation Hyphenation} object representing</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.Hyphenator">
            <summary>
                This class is the main entry point to the hyphenation package.
                You can use only the static methods or create an instance.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="lang"></param>
            <param name="country"></param>
            <param name="leftMin"></param>
            <param name="rightMin"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.GetHyphenationTree(System.String,System.String)">
            <summary>
            </summary>
            <param name="lang"></param>
            <param name="country"></param>
            <returns>the hyphenation tree</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.GetResourceHyphenationTree(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns>a hyphenation tree</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="lang"></param>
            <param name="country"></param>
            <param name="word"></param>
            <param name="leftMin"></param>
            <param name="rightMin"></param>
            <returns>a hyphenation object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String,System.String,System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="lang"></param>
            <param name="country"></param>
            <param name="word"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <param name="leftMin"></param>
            <param name="rightMin"></param>
            <returns>a hyphenation object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.Char[],System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="word"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns>a hyphenation object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String)">
            <summary>
            </summary>
            <param name="word"></param>
            <returns>a hyphenation object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetLanguage(System.String,System.String)">
            <summary>
            </summary>
            <param name="lang"></param>
            <param name="country"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetMinPushCharCount(System.Int32)">
            <summary>
            </summary>
            <param name="min"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetMinRemainCharCount(System.Int32)">
            <summary>
            </summary>
            <param name="min"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.IPatternConsumer">
            <summary>
                This interface is used to connect the XML pattern file parser to
                the hyphenation tree.
                @author Carlos Villegas
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddClass(System.String)">
            <summary>
                Add a character class.
                A character class defines characters that are considered
                equivalent for the purpose of hyphenation (e.g. "aA"). It
                usually means to ignore case.
            </summary>
            <param name="chargroup">character group</param>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddException(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
                Add a hyphenation exception. An exception replaces the
                result obtained by the algorithm for cases for which this
                fails or the user wants to provide his own hyphenation.
                A hyphenatedword is a vector of alternating String's and
                {@link Hyphen Hyphen} instances
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddPattern(System.String,System.String)">
            <summary>
                Add hyphenation patterns.
                digit characters.
            </summary>
            <param name="pattern">the pattern</param>
            <param name="values">interletter values expressed as a string of</param>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.SimplePatternParser">
            <summary>
                Parses the xml hyphenation pattern.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.SimplePatternParser.#ctor">
            <summary>
                Creates a new instance of PatternParser2
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.TernaryTree">
            <summary>
                <h2>Ternary Search Tree</h2>
                A ternary search tree is a hibrid between a binary tree and
                a digital search tree (trie). Keys are limited to strings.
                A data value of type char is stored in each leaf node.
                It can be used as an index (or pointer) to the data.
                Branches that only contain one key are compressed to one node
                by storing a pointer to the trailer substring of the key.
                This class is intended to serve as base class or helper class
                to implement Dictionary collections or the like. Ternary trees
                have some nice properties as the following: the tree can be
                traversed in sorted order, partial matches (wildcard) can be
                implemented, retrieval of all keys within a given distance
                from the target, etc. The storage requirements are higher than
                a binary tree but a lot less than a trie. Performance is
                comparable with a hash table, sometimes it outperforms a hash
                function (most of the time can determine a miss faster than a hash).
                The main purpose of this java port is to serve as a base for
                implementing TeX's hyphenation algorithm (see The TeXBook,
                appendix H). Each language requires from 5000 to 15000 hyphenation
                patterns which will be keys in this tree. The strings patterns
                are usually small (from 2 to 5 characters), but each char in the
                tree is stored in a node. Thus memory usage is the main concern.
                We will sacrify 'elegance' to keep memory requirenments to the
                minimum. Using java's char type as pointer (yes, I know pointer
                it is a forbidden word in java) we can keep the size of the node
                to be just 8 bytes (3 pointers and the data char). This gives
                room for about 65000 nodes. In my tests the english patterns
                took 7694 nodes and the german patterns 10055 nodes,
                so I think we are safe.
                All said, this is a map with strings as keys and char as value.
                Pretty limited!. It can be extended to a general map by
                using the string representation of an object and using the
                char value as an index to an array that contains the object
                values.
                @author cav@uniscope.co.jp
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.BlockSize">
            <summary>
                We use 4 arrays to represent a node. I guess I should have created
                a proper node class, but somehow Knuth's pascal code made me forget
                we now have a portable language with memory management and
                automatic garbage collection! And now is kind of late, furthermore,
                if it ain't broken, don't fix it.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Eq">
            <summary>
                Pointer to equal branch and to data when this node is a string terminator.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Hi">
            <summary>
                Pointer to high branch.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Kv">
            <summary>
                This vector holds the trailing of the keys when the branch is compressed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Lo">
            <summary>
                Pointer to low branch and to rest of the key when it is
                stored directly in this node, we don't have unions in java!
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Sc">
            <summary>
                The character stored in this node: splitchar
                Two special values are reserved:
                0x0000 as string terminator
                0xFFFF to indicate that the branch starting at
                this node is compressed
                This shouldn't be a problem if we give the usual semantics to
                strings since 0xFFFF is garanteed not to be an Unicode character.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Strcmp(System.Char[],System.Int32,System.Char[],System.Int32)">
            <summary>
                Compares 2 null terminated char arrays
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Strcmp(System.String,System.Char[],System.Int32)">
            <summary>
                Compares a string with null terminated char array
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Balance">
            <summary>
                Balance the tree for best search performance
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Insert(System.String,System.Char)">
            <summary>
                Branches are initially compressed, needing
                one node per key plus the size of the string
                key. They are decompressed as needed when
                another key with same prefix
                is inserted. This saves a lot of space,
                specially for long keys.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.TrimToSize">
            <summary>
                Each node stores a character (splitchar) which is part of
                some Key(s). In a compressed branch (one that only contain
                a single string key) the trailer of the key which is not
                already in nodes is stored  externally in the kv array.
                As items are inserted, key substrings decrease.
                Some substrings may completely  disappear when the whole
                branch is totally decompressed.
                The tree is traversed to find the key substrings actually
                used. In addition, duplicate substrings are removed using
                a map (implemented with a TernaryTree!).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.InsertBalanced(System.String[],System.Char[],System.Int32,System.Int32)">
            <summary>
                Recursively insert the median first and then the median of the
                lower and upper halves, and so on in order to get a balanced
                tree. The array of keys is assumed to be sorted in ascending
                order.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.insert(System.Char,System.Char[],System.Int32,System.Char)">
            <summary>
                The actual insertion function, recursive version.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.redimNodeArrays(System.Int32)">
            <summary>
                redimension the arrays
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator._ks">
            <summary>
                key stack implemented with a StringBuilder
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator._ns">
            <summary>
                Node stack
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator._parent">
            <summary>
                TernaryTree parent
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator._cur">
            <summary>
                current node index
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator._curkey">
            <summary>
                current key
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.run">
            <summary>
                traverse the tree to find next key
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.up">
            <summary>
                traverse upwards
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.IccProfile">
            <summary>
                Summary description for ICC_Profile.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.IExtraEncoding">
            <summary>
                Classes implementing this interface can create custom encodings or
                replace existing ones. It is used in the context of  PdfEncoding .
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.ByteToChar(System.Byte[],System.String)">
            <summary>
                Converts a byte array to an Unicode string according to some encoding.
                supports more than one encoding.
            </summary>
            <param name="b">the input byte array</param>
            <param name="encoding">the requested encoding. It's mainly of use if the same class</param>
            <returns>the conversion or  null  if no conversion is supported</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.CharToByte(System.String,System.String)">
            <summary>
                Converts an Unicode string to a byte array according to some encoding.
                supports more than one encoding.
            </summary>
            <param name="text">the Unicode string</param>
            <param name="encoding">the requested encoding. It's mainly of use if the same class</param>
            <returns>the conversion or  null  if no conversion is supported</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.CharToByte(System.Char,System.String)">
            <summary>
                Converts an Unicode char to a byte array according to some encoding.
                supports more than one encoding.
            </summary>
            <param name="char1">the Unicode char</param>
            <param name="encoding">the requested encoding. It's mainly of use if the same class</param>
            <returns>the conversion or  null  if no conversion is supported</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.IHyphenationEvent">
            <summary>
                Called by  Chunk  to hyphenate a word.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.IHyphenationEvent.HyphenatedWordPost">
            <summary>
                Gets the second part of the hyphenated word. Must be called
                after  getHyphenatedWordPre() .
            </summary>
            <returns>the second part of the hyphenated word</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.IHyphenationEvent.HyphenSymbol">
            <summary>
                Gets the hyphen symbol.
            </summary>
            <returns>the hyphen symbol</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.IHyphenationEvent.GetHyphenatedWordPre(System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single)">
            <summary>
                Hyphenates a word and returns the first part of it. To get
                the second part of the hyphenated word call  getHyphenatedWordPost() .
                the hyphen symbol, if any
            </summary>
            <param name="word">the word to hyphenate</param>
            <param name="font">the font used by this word</param>
            <param name="fontSize">the font size used by this word</param>
            <param name="remainingWidth">the width available to fit this word in</param>
            <returns>the first part of the hyphenated word including</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfAnnotations.AcroForm">
            <summary>
                Use this methods to get the AcroForm object.
                Use this method only if you know what you're doing
            </summary>
            <returns>the PdfAcroform object of the PdfDocument</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfAnnotations.SigFlags">
            <summary>
                Use this method to set the signature flags.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfAnnotations.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            <summary>
                Use this methods to add a  PdfAnnotation  or a  PdfFormField
                to the document. Only the top parent of a  PdfFormField
                needs to be added.
            </summary>
            <param name="annot">the  PdfAnnotation  or the  PdfFormField  to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfAnnotations.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Use this method to adds the  PdfAnnotation
                to the calculation order array.
            </summary>
            <param name="annot">the  PdfAnnotation  to be added</param>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfDocumentActions">
            <summary>
                A PDF document can have an open action and other additional actions.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfDocumentActions.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Additional-actions defining the actions to be taken in
                response to various trigger events affecting the document
                as a whole. The actions types allowed are:  DOCUMENT_CLOSE ,
                WILL_SAVE ,  DID_SAVE ,  WILL_PRINT
                and  DID_PRINT .
                @throws DocumentException on invalid action type
            </summary>
            <param name="actionType">the action type</param>
            <param name="action">the action to execute in response to the trigger</param>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfDocumentActions.SetOpenAction(System.String)">
            <summary>
                When the document opens it will jump to the destination with
                this name.
            </summary>
            <param name="name">the name of the destination to jump to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfDocumentActions.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            <summary>
                When the document opens this  action  will be
                invoked.
            </summary>
            <param name="action">the action to be invoked</param>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfEncryptionSettings">
            <summary>
                Encryption settings are described in section 3.5 (more specifically
                section 3.5.2) of the PDF Reference 1.7.
                They are explained in section 3.3.3 of the book 'iText in Action'.
                The values of the different  preferences were originally stored
                in class PdfWriter, but they have been moved to this separate interface
                for reasons of convenience.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfEncryptionSettings.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfEncryptionSettings.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            <summary>
                Sets the certificate encryption options for this document. An array of one or more public certificates
                must be provided together with an array of the same size for the permissions for each certificate.
                The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="certs">the public certificates to be used for the encryption</param>
            <param name="permissions">the user permissions for each of the certicates</param>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfPageActions">
            <summary>
                A PDF page can have an open and/or close action.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfPageActions.Duration">
            <summary>
                Sets the display duration for the page (for presentations)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfPageActions.Transition">
            <summary>
                Sets the transition for the page
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfPageActions.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Sets the open and close page additional action.
                or  PdfWriter.PAGE_CLOSE
                @throws DocumentException if the action type is invalid
            </summary>
            <param name="actionType">the action type. It can be  PdfWriter.PAGE_OPEN </param>
            <param name="action">the action to perform</param>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfRunDirection.RunDirection">
            <summary>
                Sets the run direction. This is only used as a placeholder
                as it does not affect anything.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfVersion">
            <summary>
                The PDF version is described in the PDF Reference 1.7 p92
                (about the PDF Header) and page 139 (the version entry in
                the Catalog). You'll also find info about setting the version
                in the book 'iText in Action' sections 2.1.3 (PDF Header)
                and 3.3 (Version history).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfVersion.PdfVersion">
            <summary>
                If the PDF Header hasn't been written yet,
                this changes the version as it will appear in the PDF Header.
                If the PDF header was already written to the Stream,
                this changes the version as it will appear in the Catalog.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfVersion.AddDeveloperExtension(iTextSharp.text.pdf.PdfDeveloperExtension)">
            <summary>
                Adds a developer extension to the Extensions dictionary
                in the Catalog.
                @since    2.1.6
            </summary>
            <param name="de">an object that contains the extensions prefix and dictionary</param>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfVersion.SetAtLeastPdfVersion(System.Char)">
            <summary>
                If the PDF Header hasn't been written yet,
                this changes the version as it will appear in the PDF Header,
                but only if param refers to a higher version.
                If the PDF header was already written to the Stream,
                this changes the version as it will appear in the Catalog.
            </summary>
            <param name="version">a character representing the PDF version</param>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfVersion.SetPdfVersion(iTextSharp.text.pdf.PdfName)">
            <summary>
                Sets the PDF version as it will appear in the Catalog.
                Note that this only has effect if you use a later version
                than the one that appears in the header; this method
                ignores the parameter if you try to set a lower version.
            </summary>
            <param name="version">the PDF name that will be used for the Version key in the catalog</param>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfViewerPreferences">
            <summary>
                Viewer preferences are described in section 3.6.1 and 8.1 of the
                PDF Reference 1.7 (Table 3.25 on p139-142 and Table 8.1 on p579-581).
                They are explained in section 13.1 of the book 'iText in Action'.
                The values of the different preferences were originally stored
                in class PdfWriter, but they have been moved to this separate interface
                for reasons of convenience.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfViewerPreferences.ViewerPreferences">
            <summary>
                Sets the page layout and page mode preferences by ORing one or two of these constants.
                The page layout to be used when the document is opened (choose one).
                PAGE_LAYOUT_SINGLE_PAGE  - Display one page at a time. (default)
                PAGE_LAYOUT_ONE_COLUMN  - Display the pages in one column.
                PAGE_LAYOUT_TWO_COLUMN_LEFT  - Display the pages in two columns, with
                oddnumbered pages on the left.
                PAGE_LAYOUT_TWO_COLUMN_RIGHT  - Display the pages in two columns, with
                oddnumbered pages on the right.
                PAGE_LAYOUT_TWO_PAGE_LEFT  - Display the pages two at a time, with
                oddnumbered pages on the left.
                PAGE_LAYOUT_TWO_PAGE_RIGHT  - Display the pages two at a time, with
                oddnumbered pages on the right.
                The page mode how the document should be displayed
                when opened (choose one).
                PAGE_MODE_USE_NONE  - Neither document outline nor thumbnail images visible. (default)
                PAGE_MODE_USE_OUTLINES  - Document outline visible.
                PAGE_MODE_USE_THUMBS  - Thumbnail images visible.
                PAGE_MODE_FULL_SCREEN  - Full-screen mode, with no menu bar, window
                controls, or any other window visible.
                PAGE_MODE_USE_OC  - Optional content group panel visible
                PAGE_MODE_USE_ATTACHMENTS  - Attachments panel visible
                For backward compatibility these values are also supported,
                but it's better to use method  addViewerPreference(key, value)
                if you want to change the following preferences:
                HIDE_TOOLBAR  - A flag specifying whether to hide the viewer application's tool
                bars when the document is active.
                HIDE_MENUBAR  - A flag specifying whether to hide the viewer application's
                menu bar when the document is active.
                HIDE_WINDOW_UI  - A flag specifying whether to hide user interface elements in
                the document's window (such as scroll bars and navigation controls),
                leaving only the document's contents displayed.
                FIT_WINDOW  - A flag specifying whether to resize the document's window to
                fit the size of the first displayed page.
                CENTER_WINDOW  - A flag specifying whether to position the document's window
                in the center of the screen.
                DISPLAY_DOC_TITLE  - A flag specifying whether to display the document's title
                in the top bar.
                The predominant reading order for text. This entry has no direct effect on the
                document's contents or page numbering, but can be used to determine the relative
                positioning of pages when displayed side by side or printed <i>n-up</i> (choose one).
                DIRECTION_L2R  - Left to right
                DIRECTION_R2L  - Right to left (including vertical writing systems such as
                Chinese, Japanese, and Korean)
                The document's page mode, specifying how to display the
                document on exiting full-screen mode. It is meaningful only
                if the page mode is  PageModeFullScreen  (choose one).
                NON_FULL_SCREEN_PAGE_MODE_USE_NONE  - Neither document outline nor thumbnail images
                visible
                NON_FULL_SCREEN_PAGE_MODE_USE_OUTLINES  - Document outline visible
                NON_FULL_SCREEN_PAGE_MODE_USE_THUMBS  - Thumbnail images visible
                NON_FULL_SCREEN_PAGE_MODE_USE_OC  - Optional content group panel visible
                PRINT_SCALING_NONE  - Indicates that the print dialog should reflect no page scaling.
                @see PdfViewerPreferences#addViewerPreference
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfViewerPreferences.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Adds a viewer preference.
                In case the key is one of these values:
                PdfName. HIDETOOLBAR
                PdfName. HIDEMENUBAR
                PdfName. HIDEWINDOWUI
                PdfName. FITWINDOW
                PdfName. CENTERWINDOW
                PdfName. DISPLAYDOCTITLE
                The value must be a of type PdfBoolean (true or false).
                In case the key is PdfName. NONFULLSCREENPAGEMODE ,
                the value must be one of these names:
                PdfName. USENONE
                PdfName. USEOUTLINES
                PdfName. USETHUMBS
                PdfName. USEOC
                In case the key is PdfName.DIRECTION,
                the value must be one of these names:
                PdfName. L2R
                PdfName. R2L
                In case the key is one of these values:
                PdfName. VIEWAREA
                PdfName. VIEWCLIP
                PdfName. PRINTAREA
                PdfName. PRINTCLIP
                The value must be one of these names:
                PdfName. MEDIABOX
                PdfName. CROPBOX
                PdfName. BLEEDBOX
                PdfName. TRIMBOX
                PdfName. ARTBOX
                In case the key is PdfName. PRINTSCALING , the value can be
                PdfName. APPDEFAULT
                PdfName. NONE
                In case the key is PdfName. DUPLEX , the value can be:
                PdfName. SIMPLEX
                PdfName. DUPLEXFLIPSHORTEDGE
                PdfName. DUPLEXFLIPLONGEDGE
                In case the key is PdfName. PICKTRAYBYPDFSIZE , the value must be of type PdfBoolean.
                In case the key is PdfName. PRINTPAGERANGE , the value must be of type PdfArray.
                In case the key is PdfName. NUMCOPIES , the value must be of type PdfNumber.
                @see PdfViewerPreferences#setViewerPreferences
            </summary>
            <param name="key">name of the viewer preference</param>
            <param name="value">value of the viewer preference</param>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfXConformance">
            <summary>
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfXConformance.PdfxConformance">
            <summary>
                Sets the PDF/X conformance level.
                Allowed values are PDFX1A2001, PDFX32002, PDFA1A and PDFA1B.
                It must be called before opening the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfXConformance.IsPdfX">
            <summary>
                Checks if the PDF/X Conformance is necessary.
            </summary>
            <returns>true if the PDF has to be in conformance with any of the PDF/X specifications</returns>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfAnnotationsImp.acroForm">
            <summary>
                This is the AcroForm object for the complete document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfAnnotationsImp.Annotations">
            <summary>
                This is the array containing the references to annotations
                that were added to the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfAnnotationsImp.DelayedAnnotations">
            <summary>
                This is an array containg references to some delayed annotations
                (that were added for a page that doesn't exist yet).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfAnnotationsImp.AcroForm">
            <summary>
                Gets the AcroForm object.
            </summary>
            <returns>the PdfAcroform object of the PdfDocument</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfAnnotationsImp.HasValidAcroForm">
            <summary>
                Checks if the AcroForm is valid.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.intern.PdfVersionImp">
            <summary>
                Stores the PDF version information,
                knows how to write a PDF Header,
                and how to add the version to the catalog (if necessary).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.Header">
            <summary>
                Contains different strings that are part of the header.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.Appendmode">
            <summary>
                Indicates if we are working in append mode.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.CatalogVersion">
            <summary>
                The version that will be written to the catalog.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.Extensions">
            <summary>
                The extensions dictionary.
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.HeaderVersion">
            <summary>
                The version that was or will be written to the header.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.HeaderWasWritten">
            <summary>
                Indicates if the header was already written.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfVersionImp.PdfVersion">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.AddDeveloperExtension(iTextSharp.text.pdf.PdfDeveloperExtension)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#addDeveloperExtension(com.lowagie.text.pdf.PdfDeveloperExtension)
                @since   2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.SetAtLeastPdfVersion(System.Char)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.SetPdfVersion(iTextSharp.text.pdf.PdfName)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.AddToCatalog(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Adds the version to the Catalog dictionary.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.GetVersionAsByteArray(System.Char)">
            <summary>
                Returns the version as a byte[].
            </summary>
            <param name="version">the version character</param>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.GetVersionAsName(System.Char)">
            <summary>
                Returns the PDF version as a name.
            </summary>
            <param name="version">the version character.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.SetAppendmode(System.Boolean)">
            <summary>
                Sets the append mode.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.WriteHeader(iTextSharp.text.pdf.OutputStreamCounter)">
            <summary>
                Writes the header to the OutputStreamCounter.
                @throws IOException
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp">
            <summary>
                Stores the information concerning viewer preferences,
                and contains the business logic that allows you to set viewer preferences.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.ViewerPreferencesMask">
            <summary>
                The mask to decide if a ViewerPreferences dictionary is needed
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.DirectionPreferences">
            <summary>
                A series of viewer preferences.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.DuplexPreferences">
            <summary>
                A series of viewer preferences.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.NonfullscreenpagemodePreferences">
            <summary>
                A series of viewer preferences.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.PageBoundaries">
            <summary>
                A series of viewer preferences.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.PrintscalingPreferences">
            <summary>
                A series of viewer preferences
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp._viewerPreferences">
            <summary>
                This dictionary holds the viewer preferences (other than page layout and page mode).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp._pageLayoutAndMode">
            <summary>
                This value will hold the viewer preferences for the page layout and page mode.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.PageLayoutAndMode">
            <summary>
                Returns the page layout and page mode value.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.ViewerPreferences">
            <summary>
                Sets the viewer preferences as the sum of several constants.
                the viewer preferences
                @see PdfWriter#setViewerPreferences
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Sets the viewer preferences for printing.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.AddToCatalog(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Adds the viewer preferences defined in the preferences parameter to a
                PdfDictionary (more specifically the root or catalog of a PDF file).
            </summary>
            <param name="catalog"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.GetViewerPreferences">
            <summary>
                Returns the viewer preferences.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.getIndex(iTextSharp.text.pdf.PdfName)">
            <summary>
                Given a key for a viewer preference (a PdfName object),
                this method returns the index in the VIEWER_PREFERENCES array.
            </summary>
            <param name="key">a PdfName referring to a viewer preference</param>
            <returns>an index in the VIEWER_PREFERENCES array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.isPossibleValue(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName[])">
            <summary>
                Checks if some value is valid for a certain key.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.intern.PdfXConformanceImp">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_CMYK">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_COLOR">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_FONT">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_GSTATE">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_IMAGE">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_LAYER">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_RGB">
            <summary>
                A key for an aspect that can be checked for PDF/X Conformance.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfXConformanceImp.PdfxConformance">
            <summary>
                The value indicating if the PDF has to be in conformance with PDF/X.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfX">
            <summary>
                Checks if the PDF/X Conformance is necessary.
            </summary>
            <returns>true if the PDF has to be in conformance with any of the PDF/X specifications</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.CheckPdfxConformance(iTextSharp.text.pdf.PdfWriter,System.Int32,System.Object)">
            <summary>
                Business logic that checks if a certain object is in conformance with PDF/X.
            </summary>
            <param name="writer">the writer that is supposed to write the PDF/X file</param>
            <param name="key">the type of PDF/X conformance that has to be checked</param>
            <param name="obj1">the object that is checked for conformance</param>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfA1">
            <summary>
                Checks if the PDF has to be in conformance with PDFA1
            </summary>
            <returns>true of the PDF has to be in conformance with PDFA1</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfA1A">
            <summary>
                Checks if the PDF has to be in conformance with PDFA1A
            </summary>
            <returns>true of the PDF has to be in conformance with PDFA1A</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfX1A2001">
            <summary>
                Checks if the PDF has to be in conformance with PDF/X-1a:2001
            </summary>
            <returns>true of the PDF has to be in conformance with PDF/X-1a:2001</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfX32002">
            <summary>
                Checks if the PDF has to be in conformance with PDF/X-3:2002
            </summary>
            <returns>true of the PDF has to be in conformance with PDF/X-3:2002</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.IntHashtable">
            <summary>
                A Hashtable that uses ints as the keys.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable._count">
            The total number of entries in the hash table.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable._loadFactor">
            The load factor for the hashtable.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable._table">
            The hash table data.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable._threshold">
            Rehashes the table when count exceeds this threshold.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor(System.Int32,System.Single)">
            <summary>
            </summary>
            <param name="initialCapacity"></param>
            <param name="loadFactor"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor(System.Int32)">
            Constructs a new, empty hashtable with the specified initial
            <summary>
                capacity.
            </summary>
            <summary>
                @param initialCapacity the initial number of buckets
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.IntHashtable.Size">
            Returns the number of elements contained in the hashtable.
        </member>
        <member name="P:iTextSharp.text.pdf.IntHashtable.Item(System.Int32)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Clear">
            Clears the hash table so that it has no more elements in it.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Contains(System.Int32)">
            Returns true if the specified object is an element of the hashtable.
            <summary>
                This operation is more expensive than the ContainsKey() method.
            </summary>
            <summary>
                @param value the value that we are looking for
            </summary>
            <summary>
                @exception NullPointerException If the value being searched
            </summary>
            <summary>
                for is equal to null.
            </summary>
            <summary>
                @see IntHashtable#containsKey
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.ContainsKey(System.Int32)">
            Returns true if the collection contains an element for the key.
            <summary>
                @param key the key that we are looking for
            </summary>
            <summary>
                @see IntHashtable#contains
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.IsEmpty">
            Returns true if the hashtable contains no elements.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Remove(System.Int32)">
            Removes the element corresponding to the key. Does nothing if the
            <summary>
                key is not present.
            </summary>
            <summary>
                @param key the key that needs to be removed
            </summary>
            <summary>
                @return the value of key, or null if the key was not found.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Rehash">
            Rehashes the content of the table into a bigger table.
            <summary>
                This method is called automatically when the hashtable's
            </summary>
            <summary>
                size exceeds the threshold.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.IntHashtableIterator._index">
            <summary>
                boolean keys;
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.IOcspClient">
            <summary>
                Interface for the OCSP Client.
                @since 2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IOcspClient.GetEncoded">
            <summary>
                Gets an encoded byte array.
            </summary>
            <returns>a byte array</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfOcg">
            <summary>
                The interface common to all layer types.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.IPdfOcg.PdfObject">
            <summary>
                Gets the object representing the layer.
            </summary>
            <returns>the object representing the layer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.IPdfOcg.Ref">
            <summary>
                Gets the  PdfIndirectReference  that represents this layer.
            </summary>
            <returns>the  PdfIndirectReference  that represents this layer</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPageEvent">
            <summary>
                Allows a class to catch several document events.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)">
            <summary>
                Called when a Chapter is written.
                position  will hold the height at which the
                chapter will be written to.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the chapter will be written to</param>
            <param name="title">the title of the Chapter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when the end of a Chapter is reached.
                position  will hold the height of the end of the chapter.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the chapter will be written to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when the document is closed.
                Note that this method is called with the page number equal
                to the last page plus one.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            <summary>
                Called when a  Chunk  with a generic tag is written.
                It is usefull to pinpoint the  Chunk  location to generate
                bookmarks, for example.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="rect">the  Rectangle  containing the  Chunk </param>
            <param name="text">the text of the tag</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when the document is opened.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when a Paragraph is written.
                paragraphPosition  will hold the height at which the
                paragraph will be written to. This is useful to insert bookmarks with
                more control.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the paragraph will be written to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when a Paragraph is written.
                paragraphPosition  will hold the height of the end of the paragraph.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position of the end of the paragraph</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)">
            <summary>
                Called when a Section is written.
                position  will hold the height at which the
                section will be written to.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the chapter will be written to</param>
            <param name="depth"></param>
            <param name="title">the title of the Chapter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when the end of a Section is reached.
                position  will hold the height of the section end.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the chapter will be written to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when a page is initialized.
                Note that if even if a page is not written this method is still
                called. It is preferable to use  onEndPage  to avoid
                infinite loops.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPCellEvent">
            <summary>
                Summary description for IPdfPCellEvent.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPCellEvent.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                This method is called at the end of the cell rendering. The text or graphics are added to
                one of the 4  PdfContentByte  contained in
                canvases .
                The indexes to  canvases  are:
                PdfPTable.BASECANVAS  - the original  PdfContentByte . Anything placed here
                will be under the cell.
                PdfPTable.BACKGROUNDCANVAS  - the layer where the background goes to.
                PdfPTable.LINECANVAS  - the layer where the lines go to.
                PdfPTable.TEXTCANVAS  - the layer where the text go to. Anything placed here
                will be over the cell.
                The layers are placed in sequence on top of each other.
            </summary>
            <param name="cell">the cell</param>
            <param name="position">the coordinates of the cell</param>
            <param name="canvases">an array of  PdfContentByte </param>
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPTableEvent">
            <summary>
                An interface that can be used to retrieve the position of cells in  PdfPTable .
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPTableEvent.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                This method is called at the end of the table rendering. The text or graphics are added to
                one of the 4  PdfContentByte  contained in
                canvases .
                The indexes to  canvases  are:
                PdfPTable.BASECANVAS  - the original  PdfContentByte . Anything placed here
                will be under the table.
                PdfPTable.BACKGROUNDCANVAS  - the layer where the background goes to.
                PdfPTable.LINECANVAS  - the layer where the lines go to.
                PdfPTable.TEXTCANVAS  - the layer where the text go to. Anything placed here
                will be over the table.
                The layers are placed in sequence on top of each other.
                The  widths  and  heights  have the coordinates of the cells.
                The size of the  widths  array is the number of rows.
                Each sub-array in  widths  corresponds to the x column border positions where
                the first element is the x coordinate of the left table border and the last
                element is the x coordinate of the right table border.
                If colspan is not used all the sub-arrays in  widths
                are the same.
                For the  heights  the first element is the y coordinate of the top table border and the last
                element is the y coordinate of the bottom table border.
                of rows
                of rows + 1
            </summary>
            <param name="table">the  PdfPTable  in use</param>
            <param name="widths">an array of arrays with the cells' x positions. It has the length of the number</param>
            <param name="heights">an array with the cells' y positions. It has a length of the number</param>
            <param name="headerRows">the number of rows defined for the header.</param>
            <param name="rowStart">the first row number after the header</param>
            <param name="canvases">an array of  PdfContentByte </param>
        </member>
        <member name="T:iTextSharp.text.pdf.ITsaClient">
            <summary>
                Time Stamp Authority client (caller) interface.
                Interface used by the PdfPKCS7 digital signature builder to call
                Time Stamp Authority providing RFC 3161 compliant time stamp token.
                @author Martin Brunecky, 07/17/2007
                @since    2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.ITsaClient.GetTimeStampToken(iTextSharp.text.pdf.PdfPkcs7,System.Byte[])">
            <summary>
                Get RFC 3161 timeStampToken.
                Method may return null indicating that timestamp should be skipped.
                @throws Exception - TSA request failed
            </summary>
            <param name="caller">PdfPKCS7 - calling PdfPKCS7 instance (in case caller needs it)</param>
            <param name="imprint">byte[] - data imprint to be time-stamped</param>
            <returns>byte[] - encoded, TSA signed data of the timeStampToken</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.ITsaClient.GetTokenSizeEstimate">
            <summary>
                Get the time stamp token size estimate.
                Implementation must return value large enough to accomodate the entire token
                returned by getTimeStampToken() _prior_ to actual getTimeStampToken() call.
            </summary>
            <returns>an estimate of the token size</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.LzwDecoder">
            <summary>
                A class for performing LZW decoding.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.LzwDecoder.NextCode">
            <summary>
                Returns the next 9, 10, 11 or 12 bits
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.LzwDecoder.AddStringToTable(System.Byte[],System.Byte)">
            <summary>
                Add a new string to the string table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.LzwDecoder.AddStringToTable(System.Byte[])">
            <summary>
                Add a new string to the string table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.LzwDecoder.ComposeString(System.Byte[],System.Byte)">
            <summary>
                Append  newstring  to the end of  oldstring .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.LzwDecoder.Decode(System.Byte[],System.IO.Stream)">
            <summary>
                Method to decode LZW compressed data.
            </summary>
            <param name="data">The compressed data.</param>
            <param name="uncompData">Array to return the uncompressed data in.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.LzwDecoder.InitializeStringTable">
            <summary>
                Initialize the string table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.LzwDecoder.WriteString(System.Byte[])">
            <summary>
                Write out the string just uncompressed.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.MultiColumnText">
            <summary>
                Formats content into one or more columns bounded by a
                rectangle.  The columns may be simple rectangles or
                more complicated shapes. Add all of the columns before
                adding content. Column continuation is supported. A MultiColumnText object may be added to
                a document using  Document.add .
                @author Steve Appling
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.AUTOMATIC">
            <summary>
                special constant for automatic calculation of height
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._columnDefs">
            <summary>
                Array of  ColumnDef  objects used to define the columns
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._columnText">
            <summary>
                ColumnText object used to do all the real work.  This same object is used for all columns
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._desiredHeight">
            <summary>
                total desiredHeight of columns.  If  AUTOMATIC , this means fill pages until done.
                This may be larger than one page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._overflow">
            <summary>
                true if all the text could not be written out due to height restriction
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._simple">
            <summary>
                true if all columns are simple (rectangular)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._top">
            <summary>
                Top of the columns - y position on starting page.
                If  AUTOMATIC , it means current y position when added to document
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText._totalHeight">
            <summary>
                total height of element written out so far
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor">
            <summary>
                Default constructor.  Sets height to  AUTOMATIC .
                Columns will repeat on each page as necessary to accomodate content length.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor(System.Single)">
            <summary>
                Construct a MultiColumnText container of the specified height.
                If height is  AUTOMATIC , fill complete pages until done.
                If a specific height is used, it may span one or more pages.
            </summary>
            <param name="height"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor(System.Single,System.Single)">
            <summary>
                Construct a MultiColumnText container of the specified height
                starting at the specified Y position.
            </summary>
            <param name="height"></param>
            <param name="top"></param>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.CurrentColumn">
            <summary>
                Gets the current column.
            </summary>
            <returns>the current column</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.SpaceCharRatio">
            <summary>
                Sets the ratio between the extra word spacing and the extra character spacing
                when the text is fully justified.
                Extra word spacing will grow  spaceCharRatio  times more than extra character spacing.
                If the ratio is  PdfWriter.NO_SPACE_CHAR_RATIO  then the extra character spacing
                will be zero.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.RunDirection">
            <summary>
                Sets the run direction.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.ArabicOptions">
            <summary>
                Sets the arabic shaping options. The option can be AR_NOVOWEL,
                AR_COMPOSEDTASHKEEL and AR_LIG.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Alignment">
            <summary>
                Sets the default alignment
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it to an
                ElementListener .
            </summary>
            <param name="listener">an  ElementListener </param>
            <returns> true  if the element was processed successfully</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <returns>a type</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Chunks">
            <summary>
                Returns null - not used
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsOverflow">
            <summary>
                Indicates that all of the text did not fit in the
                specified height. Note that isOverflow will return
                false before the MultiColumnText object has been
                added to the document.  It will always be false if
                the height is AUTOMATIC.
            </summary>
            <returns>true if there is still space left in the column</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.UseColumnParams(iTextSharp.text.pdf.ColumnText)">
            <summary>
                Copy the parameters from the specified ColumnText to use
                when rendering.  Parameters like  setArabicOptions
                must be set in this way.
            </summary>
            <param name="sourceColumn"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddColumn(System.Single[],System.Single[])">
            <summary>
                Add a new column.  The parameters are limits for each column
                wall in the format of a sequence of points (x1,y1,x2,y2,...).
            </summary>
            <param name="left">limits for left column</param>
            <param name="right">limits for right column</param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddSimpleColumn(System.Single,System.Single)">
            <summary>
                Add a simple rectangular column with specified left
                and right x position boundaries.
            </summary>
            <param name="left">left boundary</param>
            <param name="right">right boundary</param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddRegularColumns(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Add the specified number of evenly spaced rectangular columns.
                Columns will be seperated by the specified gutterWidth.
            </summary>
            <param name="left">left boundary of first column</param>
            <param name="right">right boundary of last column</param>
            <param name="gutterWidth">width of gutter spacing between columns</param>
            <param name="numColumns">number of columns to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddText(iTextSharp.text.Phrase)">
            <summary>
                Adds a  Phrase  to the current text array.
                Will not have any effect if addElement() was called before.
                @since	2.1.5
            </summary>
            <param name="phrase">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddText(iTextSharp.text.Chunk)">
            <summary>
                Adds a  Chunk  to the current text array.
                Will not have any effect if addElement() was called before.
                @since	2.1.5
            </summary>
            <param name="chunk">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddElement(iTextSharp.text.IElement)">
            <summary>
                Add an element to be rendered in a column.
                Note that you can only add a  Phrase
                or a  Chunk  if the columns are
                not all simple.  This is an underlying restriction in
                {@link com.lowagie.text.pdf.ColumnText}
                @throws DocumentException if element can't be added
            </summary>
            <param name="element">element to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.Write(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfDocument,System.Single)">
            <summary>
                Write out the columns.  After writing, use
                {@link #isOverflow()} to see if all text was written.
                @throws DocumentException on error
            </summary>
            <param name="canvas">PdfContentByte to write with</param>
            <param name="document">document to write to (only used to get page limit info)</param>
            <param name="documentY">starting y position to begin writing at</param>
            <returns>the current height (y position) after writing the columns</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.getHeight(System.Single[],System.Single[])">
            <summary>
                Figure out the height of a column from the border extents
            </summary>
            <param name="left">left border</param>
            <param name="right">right border</param>
            <returns>height</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.getColumnBottom">
            <summary>
                Calculates the appropriate y position for the bottom
                of the columns on this page.
            </summary>
            <returns>the y position of the bottom of the columns</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.NextColumn">
            <summary>
                Moves the text insertion point to the beginning of the next column, issuing a page break if
                needed.
                @throws DocumentException on error
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ResetCurrentColumn">
            <summary>
                Resets the current column.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ShiftCurrentColumn">
            <summary>
                Shifts the current column.
            </summary>
            <returns>true if the currentcolumn has changed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.SetColumnsRightToLeft(System.Boolean)">
            <summary>
                Sets the direction of the columns.
            </summary>
            <param name="direction">true = right2left; false = left2right</param>
        </member>
        <member name="T:iTextSharp.text.pdf.MultiColumnText.ColumnDef">
            <summary>
                Inner class used to define a column
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ColumnDef.ResolvePositions(System.Int32)">
            <summary>
                Resolves the positions for the specified side of the column
                into real numbers once the top of the column is known.
                or  Rectangle.RIGHT_BORDER
            </summary>
            <param name="side">either  Rectangle.LEFT_BORDER </param>
            <returns>the array of floats for the side</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ColumnDef.IsSimple">
            <summary>
                Checks if column definition is a simple rectangle
            </summary>
            <returns>true if it is a simple column</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.OcspClientBouncyCastle">
            <summary>
                OcspClient implementation using BouncyCastle.
                @author psoares
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.OcspClientBouncyCastle._checkCert">
            <summary>
                check certificate
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.OcspClientBouncyCastle._rootCert">
            <summary>
                root certificate
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.OcspClientBouncyCastle._url">
            <summary>
                OCSP URL
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.OcspClientBouncyCastle.#ctor(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.X509.X509Certificate,System.String)">
            <summary>
                Creates an instance of an OcspClient that will be using BouncyCastle.
            </summary>
            <param name="checkCert">check certificate</param>
            <param name="rootCert">root certificate</param>
            <param name="url">OCSP URL</param>
        </member>
        <member name="M:iTextSharp.text.pdf.OcspClientBouncyCastle.GetEncoded">
            <summary>
                @see com.lowagie.text.pdf.OcspClient#getEncoded()
            </summary>
            <returns>	a byte array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.OcspClientBouncyCastle.generateOcspRequest(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Math.BigInteger)">
            <summary>
                Generates an OCSP request using BouncyCastle.
                @throws OCSPException
                @throws IOException
            </summary>
            <param name="issuerCert">certificate of the issues</param>
            <param name="serialNumber">serial number</param>
            <returns>OCSP request</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.OutputStreamCounter">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PatternColor">
            <summary>
                Represents a pattern. Can be used in high-level constructs (Paragraph, Cell, etc.).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PatternColor._painter">
            <summary>
                The actual pattern.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PatternColor.#ctor(iTextSharp.text.pdf.PdfPatternPainter)">
            <summary>
                Creates a color representing a pattern.
            </summary>
            <param name="painter">the actual pattern</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PatternColor.Painter">
            <summary>
                Gets the pattern.
            </summary>
            <returns>the pattern</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAcroForm">
            <summary>
                Each PDF document can contain maximum 1 AcroForm.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm._calculationOrder">
            <summary>
                This is an array containing the calculationorder of the fields.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm._documentFields">
            <summary>
                This is an array containing DocumentFields.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm._fieldTemplates">
            <summary>
                This is a map containing FieldTemplates.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm._sigFlags">
            <summary>
                Contains the signature flags.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates new PdfAcroForm
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAcroForm.SigFlags">
            <summary>
                Adds fieldTemplates.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddFormField(iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Adds documentFields.
            </summary>
            <summary>
                Closes the AcroForm.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddHtmlPostButton(System.String,System.String,System.String,System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Adds an object to the calculationOrder.
            </summary>
            <summary>
                Sets the signature flags.
            </summary>
            <summary>
                Adds a formfield to the AcroForm.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.DrawSignatureAppearences(iTextSharp.text.pdf.PdfFormField,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="field"></param>
            <param name="llx"></param>
            <param name="lly"></param>
            <param name="urx"></param>
            <param name="ury"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.SetSignatureParams(iTextSharp.text.pdf.PdfFormField,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="field"></param>
            <param name="name"></param>
            <param name="llx"></param>
            <param name="lly"></param>
            <param name="urx"></param>
            <param name="ury"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAction">
            <summary>
                A  PdfAction  defines an action that can be triggered from a PDF file.
                @see     PdfDictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.FIRSTPAGE">
            <summary>
                A named action to go to the first page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.LASTPAGE">
            <summary>
                A named action to go to the last page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.NEXTPAGE">
            <summary>
                A named action to go to the next page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.PREVPAGE">
            <summary>
                A named action to go to the previous page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.PRINTDIALOG">
            <summary>
                A named action to open a print dialog.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.RESET_EXCLUDE">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_CANONICAL_FORMAT">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EMBED_FORM">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_F_KEY">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_NON_USER_ANNOTS">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCLUDE">
            <summary>
                constructors
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_PDF">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_XFDF">
            <summary>
                a possible submitvalue
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor">
            <summary>
                Create an empty action.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.Uri)">
            <summary>
                Constructs a new  PdfAction  of Subtype URI.
            </summary>
            <param name="url">the Url to go to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String)">
            <summary>
                Constructs a new  PdfAction  of Subtype URI.
            </summary>
            <param name="url">the url to go to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.String)">
            <summary>
                Constructs a new  PdfAction  of Subtype GoTo.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.Int32)">
            <summary>
                Constructs a new  PdfAction  of Subtype GoToR.
            </summary>
            <param name="named">the named destination to go to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Launchs an application or a document.
                It can be  null .
                "print" - Print a document.
                It can be  null .
                It can be  null .
            </summary>
            <param name="application">the application to be launched or the document to be opened or printed.</param>
            <param name="parameters">(Windows-specific) A parameter string to be passed to the application.</param>
            <param name="operation">(Windows-specific) the operation to perform: "open" - Open a document,</param>
            <param name="defaultDir">(Windows-specific) the default directory in standard DOS syntax.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.CreateLaunch(System.String,System.String,System.String,System.String)">
            <summary>
                Launchs an application or a document.
                It can be  null .
                "print" - Print a document.
                It can be  null .
                It can be  null .
            </summary>
            <param name="application">the application to be launched or the document to be opened or printed.</param>
            <param name="parameters">(Windows-specific) A parameter string to be passed to the application.</param>
            <param name="operation">(Windows-specific) the operation to perform: "open" - Open a document,</param>
            <param name="defaultDir">(Windows-specific) the default directory in standard DOS syntax.</param>
            <returns>a Launch action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoEmbedded(System.String,iTextSharp.text.pdf.collection.PdfTargetDictionary,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a GoToE action to an embedded file.
            </summary>
            <param name="filename">the root document of the target (null if the target is in the same document)</param>
            <param name="target"></param>
            <param name="dest">the named destination</param>
            <param name="isName">if true sets the destination as a name, if false sets it as a String</param>
            <param name="newWindow"></param>
            <returns>a GoToE action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoEmbedded(System.String,iTextSharp.text.pdf.collection.PdfTargetDictionary,iTextSharp.text.pdf.PdfObject,System.Boolean)">
            <summary>
                Creates a GoToE action to an embedded file.
            </summary>
            <param name="filename">the root document of the target (null if the target is in the same document)</param>
            <param name="target">a path to the target document of this action</param>
            <param name="dest">the destination inside the target document, can be of type PdfDestination, PdfName, or PdfString</param>
            <param name="newWindow">if true, the destination document should be opened in a new window</param>
            <returns>a GoToE action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoLocalPage(System.Int32,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a GoTo action to an internal page.
            </summary>
            <param name="page">the page to go. First page is 1</param>
            <param name="dest">the destination for the page</param>
            <param name="writer">the writer for this action</param>
            <returns>a GoTo action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoLocalPage(System.String,System.Boolean)">
            <summary>
                Creates a GoTo action to a named destination.
            </summary>
            <param name="dest">the named destination</param>
            <param name="isName">if true sets the destination as a name, if false sets it as a String</param>
            <returns>a GoToR action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoRemotePage(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a GoToR action to a named destination.
            </summary>
            <param name="filename">the file name to go to</param>
            <param name="dest">the destination name</param>
            <param name="isName">if true sets the destination as a name, if false sets it as a String</param>
            <param name="newWindow">
                open the document in a new window if  true , if false the current document is replaced by the
                new document.
            </param>
            <returns>a GoToR action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.JavaScript(System.String,iTextSharp.text.pdf.PdfWriter,System.Boolean)">
            <summary>
                Creates a JavaScript action. If the JavaScript is smaller than
                50 characters it will be placed as a string, otherwise it will
                be placed as a compressed stream.
                Acrobat JavaScript engine does not support unicode,
                so this may or may not work for you
            </summary>
            <param name="code">the JavaScript code</param>
            <param name="writer">the writer for this action</param>
            <param name="unicode">select JavaScript unicode. Note that the internal</param>
            <returns>the JavaScript action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.JavaScript(System.String,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a JavaScript action. If the JavaScript is smaller than
                50 characters it will be place as a string, otherwise it will
                be placed as a compressed stream.
            </summary>
            <param name="code">the JavaScript code</param>
            <param name="writer">the writer for this action</param>
            <returns>the JavaScript action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.Rendition(System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Creates a Rendition action
                @throws IOException
            </summary>
            <param name="file"></param>
            <param name="fs"></param>
            <param name="mimeType"></param>
            <param name="refi"></param>
            <returns>a Media Clip action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.SetOcGstate(System.Collections.Generic.IList{System.Object},System.Boolean)">
            <summary>
                A set-OCG-state action (PDF 1.5) sets the state of one or more optional content
                groups.
                or  String  (ON, OFF, or Toggle) followed by one or more optional content group dictionaries
                PdfLayer  or a  PdfIndirectReference  to a  PdfLayer .
                The array elements are processed from left to right; each name is applied
                to the subsequent groups until the next name is encountered:
                ON sets the state of subsequent groups to ON
                OFF sets the state of subsequent groups to OFF
                Toggle reverses the state of subsequent groups
                content groups (as specified by the RBGroups entry in the current configuration
                dictionary) should be preserved when the states in the
                state  array are applied. That is, if a group is set to ON (either by ON or Toggle) during
                processing of the  state  array, any other groups belong to the same radio-button
                group are turned OFF. If a group is set to OFF, there is no effect on other groups.
                If  false , radio-button state relationships, if any, are ignored
            </summary>
            <param name="state">an array consisting of any number of sequences beginning with a  PdfName </param>
            <param name="preserveRb">if  true , indicates that radio-button state relationships between optional</param>
            <returns>the action</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.Next(iTextSharp.text.pdf.PdfAction)">
            <summary>
                Add a chained action.
            </summary>
            <param name="na">the next action</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAnnotation">
            <summary>
                A  PdfAnnotation  is a note that is associated with a page.
                @see     PdfDictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.MARKUP_SQUIGGLY">
            <summary>
                attributevalue
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation._placeInPage">
            <summary>
                Holds value of property placeInPage.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.Used">
            <summary>
                Holds value of property used.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle)">
            <summary>
                constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfString,iTextSharp.text.pdf.PdfString)">
            <summary>
                Constructs a new  PdfAnnotation  of subtype text.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Constructs a new  PdfAnnotation  of subtype link (Action).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.Layer">
            <summary>
                Sets the layer this annotation belongs to.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.Name">
            <summary>
                Sets the name of the annotation.
                With this name the annotation can be identified among
                all the annotations on a page (it has to be unique).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.PlaceInPage">
            <summary>
                Getter for property placeInPage.
            </summary>
            <returns>Value of property placeInPage.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateFileAttachment(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,System.Byte[],System.String,System.String)">
            <summary>
                Creates a file attachment annotation.
                the file will be read from the disk
                fileStore  is not  null
                @throws IOException on error
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="rect">the dimensions in the page of the annotation</param>
            <param name="contents">the file description</param>
            <param name="fileStore">an array with the file. If it's  null </param>
            <param name="file">the path to the file. It will only be used if</param>
            <param name="fileDisplay">the actual file name stored in the pdf</param>
            <returns>the annotation</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateFileAttachment(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            <summary>
                Creates a file attachment annotation
                @throws IOException
            </summary>
            <param name="writer"></param>
            <param name="rect"></param>
            <param name="contents"></param>
            <param name="fs"></param>
            <returns>the annotation</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateScreen(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String,System.Boolean)">
            <summary>
                Creates a screen PdfAnnotation
                @throws IOException
            </summary>
            <param name="writer"></param>
            <param name="rect"></param>
            <param name="clipTitle"></param>
            <param name="fs"></param>
            <param name="mimeType"></param>
            <param name="playOnDisplay"></param>
            <returns>a screen PdfAnnotation</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.IsAnnotation">
            <summary>
                Getter for property annotation.
            </summary>
            <returns>Value of property annotation.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.IsForm">
            <summary>
                Getter for property form.
            </summary>
            <returns>Value of property form.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.SetHighlighting(iTextSharp.text.pdf.PdfName)">
            <summary>
                Sets the annotation's highlighting mode. The values can be
                HIGHLIGHT_NONE ,  HIGHLIGHT_INVERT ,
                HIGHLIGHT_OUTLINE  and  HIGHLIGHT_PUSH ;
            </summary>
            <param name="highlight">the annotation's highlighting mode</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAnnotation.PdfImportedLink">
            <summary>
                This class processes links from imported pages so that they may be active. The following example code reads a group
                of files and places them all on the output PDF, four pages in a single page, keeping the links active.
                String[] files = new String[] {&quot;input1.pdf&quot;, &quot;input2.pdf&quot;};
                String outputFile = &quot;output.pdf&quot;;
                int firstPage=1;
                Document document = new Document();
                PdfWriter writer = PdfWriter.GetInstance(document, new FileOutputStream(outputFile));
                document.SetPageSize(PageSize.A4);
                float W = PageSize.A4.GetWidth() / 2;
                float H = PageSize.A4.GetHeight() / 2;
                document.Open();
                PdfContentByte cb = writer.GetDirectContent();
                for (int i = 0; i &lt; files.length; i++) {
                PdfReader currentReader = new PdfReader(files[i]);
                currentReader.ConsolidateNamedDestinations();
                for (int page = 1; page &lt;= currentReader.GetNumberOfPages(); page++) {
                PdfImportedPage importedPage = writer.GetImportedPage(currentReader, page);
                float a = 0.5f;
                float e = (page % 2 == 0) ? W : 0;
                float f = (page % 4 == 1 || page % 4 == 2) ? H : 0;
                ArrayList links = currentReader.GetLinks(page);
                cb.AddTemplate(importedPage, a, 0, 0, a, e, f);
                for (int j = 0; j &lt; links.Size(); j++) {
                PdfAnnotation.PdfImportedLink link = (PdfAnnotation.PdfImportedLink)links.Get(j);
                if (link.IsInternal()) {
                int dPage = link.GetDestinationPage();
                int newDestPage = (dPage-1)/4 + firstPage;
                float ee = (dPage % 2 == 0) ? W : 0;
                float ff = (dPage % 4 == 1 || dPage % 4 == 2) ? H : 0;
                link.SetDestinationPage(newDestPage);
                link.TransformDestination(a, 0, 0, a, ee, ff);
                }
                link.TransformRect(a, 0, 0, a, e, f);
                writer.AddAnnotation(link.CreateAnnotation(writer));
                }
                if (page % 4 == 0)
                document.NewPage();
                }
                if (i &lt; files.length - 1)
                document.NewPage();
                firstPage += (currentReader.GetNumberOfPages()+3)/4;
                }
                document.Close();
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.PdfImportedLink.ToString">
            <summary>
                Returns a String representation of the link.
                @since	2.1.6
            </summary>
            <returns>String representation of the imported link</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAppearance">
            <summary>
                Implements the appearance stream to be used with form fields..
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.#ctor">
            <summary>
                Creates a  PdfAppearance .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates new PdfTemplate
            </summary>
            <param name="wr">the  PdfWriter </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.CreateAppearance(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single)">
            <summary>
                Creates a new appearance to be used with form fields.
            </summary>
            <param name="writer"></param>
            <param name="width">the bounding box width</param>
            <param name="height">the bounding box height</param>
            <returns>the appearance created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
                Set the font and the size for the subsequent text writing.
            </summary>
            <param name="bf">the font</param>
            <param name="size">the font size in points</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfArray">
            <summary>
                PdfArray  is the PDF Array object.
                An array is a sequence of PDF objects. An array may contain a mixture of object types.
                An array is written as a left square bracket ([), followed by a sequence of objects,
                followed by a right square bracket (]).
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.6 (page 40).
                @see        PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfArray.arrayList">
            <summary>
                membervariables
            </summary>
            <summary>
                this is the actual array of PdfObjects
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs an empty  PdfArray -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Constructs an  PdfArray -object, containing 1  PdfObject .
            </summary>
            <param name="obj">a  PdfObject  that has to be added to the array</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(System.Collections.Generic.IList{iTextSharp.text.pdf.PdfObject})">
            <summary>
                Constructs a PdfArray with the elements of an ArrayList.
                Throws a ClassCastException if the ArrayList contains something
                that isn't a PdfObject.
                @since 2.1.3
            </summary>
            <param name="l">an ArrayList with PdfObjects</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(iTextSharp.text.pdf.PdfArray)">
            <summary>
                Constructs an  PdfArray -object, containing all the  PdfObject s in a given  PdfArray .
            </summary>
            <param name="array">a  PdfArray  that has to be added to the array</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.ArrayList">
            <summary>
                methods overriding some methods in PdfObject
            </summary>
            <summary>
                Returns the PDF representation of this  PdfArray .
            </summary>
            <returns>an array of  byte s</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.Item(System.Int32)">
            <summary>
                Overwrites a specified location of the array.
                @throws IndexOutOfBoundsException if the specified position doesn't exist
                @since 2.1.5
            </summary>
            <returns>the previous value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Add(System.Single[])">
            <summary>
                Adds a  PdfObject  to the  PdfArray .
            </summary>
            <returns> true </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Add(System.Int32,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Inserts the specified element at the specified position.
                Shifts the element currently at that position (if any) and
                any subsequent elements to the right (adds one to their indices).
                @throws IndexOutOfBoundsException if the specified index is larger than the
                last position currently set, plus 1.
                @since 2.1.5
            </summary>
            <param name="index">The index at which the specified element is to be inserted</param>
            <param name="element">The element to be inserted</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.AddFirst(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Inserts a  PdfObject  at the beginning of the
                PdfArray .
                The  PdfObject  will be the first element, any other elements
                will be shifted to the right (adds one to their indices).
            </summary>
            <param name="obj">The  PdfObject  to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.GetAsDict(System.Int32)">
            <summary>
                more of the same like PdfDictionary. (MAS 2/17/06)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.GetListIterator">
            <summary>
                Checks if the  PdfArray  allready contains a certain  PdfObject .
            </summary>
            <returns> true </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.IsEmpty">
            <summary>
                Returns an ArrayList containing  PdfObject s.
            </summary>
            <returns>an ArrayList</returns>
            <summary>
                Returns the number of entries in the array.
            </summary>
            <returns>the size of the ArrayList</returns>
            <summary>
                Returns  true  if the array is empty.
                @since 2.1.5
            </summary>
            <returns> true  if the array is empty</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Remove(System.Int32)">
            <summary>
                ARRAY CONTENT METHODS
            </summary>
            <summary>
                Remove the element at the specified position from the array.
                Shifts any subsequent elements to the left (subtracts one from their
                indices).
                @throws IndexOutOfBoundsException the specified position doesn't exist
                @since 2.1.5
            </summary>
            <param name="idx">The index of the element to be removed.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.ToString">
            <summary>
                methods concerning the ArrayList-membervalue
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBoolean">
            <summary>
                PdfBoolean  is the bool object represented by the keywords <VAR>true</VAR> or <VAR>false</VAR>.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.2 (page 37).
                @see        PdfObject
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.FALSE">
            <summary>
                A possible value of  PdfBoolean
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.TRUE">
            <summary>
                A possible value of  PdfBoolean
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.Pdftrue">
            <summary>
                static membervariables (possible values of a bool object)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean._value">
            <summary>
                membervariables
            </summary>
            <summary>
                the bool value of this object
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBoolean.#ctor(System.Boolean)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfBoolean -object.
            </summary>
            <param name="value">the value of the new  PdfObject </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBoolean.#ctor(System.String)">
            <summary>
                Constructs a  PdfBoolean -object.
                @throws        BadPdfFormatException    thrown if the <VAR>value</VAR> isn't ' true ' or ' false '
            </summary>
            <param name="value">the value of the new  PdfObject , represented as a  string </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfBoolean.BooleanValue">
            <summary>
                methods returning the value of this object
            </summary>
            <summary>
                Returns the primitive value of the  PdfBoolean -object.
            </summary>
            <returns>the actual value of the object.</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBorderArray">
            <summary>
                A  PdfBorderArray  defines the border of a  PdfAnnotation .
                @see        PdfArray
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderArray.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new  PdfBorderArray .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderArray.#ctor(System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfDashPattern)">
            <summary>
                Constructs a new  PdfBorderArray .
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBorderDictionary">
            <summary>
                A  PdfBorderDictionary  define the appearance of a Border (Annotations).
                @see     PdfDictionary
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderDictionary.#ctor(System.Single,System.Int32,iTextSharp.text.pdf.PdfDashPattern)">
            <summary>
                Constructs a  PdfBorderDictionary .
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCell">
            <summary>
                A  PdfCell  is the PDF translation of a  Cell .
                A  PdfCell  is an  ArrayList  of  PdfLine s.
                @see     iTextSharp.text.Rectangle
                @see     iTextSharp.text.Cell
                @see     PdfLine
                @see     PdfTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._images">
            <summary>
                These are the Images in the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._contentHeight">
            <summary>
                This is the total height of the content of the cell.  Note that the actual cell
                height may be larger due to another cell on the row *
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._line">
            <summary>
                These are the PdfLines in the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._lines">
            <summary>
                These are the PdfLines in the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._useAscender">
            <summary>
                Indicates that the largest ascender height should be used to
                determine the height of the first line. Setting this to true can help
                with vertical alignment problems.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._useBorderPadding">
            <summary>
                Adjusts the cell contents to compensate for border widths.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell._useDescender">
            <summary>
                Indicates that the largest descender height should be added to the height of
                the last line (so characters like y don't dip into the border).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.#ctor(iTextSharp.text.Cell,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfCell -object.
            </summary>
            <param name="cell">the original  Cell </param>
            <param name="rownumber">the number of the  Row  the  Cell  was in.</param>
            <param name="left">the left border of the  PdfCell </param>
            <param name="right">the right border of the  PdfCell </param>
            <param name="top">the top border of the  PdfCell </param>
            <param name="cellspacing">the cellspacing of the  Table </param>
            <param name="cellpadding">the cellpadding of the  Table </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Cellpadding">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the cellpadding of the cell.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Cellspacing">
            <summary>
                This is the cellspacing of the cell.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.GroupNumber">
            <summary>
                This is the number of the group the cell is in.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Leading">
            <summary>
                This is the leading of the lines.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Rownumber">
            <summary>
                This is the number of the row the cell is in.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Rowspan">
            <summary>
                This is the rowspan of the cell.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseAscender">
            <summary>
                Gets the value of {@link #useAscender}
            </summary>
            <returns>useAscender</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseBorderPadding">
            <summary>
                Sets the value of {@link #useBorderPadding}.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseDescender">
            <summary>
                Gets the value of {@link #useDescender}
            </summary>
            <returns>useDescender</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Header">
            <summary>
                Indicates if this cell belongs to the header of a  PdfTable
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.FirstLineRealHeight">
            <summary>
                Calculates what the height of the first line should be so that the content will be
                flush with the top.  For text, this is the height of the ascender.  For an image,
                it is the actual height of the image.
            </summary>
            <returns>the real height of the first line</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.flushCurrentLine">
            <summary>
                overriding of the Rectangle methods
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.getBorderWidthInside(System.Int32)">
            <summary>
                Gets the amount of the border for the specified side that is inside the Rectangle.
                For non-variable width borders this is only 1/2 the border width on that side.  This
                always returns 0 if {@link #useBorderPadding} is false;
            </summary>
            <param name="side">the side to check. One of the side constants in {@link com.lowagie.text.Rectangle}</param>
            <returns>the borderwidth inside the cell</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.removeLine(System.Int32)">
            <summary>
                Returns the lower left x-coordinaat.
            </summary>
            <returns>the lower left x-coordinaat</returns>
            <summary>
                Returns the upper right x-coordinate.
            </summary>
            <returns>the upper right x-coordinate</returns>
            <summary>
                Returns the upper right y-coordinate.
            </summary>
            <returns>the upper right y-coordinate</returns>
            <summary>
                Returns the lower left y-coordinate.
            </summary>
            <returns>the lower left y-coordinate</returns>
            <summary>
                methods
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfChunk">
            <summary>
                A  PdfChunk  is the PDF translation of a  Chunk .
                A  PdfChunk  is a  PdfString  in a certain
                PdfFont  and  Color .
                @see     PdfString
                @see     PdfFont
                @see     iTextSharp.text.Chunk
                @see     iTextSharp.text.Font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk._keysAttributes">
            <summary>
                The allowed attributes in variable  attributes .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk._keysNoStroke">
            <summary>
                The allowed attributes in variable  noStroke .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.Attributes">
            <summary>
                Metric attributes.
                This attributes require the mesurement of characters widths when rendering
                such as underline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.changeLeading">
            <summary>
                Indicates if the height and offset of the Image has to be taken into account
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.encoding">
            <summary>
                The encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.font">
            <summary>
                The font for this  PdfChunk .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.image">
            <summary>
                The image in this  PdfChunk , if it has one
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.NewlineSplit">
            <summary>
                true  if the chunk split was cause by a newline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.NoStroke">
            <summary>
                Non metric attributes.
                This attributes do not require the mesurement of characters widths when rendering
                such as Color.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.OffsetX">
            <summary>
                The offset in the x direction for the image
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.OffsetY">
            <summary>
                The offset in the y direction for the image
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.value">
            <summary>
                The value of this object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.#ctor(System.String,iTextSharp.text.pdf.PdfChunk)">
            <summary>
                membervariables
            </summary>
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfChunk -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.#ctor(iTextSharp.text.Chunk,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Constructs a  PdfChunk -object.
            </summary>
            <param name="chunk">the original  Chunk -object</param>
            <param name="action">the  PdfAction  if the  Chunk  comes from an  Anchor </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.ChangeLeading">
            <summary>
                methods
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.TextRise">
            <summary>
                Gets the text displacement relatiev to the baseline.
            </summary>
            <returns>a displacement in points</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Length">
            <summary>
                Gets the encoding of this string.
            </summary>
            <returns>a  string </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.GetUnicodeEquivalent(System.Int32)">
            <summary>
                Gets the Unicode equivalent to a CID.
                The (inexistent) CID FF00 is translated as '\n'.
                It has only meaning with CJK fonts with Identity encoding.
            </summary>
            <param name="c">the CID code</param>
            <returns>the Unicode equivalent</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.ToString">
            <summary>
                Gets the image in the  PdfChunk .
            </summary>
            <returns>the image or  null </returns>
            <summary>
                Gets the image offset in the x direction
            </summary>
            <returns>the image offset in the x direction</returns>
            <summary>
                Gets the image offset in the y direction
            </summary>
            <returns>Gets the image offset in the y direction</returns>
            <summary>
                sets the value.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.AdjustLeft(System.Single)">
            <summary>
                Correction for the tab position based on the left starting position.
                @since   2.1.2
            </summary>
            <param name="newValue">the new value for the left X.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsHorizontalSeparator">
            <summary>
                Checks if this  PdfChunk  is a horizontal Separator Chunk.
                @since   2.1.2
            </summary>
            <returns>true if this chunk is a horizontal separator.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsSeparator">
            <summary>
                Checks if this  PdfChunk  is a Separator Chunk.
                @since   2.1.2
            </summary>
            <returns>true if this chunk is a separator.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsTab">
            <summary>
                Checks if this  PdfChunk  is a tab Chunk.
                @since   2.1.2
            </summary>
            <returns>true if this chunk is a separator.</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfColor">
            <summary>
                A  PdfColor  defines a Color (it's a  PdfArray  containing 3 values).
                @see        PdfDictionary
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs a new  PdfColor .
            </summary>
            <param name="red">a value between 0 and 255</param>
            <param name="green">a value between 0 and 255</param>
            <param name="blue">a value between 0 and 255</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentByte">
            <summary>
                PdfContentByte  is an object containing the user positioned
                text and graphic contents of a page. It knows how to apply the proper
                font encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_CENTER">
            <summary>
                The alignement is center
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_LEFT">
            <summary>
                The alignement is left
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_RIGHT">
            <summary>
                The alignement is right
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_BUTT">
            <summary>
                A possible line cap value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_PROJECTING_SQUARE">
            <summary>
                A possible line cap value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_ROUND">
            <summary>
                A possible line cap value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_BEVEL">
            <summary>
                A possible line join value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_MITER">
            <summary>
                A possible line join value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_ROUND">
            <summary>
                A possible line join value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_CLIP">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_CLIP">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE_CLIP">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_INVISIBLE">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_STROKE">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_STROKE_CLIP">
            <summary>
                A possible text rendering value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.Content">
            <summary>
                This is the actual content
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LayerDepth">
            <summary>
                The list were we save/restore the layer depth
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.Pdf">
            <summary>
                This is the PdfDocument
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.Separator">
            <summary>
                The separator between commands.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.State">
            <summary>
                This is the GraphicState in use
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.StateList">
            <summary>
                The list were we save/restore the state
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.Writer">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the writer
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.CharacterSpacing">
            <summary>
                Gets the current character spacing.
            </summary>
            <returns>the current character spacing</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Duplicate">
            <summary>
                Gets a duplicate of this  PdfContentByte . All
                the members are copied by reference but the buffer stays different.
            </summary>
            <returns>a copy of this  PdfContentByte </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.HorizontalScaling">
            <summary>
                Gets the current character spacing.
            </summary>
            <returns>the current character spacing</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.InternalBuffer">
            <summary>
                Gets the internal buffer.
            </summary>
            <returns>the internal buffer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Leading">
            <summary>
                Gets the current text leading.
            </summary>
            <returns>the current text leading</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.PdfDocument">
            <summary>
                Gets the  PdfDocument  in use by this object.
            </summary>
            <returns>the  PdfDocument  in use by this object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.PdfWriter">
            <summary>
                Gets the  PdfWriter  in use by this object.
            </summary>
            <returns>the  PdfWriter  in use by this object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.RootOutline">
            <summary>
                Gets the root outline.
            </summary>
            <returns>the root outline</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.WordSpacing">
            <summary>
                Gets the current word spacing.
            </summary>
            <returns>the current word spacing</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Xtlm">
            <summary>
                Gets the x position of the text line matrix.
            </summary>
            <returns>the x position of the text line matrix</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Ytlm">
            <summary>
                Gets the y position of the text line matrix.
            </summary>
            <returns>the y position of the text line matrix</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Size">
            <summary>
                Gets the size of this content.
            </summary>
            <returns>the size of the content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BezierArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Generates an array of bezier curves to draw an arc.
                (x1, y1) and (x2, y2) are the corners of the enclosing rectangle.
                Angles, measured in degrees, start with 0 to the right (the positive X
                axis) and increase counter-clockwise.  The arc extends from startAng
                to startAng+extent.  I.e. startAng=0 and extent=180 yields an openside-down
                semi-circle.
                The resulting coordinates are of the form float[]{x1,y1,x2,y2,x3,y3, x4,y4}
                such that the curve goes from (x1, y1) to (x4, y4) with (x2, y2) and
                (x3, y3) as their respective Bezier control points.
                Note: this code was taken from ReportLab (www.reportlab.com), an excelent
                PDF generator for Python.
            </summary>
            <param name="x1">a corner of the enclosing rectangle</param>
            <param name="y1">a corner of the enclosing rectangle</param>
            <param name="x2">a corner of the enclosing rectangle</param>
            <param name="y2">a corner of the enclosing rectangle</param>
            <param name="startAng">starting angle in degrees</param>
            <param name="extent">angle extent in degrees</param>
            <returns>a list of float[] with the bezier curves</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.GetKernArray(System.String,iTextSharp.text.pdf.BaseFont)">
            <summary>
                Constructs a kern array for a text in a certain font
            </summary>
            <param name="text">the text</param>
            <param name="font">the font</param>
            <returns>a PdfTextArray</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image)">
            <summary>
                Adds an  Image  to the page. The  Image  must have
                absolute positioning.
                @throws DocumentException if the  Image  does not have absolute positioning
            </summary>
            <param name="image">the  Image  object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Boolean)">
            <summary>
                Adds an  Image  to the page. The  Image  must have
                absolute positioning. The image can be placed inline.
                @throws DocumentException if the  Image  does not have absolute positioning
            </summary>
            <param name="image">the  Image  object</param>
            <param name="inlineImage"> true  to place this image inline,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Adds an  Image  to the page. The positioning of the  Image
                is done with the transformation matrix. To position an  image  at (x,y)
                use AddImage(image, image_width, 0, 0, image_height, x, y).
                @throws DocumentException on error
            </summary>
            <param name="image">the  Image  object</param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Adds an  Image  to the page. The positioning of the  Image
                is done with the transformation matrix. To position an  image  at (x,y)
                use AddImage(image, image_width, 0, 0, image_height, x, y). The image can be placed inline.
                @throws DocumentException on error
            </summary>
            <param name="image">the  Image  object</param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <param name="inlineImage"> true  to place this image inline,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddOutline(iTextSharp.text.pdf.PdfOutline,System.String)">
            <summary>
                Adds a named outline to the document.
            </summary>
            <param name="outline">the outline</param>
            <param name="name">the name for the local destination</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddPsxObject(iTextSharp.text.pdf.PdfPsxObject)">
            <summary>
                Adds a PostScript XObject to this content.
            </summary>
            <param name="psobject">the object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Adds a template to this content.
            </summary>
            <param name="template">the template</param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single)">
            <summary>
                Adds a template to this content.
            </summary>
            <param name="template">the template</param>
            <param name="x">the x location of this template</param>
            <param name="y">the y location of this template</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Arc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Draws a partial ellipse inscribed within the rectangle x1,y1,x2,y2,
                starting at startAng degrees and covering extent degrees. Angles
                start with 0 to the right (+x) and increase counter-clockwise.
            </summary>
            <param name="x1">a corner of the enclosing rectangle</param>
            <param name="y1">a corner of the enclosing rectangle</param>
            <param name="x2">a corner of the enclosing rectangle</param>
            <param name="y2">a corner of the enclosing rectangle</param>
            <param name="startAng">starting angle in degrees</param>
            <param name="extent">angle extent in degrees</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginLayer(iTextSharp.text.pdf.IPdfOcg)">
            <summary>
                Begins a graphic block whose visibility is controled by the  layer .
                Blocks can be nested. Each block must be terminated by an {@link #endLayer()}.
                Note that nested layers with {@link PdfLayer#addChild(PdfLayer)} only require a single
                call to this method and a single call to {@link #endLayer()}; all the nesting control
                is built in.
            </summary>
            <param name="layer">the layer</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginMarkedContentSequence(iTextSharp.text.pdf.PdfStructureElement)">
            <summary>
                Begins a marked content sequence. This sequence will be tagged with the structure  struc .
                The same structure can be used several times to connect text that belongs to the same logical segment
                but is in a different location, like the same paragraph crossing to another page, for example.
            </summary>
            <param name="struc">the tagging structure</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginMarkedContentSequence(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfDictionary,System.Boolean)">
            <summary>
                Begins a marked content sequence. If property is  null  the mark will be of the type
                BMC  otherwise it will be  BDC .
                to include the property in the resource dictionary with the possibility of reusing
            </summary>
            <param name="tag">the tag</param>
            <param name="property">the property</param>
            <param name="inline"> true  to include the property in the content or  false </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginMarkedContentSequence(iTextSharp.text.pdf.PdfName)">
            <summary>
                This is just a shorthand to  beginMarkedContentSequence(tag, null, false) .
            </summary>
            <param name="tag">the tag</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginText">
            <summary>
                Starts the writing of text.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Circle(System.Single,System.Single,System.Single)">
            <summary>
                Draws a circle. The endpoint will (x+r, y).
            </summary>
            <param name="x">x center of circle</param>
            <param name="y">y center of circle</param>
            <param name="r">radius of circle</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ConcatCtm(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Concatenate a matrix to the current transformation matrix.
            </summary>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreateAppearance(System.Single,System.Single)">
            <summary>
                Creates a new appearance to be used with form fields.
            </summary>
            <param name="width">the bounding box width</param>
            <param name="height">the bounding box height</param>
            <returns>the appearance created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Create a new colored tiling pattern.
                May be either positive or negative, but not zero.
                May be either positive or negative, but not zero.
            </summary>
            <param name="width">the width of the pattern</param>
            <param name="height">the height of the pattern</param>
            <param name="xstep">the desired horizontal spacing between pattern cells.</param>
            <param name="ystep">the desired vertical spacing between pattern cells.</param>
            <returns>the  PdfPatternPainter  where the pattern will be created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single)">
            <summary>
                Create a new colored tiling pattern. Variables xstep and ystep are set to the same values
                of width and height.
            </summary>
            <param name="width">the width of the pattern</param>
            <param name="height">the height of the pattern</param>
            <returns>the  PdfPatternPainter  where the pattern will be created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,System.Single,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Create a new uncolored tiling pattern.
                May be either positive or negative, but not zero.
                May be either positive or negative, but not zero.
            </summary>
            <param name="width">the width of the pattern</param>
            <param name="height">the height of the pattern</param>
            <param name="xstep">the desired horizontal spacing between pattern cells.</param>
            <param name="ystep">the desired vertical spacing between pattern cells.</param>
            <param name="color">the default color. Can be  null </param>
            <returns>the  PdfPatternPainter  where the pattern will be created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Create a new uncolored tiling pattern.
                Variables xstep and ystep are set to the same values
                of width and height.
            </summary>
            <param name="width">the width of the pattern</param>
            <param name="height">the height of the pattern</param>
            <param name="color">the default color. Can be  null </param>
            <returns>the  PdfPatternPainter  where the pattern will be created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreateTemplate(System.Single,System.Single)">
            <summary>
                Creates a new template.
                Creates a new template that is nothing more than a form XObject. This template can be included
                in this  PdfContentByte  or in another template. Templates are only written
                to the output when the document is closed permitting things like showing text in the first page
                that is only defined in the last page.
            </summary>
            <param name="width">the bounding box width</param>
            <param name="height">the bounding box height</param>
            <returns>the templated created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Ellipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Draws an ellipse inscribed within the rectangle x1,y1,x2,y2.
            </summary>
            <param name="x1">a corner of the enclosing rectangle</param>
            <param name="y1">a corner of the enclosing rectangle</param>
            <param name="x2">a corner of the enclosing rectangle</param>
            <param name="y2">a corner of the enclosing rectangle</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndLayer">
            <summary>
                Ends a layer controled graphic block. It will end the most recent open block.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndMarkedContentSequence">
            <summary>
                Ends a marked content sequence
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndText">
            <summary>
                Ends the writing of text and makes the current font invalid.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LocalDestination(System.String,iTextSharp.text.pdf.PdfDestination)">
            <summary>
                The local destination to where a local goto with the same
                name will jump.
                false  if a local destination with the same name
                already exists
            </summary>
            <param name="name">the name of this local destination</param>
            <param name="destination">the  PdfDestination  with the jump coordinates</param>
            <returns> true  if the local destination was added,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LocalGoto(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements a link to other part of the document. The jump will
                be made to a local destination with the same name, that must exist.
            </summary>
            <param name="name">the name for this link</param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveText(System.Single,System.Single)">
            <summary>
                Moves to the start of the next line, offset from the start of the current line.
            </summary>
            <param name="x">x-coordinate of the new current point</param>
            <param name="y">y-coordinate of the new current point</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveTextWithLeading(System.Single,System.Single)">
            <summary>
                Moves to the start of the next line, offset from the start of the current line.
                As a side effect, this sets the leading parameter in the text state.
            </summary>
            <param name="x">offset of the new current point</param>
            <param name="y">y-coordinate of the new current point</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineShowText(System.String)">
            <summary>
                Moves to the next line and shows  text .
            </summary>
            <param name="text">the text to write</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineShowText(System.Single,System.Single,System.String)">
            <summary>
                Moves to the next line and shows text string, using the given values of the character and word spacing parameters.
            </summary>
            <param name="wordSpacing">a parameter</param>
            <param name="charSpacing">a parameter</param>
            <param name="text">the text to write</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineText">
            <summary>
                Moves to the start of the next line.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.PaintShading(iTextSharp.text.pdf.PdfShading)">
            <summary>
                Paints using a shading object.
            </summary>
            <param name="shading">the shading object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.PaintShading(iTextSharp.text.pdf.PdfShadingPattern)">
            <summary>
                Paints using a shading pattern.
            </summary>
            <param name="shading">the shading pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RemoteGoto(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements a link to another document.
            </summary>
            <param name="filename">the filename for the remote document</param>
            <param name="name">the name to jump to</param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RemoteGoto(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements a link to another document.
            </summary>
            <param name="filename">the filename for the remote document</param>
            <param name="page">the page to jump to</param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Reset">
            <summary>
                Closes the path and strokes it.
            </summary>
            <summary>
                Fills the path, using the non-zero winding number rule to determine the region to fill.
            </summary>
            <summary>
                Fills the path, using the even-odd rule to determine the region to fill.
            </summary>
            <summary>
                Fills the path using the non-zero winding number rule to determine the region to fill and strokes it.
            </summary>
            <summary>
                Closes the path, fills it using the non-zero winding number rule to determine the region to fill and strokes it.
            </summary>
            <summary>
                Fills the path, using the even-odd rule to determine the region to fill and strokes it.
            </summary>
            <summary>
                Closes the path, fills it using the even-odd rule to determine the region to fill and strokes it.
            </summary>
            <summary>
                Makes this  PdfContentByte  empty.
                Calls  reset( true )
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Reset(System.Boolean)">
            <summary>
                Makes this  PdfContentByte  empty.
                @since 2.1.6
            </summary>
            <param name="validateContent">will call  sanityCheck()  if true.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RestoreState">
            <summary>
                Restores the graphic state.  saveState  and
                restoreState  must be balanced.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RoundRectangle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Adds a round rectangle to the current path.
            </summary>
            <param name="x">x-coordinate of the starting point</param>
            <param name="y">y-coordinate of the starting point</param>
            <param name="w">width</param>
            <param name="h">height</param>
            <param name="r">radius of the arc corner</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SanityCheck">
            <summary>
                Checks for any dangling state: Mismatched save/restore state, begin/end text,
                begin/end layer, or begin/end marked content sequence.
                If found, this function will throw.  This function is called automatically
                during a reset() (from Document.newPage() for example), and before writing
                itself out in toPdf().
                One possible cause: not calling myPdfGraphics2D.dispose() will leave dangling
                saveState() calls.
                @since 2.1.6
                @throws IllegalPdfSyntaxException (a runtime exception)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SaveState">
            <summary>
                Saves the graphic state.  saveState  and
                restoreState  must be balanced.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetAction(iTextSharp.text.pdf.PdfAction,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements an action in an area.
            </summary>
            <param name="action">the  PdfAction </param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCharacterSpacing(System.Single)">
            <summary>
                Sets the character spacing parameter.
            </summary>
            <param name="value">a parameter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorFill(iTextSharp.text.BaseColor)">
            <summary>
                Sets the fill color.  color  can be an
                ExtendedColor .
            </summary>
            <param name="value">the color</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorFill(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            <summary>
                Sets the fill color to a spot color.
                is 100% color
            </summary>
            <param name="sp">the spot color</param>
            <param name="tint">the tint for the spot color. 0 is no color and 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorStroke(iTextSharp.text.BaseColor)">
            <summary>
                Sets the stroke color.  color  can be an
                ExtendedColor .
            </summary>
            <param name="value">the color</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorStroke(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            <summary>
                Sets the stroke color to a spot color.
                is 100% color
            </summary>
            <param name="sp">the spot color</param>
            <param name="tint">the tint for the spot color. 0 is no color and 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetDefaultColorspace(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Sets the default colorspace.
                or  PdfName.DEFAULTCMYK
            </summary>
            <param name="name">the name of the colorspace. It can be  PdfName.DEFAULTGRAY ,  PdfName.DEFAULTRGB </param>
            <param name="obj">the colorspace. A  null  or  PdfNull  removes any colorspace with the same name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
                Set the font and the size for the subsequent text writing.
            </summary>
            <param name="bf">the font</param>
            <param name="size">the font size in points</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGState(iTextSharp.text.pdf.PdfGState)">
            <summary>
                Draws a TextField.
            </summary>
            <summary>
                Draws a TextField.
            </summary>
            <summary>
                Draws a button.
            </summary>
            <summary>
                Sets the graphic state
            </summary>
            <param name="gstate">the graphic state</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetHorizontalScaling(System.Single)">
            <summary>
                Sets the horizontal scaling parameter.
            </summary>
            <param name="value">a parameter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLeading(System.Single)">
            <summary>
                Adds the content of another  PdfContent -object to this object.
            </summary>
            <param name="v">another  PdfByteContent -object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.String)">
            <summary>
                Outputs a  string  directly to the content.
            </summary>
            <param name="s">the  string </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.Char)">
            <summary>
                Outputs a  char  directly to the content.
            </summary>
            <param name="c">the  char </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.Single)">
            <summary>
                Outputs a  float  directly to the content.
            </summary>
            <param name="n">the  float </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter)">
            <summary>
                Sets the fill color to a pattern. The pattern can be
                colored or uncolored.
            </summary>
            <param name="p">the pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.BaseColor)">
            <summary>
                Sets the fill color to an uncolored pattern.
            </summary>
            <param name="p">the pattern</param>
            <param name="color">the color of the pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.BaseColor,System.Single)">
            <summary>
                Sets the fill color to an uncolored pattern.
            </summary>
            <param name="p">the pattern</param>
            <param name="color">the color of the pattern</param>
            <param name="tint">the tint if the color is a spot color, ignored otherwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.BaseColor)">
            <summary>
                Sets the stroke color to an uncolored pattern.
            </summary>
            <param name="p">the pattern</param>
            <param name="color">the color of the pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.BaseColor,System.Single)">
            <summary>
                Sets the stroke color to an uncolored pattern.
            </summary>
            <param name="p">the pattern</param>
            <param name="color">the color of the pattern</param>
            <param name="tint">the tint if the color is a spot color, ignored otherwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter)">
            <summary>
                Sets the stroke color to a pattern. The pattern can be
                colored or uncolored.
            </summary>
            <param name="p">the pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetShadingFill(iTextSharp.text.pdf.PdfShadingPattern)">
            <summary>
                Sets the shading fill pattern.
            </summary>
            <param name="shading">the shading pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetShadingStroke(iTextSharp.text.pdf.PdfShadingPattern)">
            <summary>
                Sets the shading stroke pattern
            </summary>
            <param name="shading">the shading pattern</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Changes the text matrix.
                Remark: this operation also initializes the current point position.
            </summary>
            <param name="a">operand 1,1 in the matrix</param>
            <param name="b">operand 1,2 in the matrix</param>
            <param name="c">operand 2,1 in the matrix</param>
            <param name="d">operand 2,2 in the matrix</param>
            <param name="x">operand 3,1 in the matrix</param>
            <param name="y">operand 3,2 in the matrix</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextMatrix(System.Single,System.Single)">
            <summary>
                Changes the text matrix. The first four parameters are {1,0,0,1}.
                Remark: this operation also initializes the current point position.
            </summary>
            <param name="x">operand 3,1 in the matrix</param>
            <param name="y">operand 3,2 in the matrix</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextRenderingMode(System.Int32)">
            <summary>
                Sets the text rendering parameter.
            </summary>
            <param name="value">a parameter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextRise(System.Single)">
            <summary>
                Sets the text rise parameter.
                This allows to write text in subscript or basescript mode.
            </summary>
            <param name="value">a parameter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetWordSpacing(System.Single)">
            <summary>
                Sets the word spacing parameter.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText(System.String)">
            <summary>
                Shows the  text .
            </summary>
            <param name="text">the text to write</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText(iTextSharp.text.pdf.PdfTextArray)">
            <summary>
                Show an array of text.
            </summary>
            <param name="text">array of text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextAligned(System.Int32,System.String,System.Single,System.Single,System.Single)">
            <summary>
                Shows text right, left or center aligned with rotation.
            </summary>
            <param name="alignment">the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT</param>
            <param name="text">the text to show</param>
            <param name="x">the x pivot position</param>
            <param name="y">the y pivot position</param>
            <param name="rotation">the rotation to be applied in degrees counterclockwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextAlignedKerned(System.Int32,System.String,System.Single,System.Single,System.Single)">
            <summary>
                Shows text kerned right, left or center aligned with rotation.
            </summary>
            <param name="alignment">the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT</param>
            <param name="text">the text to show</param>
            <param name="x">the x pivot position</param>
            <param name="y">the y pivot position</param>
            <param name="rotation">the rotation to be applied in degrees counterclockwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextKerned(System.String)">
            <summary>
                Shows the  text  kerned.
            </summary>
            <param name="text">the text to write</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.VariableRectangle(iTextSharp.text.Rectangle)">
            <summary>
                Adds a variable width border to the current path.
                Only use if {@link com.lowagie.text.Rectangle#isUseVariableBorders() Rectangle.isUseVariableBorders}
                = true.
            </summary>
            <param name="rect">a  Rectangle </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EscapeString(System.Byte[])">
            <summary>
                Escapes a  byte  array according to the PDF conventions.
            </summary>
            <param name="b">the  byte  array to escape</param>
            <returns>an escaped  byte  array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EscapeString(System.Byte[],iTextSharp.text.pdf.ByteBuffer)">
            <summary>
                Escapes a  byte  array according to the PDF conventions.
            </summary>
            <param name="b">the  byte  array to escape</param>
            <param name="content"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CheckNoPattern(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
                Throws an error if it is a pattern.
            </summary>
            <param name="t">the object to check</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.OutputColorNumbers(iTextSharp.text.BaseColor,System.Single)">
            <summary>
                Outputs the color values to the content.
            </summary>
            <param name="color">The color</param>
            <param name="tint">the tint if it is a spot color, ignored otherwise</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CheckWriter">
            <summary>
                Check if we have a valid PdfWriter.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.helperCmyk(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Helper to validate and write the CMYK color components.
            </summary>
            <param name="cyan">the intensity of cyan. A value between 0 and 1</param>
            <param name="magenta">the intensity of magenta. A value between 0 and 1</param>
            <param name="yellow">the intensity of yellow. A value between 0 and 1</param>
            <param name="black">the intensity of black. A value between 0 and 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.helperRgb(System.Single,System.Single,System.Single)">
            <summary>
                Helper to validate and write the RGB color components
            </summary>
            <param name="red">the intensity of red. A value between 0 and 1</param>
            <param name="green">the intensity of green. A value between 0 and 1</param>
            <param name="blue">the intensity of blue. A value between 0 and 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.showText2(System.String)">
            <summary>
                A helper to insert into the content stream the  text
                converted to bytes according to the font's encoding.
            </summary>
            <param name="text">the text to write</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.showTextAligned(System.Int32,System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                constructors
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentByte.GraphicState">
            <summary>
                This class keeps the graphic state of the current page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.CharSpace">
            <summary>
                The current character spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.ColorDetails">
            <summary>
                This is the color in use
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.FontDetails">
            <summary>
                This is the font in use
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.leading">
            <summary>
                The current text leading.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.Scale">
            <summary>
                The current horizontal scaling
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.size">
            <summary>
                This is the font size in use
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.WordSpace">
            <summary>
                The current word spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.XTlm">
            <summary>
                The x position of the text line matrix.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.YTlm">
            <summary>
                The y position of the text line matrix.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentParser">
            <summary>
                Parses the page or template content.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentParser.COMMAND_TYPE">
            <summary>
                Commands have this type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentParser._tokeniser">
            <summary>
                Holds value of property tokeniser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.#ctor(iTextSharp.text.pdf.PrTokeniser)">
            <summary>
                Creates a new instance of PdfContentParser
            </summary>
            <param name="tokeniser">the tokeniser with the content</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentParser.Tokeniser">
            <summary>
                Sets the tokeniser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.GetTokeniser">
            <summary>
                Gets the tokeniser.
            </summary>
            <returns>the tokeniser.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.NextValidToken">
            <summary>
                Reads the next token skipping over the comments.
                @throws IOException on error
            </summary>
            <returns> true  if a token was read,  false  if the end of content was reached</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.Parse(System.Collections.Generic.IList{iTextSharp.text.pdf.PdfObject})">
            <summary>
                Parses a single command from the content. Each command is output as an array of arguments
                having the command itself as the last element. The returned array will be empty if the
                end of content was reached.
                null  will create a new  ArrayList
                @throws IOException on error
            </summary>
            <param name="ls">an  ArrayList  to use. It will be cleared before using. If it's</param>
            <returns>the same  ArrayList  given as argument or a new one</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.ReadArray">
            <summary>
                Reads an array. The tokeniser must be positioned past the "[" token.
                @throws IOException on error
            </summary>
            <returns>an array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.ReadDictionary">
            <summary>
                Reads a dictionary. The tokeniser must be positioned past the "&lt;&lt;" token.
                @throws IOException on error
            </summary>
            <returns>the dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.ReadPrObject">
            <summary>
                Reads a pdf object.
                @throws IOException on error
            </summary>
            <returns>the pdf object</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContents">
            <summary>
                PdfContents  is a  PdfStream  containing the contents (text + graphics) of a  PdfPage .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContents.#ctor(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Rectangle)">
            <summary>
                Constructs a  PdfContents -object, containing text and general graphics.
                @throws BadPdfFormatException on error
            </summary>
            <param name="under">the direct content that is under all others</param>
            <param name="content">the graphics in a page</param>
            <param name="text">the text in a page</param>
            <param name="secondContent">the direct content that is over all others</param>
            <param name="page"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy">
            <summary>
                Make copies of PDF documents. Documents can be edited after reading and
                before writing them out.
                @author Mark Thompson
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCopy._rotateContents">
            <summary>
                Holds value of property rotateContents.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                Constructor
            </summary>
            <param name="document"></param>
            <param name="os">outputstream</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopy.RotateContents">
            <summary>
                Checks if the content is automatically adjusted to compensate
                the original page rotation.
            </summary>
            <returns>the auto-rotation status</returns>
            <summary>
                Flags the content to be automatically adjusted to compensate
                the original page rotation. The default is  true .
                otherwise
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.AddPage(iTextSharp.text.pdf.PdfImportedPage)">
            <summary>
                Add an imported page to our output
                @throws IOException, BadPdfFormatException
            </summary>
            <param name="iPage">an imported page</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.AddPage(iTextSharp.text.Rectangle,System.Int32)">
            <summary>
                Adds a blank page.
                @since	2.1.5
            </summary>
            <param name="rect">page dimension</param>
            <param name="rotation">rotation angle in degrees</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyAcroForm(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Copy the acroform for an input document. Note that you can only have one,
                we make no effort to merge them.
                @throws IOException, BadPdfFormatException
            </summary>
            <param name="reader">The reader of the input file that is being copied</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CreatePageStamp(iTextSharp.text.pdf.PdfImportedPage)">
            <summary>
                Create a page stamp. New content and annotations, including new fields, are allowed.
                The fields added cannot have parents in another pages. This method modifies the PdfReader instance.
                The general usage to stamp something in a page is:
                PdfImportedPage page = copy.getImportedPage(reader, 1);
                PdfCopy.PageStamp ps = copy.createPageStamp(page);
                ps.addAnnotation(PdfAnnotation.createText(copy, new Rectangle(50, 180, 70, 200), "Hello", "No Thanks", true,
                "Comment"));
                PdfContentByte under = ps.getUnderContent();
                under.addImage(img);
                PdfContentByte over = ps.getOverContent();
                over.beginText();
                over.setFontAndSize(bf, 18);
                over.setTextMatrix(30, 30);
                over.showText("total page " + totalPage);
                over.endText();
                ps.alterContents();
                copy.addPage(page);
            </summary>
            <param name="iPage">an imported page</param>
            <returns>the  PageStamp </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            <summary>
                Grabs a page from the input document
            </summary>
            <param name="reader">the reader of the document</param>
            <param name="pageNumber">which page to get</param>
            <returns>the page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.Add(iTextSharp.text.pdf.PdfPage,iTextSharp.text.pdf.PdfContents)">
            <summary>
                Signals that the  Document  was closed and that no other
                Elements  will be added.
                The pages-tree is built and written to the outputstream.
                A Catalog is constructed, as well as an Info-object,
                the referencetable is composed and everything is written
                to the outputstream embedded in a Trailer.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyArray(iTextSharp.text.pdf.PdfArray)">
            <summary>
                Translate a PRArray to a PdfArray. Also translate all of the objects contained
                in it
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyDictionary(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Translate a PRDictionary to a PdfDictionary. Also translate all of the
                objects contained in it.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyIndirect(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Translate a PRIndirectReference to a PdfIndirectReference
                In addition, translates the object numbers, and copies the
                referenced object to the output file.
                NB: PRIndirectReferences (and PRIndirectObjects) really need to know what
                file they came from, because each file has its own namespace. The translation
                we do from their namespace to ours is *at best* heuristic, and guaranteed to
                fail under some circumstances.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyObject(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Translate a PR-object to a Pdf-object
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyStream(iTextSharp.text.pdf.PrStream)">
            <summary>
                Translate a PRStream to a PdfStream. The data part copies itself.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.GetCatalog(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                the getCatalog method is part of PdfWriter.
                we wrap this so that we can extend it
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetFromIPage(iTextSharp.text.pdf.PdfImportedPage)">
            <summary>
                convenience method. Given an importedpage, set our "globals"
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetFromReader(iTextSharp.text.pdf.PdfReader)">
            <summary>
                convenience method. Given a reader, set our "globals"
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.StampContent.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PageResources)">
            <summary>
                Creates a new instance of StampContent
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopy.StampContent.Duplicate">
            <summary>
                Gets a duplicate of this  PdfContentByte . All
                the members are copied by reference but the buffer stays different.
            </summary>
            <returns>a copy of this  PdfContentByte </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy.IndirectReferences">
            <summary>
                This class holds information about indirect references, since they are
                renumbered by iText.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy.RefKey">
            <summary>
                A key to allow us to hash indirect references
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFields">
            <summary>
                Concatenates PDF documents including form fields. The rules for the form field
                concatenation are the same as in Acrobat. All the documents are kept in memory unlike
                PdfCopy.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="os">the output stream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.#ctor(System.IO.Stream,System.Char)">
            <summary>
                Creates a new instance.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="os">the output stream</param>
            <param name="pdfVersion">the pdf version the output will have</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.FullCompression">
            <summary>
                Gets the 1.5 compression status.
            </summary>
            <returns> true  if the 1.5 compression is on</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.Outlines">
            <summary>
                Sets the bookmarks. The list structure is defined in
                {@link SimpleBookmark}.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.Writer">
            <summary>
                Gets the underlying PdfWriter.
            </summary>
            <returns>the underlying PdfWriter</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(byte[], byte[], int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(java.security.cert.Certificate[], int[],
                int)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.ViewerPreferences">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName,
                com.lowagie.text.pdf.PdfObject)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Concatenates a PDF document.
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Concatenates a PDF document selecting the pages to keep. The pages are described as a
                List  of  Integer . The page ordering can be changed but
                no page repetitions are allowed.
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
            <param name="pagesToKeep">the pages to keep</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader,System.String)">
            <summary>
                Concatenates a PDF document selecting the pages to keep. The pages are described as
                ranges. The page ordering can be changed but
                no page repetitions are allowed.
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
            <param name="ranges">the comma separated ranges as described in {@link SequenceList}</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddJavaScript(System.String)">
            <summary>
                Adds JavaScript to the global document
            </summary>
            <param name="js">the JavaScript</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.Close">
            <summary>
                Closes the output document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.Open">
            <summary>
                Opens the document. This is usually not needed as AddDocument() will do it
                automatically.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if the document is already open
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="strength128Bits"> true  for 128 bit key length,  false  for 40 bit key length</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if the document is already open
            </summary>
            <param name="strength">true for 128 bit key length. false for 40 bit key length</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetFullCompression">
            <summary>
                Sets the document's compression to the new 1.5 mode with object streams and xref
                streams. It can be set at any time but once set it can't be unset.
                If set before opening the document it will also set the pdf version to 1.5.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFieldsImp">
            <summary>
                @author  psoares
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.IsPage(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Checks if a reference refers to a page object.
            </summary>
            <param name="refi">the reference that needs to be checked</param>
            <returns>true is the reference refers to a page object.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.IsVisited(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Checks if a reference has already been "visited" in the copy process.
            </summary>
            <param name="refi">the reference that needs to be checked</param>
            <returns>true if the reference was already visited</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.SetVisited(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Sets a reference to "visited" in the copy process.
            </summary>
            <param name="refi">the reference that needs to be set to "visited"</param>
            <returns>true if the reference was set to visited</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyForms">
            <summary>
                Allows you to add one (or more) existing PDF document(s) to
                create a new PDF and add the form of another PDF document to
                this new PDF.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCopyForms._fc">
            <summary>
                The class with the actual implementations.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance.
                @throws DocumentException on error
            </summary>
            <param name="os">the output stream</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.FullCompression">
            <summary>
                Gets the 1.5 compression status.
            </summary>
            <returns> true  if the 1.5 compression is on</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.Outlines">
            <summary>
                Sets the bookmarks. The list structure is defined in
                SimpleBookmark# .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.Writer">
            <summary>
                Gets the underlying PdfWriter.
            </summary>
            <returns>the underlying PdfWriter</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(byte[], byte[], int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(java.security.cert.Certificate[], int[],
                int)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.ViewerPreferences">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName,
                com.lowagie.text.pdf.PdfObject)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddDocument(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Concatenates a PDF document.
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddDocument(iTextSharp.text.pdf.PdfReader,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Concatenates a PDF document selecting the pages to keep. The pages are described as a
                List  of  Integer . The page ordering can be changed but
                no page repetitions are allowed.
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
            <param name="pagesToKeep">the pages to keep</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddDocument(iTextSharp.text.pdf.PdfReader,System.String)">
            <summary>
                Concatenates a PDF document selecting the pages to keep. The pages are described as
                ranges. The page ordering can be changed but
                no page repetitions are allowed.
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
            <param name="ranges">the comma separated ranges as described in {@link SequenceList}</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddJavaScript(System.String)">
            <summary>
                Adds JavaScript to the global document
            </summary>
            <param name="js">the JavaScript</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.Close">
            <summary>
                Closes the output document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.CopyDocumentFields(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Copies the form fields of this PDFDocument onto the PDF-Document which was added
                @throws DocumentException on error
            </summary>
            <param name="reader">the PDF document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.Open">
            <summary>
                Opens the document. This is usually not needed as addDocument() will do it
                automatically.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if the document is already open
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="strength128Bits"> true  for 128 bit key length,  false  for 40 bit key length</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if the document is already open
            </summary>
            <param name="strength">true for 128 bit key length. false for 40 bit key length</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetFullCompression">
            <summary>
                Sets the document's compression to the new 1.5 mode with object streams and xref
                streams. It can be set at any time but once set it can't be unset.
                If set before opening the document it will also set the pdf version to 1.5.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFormsImp">
            <summary>
                Allows you to add one (or more) existing PDF document(s)
                and add the form(s) of (an)other PDF document(s).
                @since 2.1.5
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFormsImp.#ctor(System.IO.Stream)">
            <summary>
                This sets up the output document
                @throws DocumentException
            </summary>
            <param name="os">The Outputstream pointing to the output document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFormsImp.CopyDocumentFields(iTextSharp.text.pdf.PdfReader)">
            <summary>
                This method feeds in the source document
                @throws DocumentException
            </summary>
            <param name="reader">The PDF reader containing the source document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFormsImp.MergeFields">
            <summary>
                This merge fields is slightly different from the mergeFields method
                of PdfCopyFields.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDashPattern">
            <summary>
                A  PdfDashPattern  defines a dash pattern as described in
                the PDF Reference Manual version 1.3 p 325 (section 8.4.3).
                @see        PdfArray
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern._dash">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the length of a dash.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern._gap">
            <summary>
                This is the length of a gap.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern._phase">
            <summary>
                This is the phase.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new  PdfDashPattern .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single)">
            <summary>
                Constructs a new  PdfDashPattern .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single,System.Single)">
            <summary>
                Constructs a new  PdfDashPattern .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Constructs a new  PdfDashPattern .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            <summary>
                Returns the PDF representation of this  PdfArray .
            </summary>
            <returns>an array of  byte s</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDate">
            <summary>
                PdfDate  is the PDF date object.
                PDF defines a standard date format. The PDF date format closely follows the format
                defined by the international standard ASN.1 (Abstract Syntax Notation One, defined
                in CCITT X.208 or ISO/IEC 8824). A date is a  PdfString  of the form:
                (D:YYYYMMDDHHmmSSOHH'mm')
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 7.2 (page 183-184)
                @see     PdfString
                @see     java.util.GregorianCalendar
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.#ctor(System.DateTime)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfDate -object.
            </summary>
            <param name="d">the date that has to be turned into a  PdfDate -object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.#ctor">
            <summary>
                Constructs a  PdfDate -object, representing the current day and time.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.Decode(System.String)">
            <summary>
                Adds a number of leading zeros to a given  string  in order to get a  string
                of a certain length.
            </summary>
            <returns>the resulting  string </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.GetW3CDate(System.String)">
            <summary>
                Gives the W3C format of the PdfDate.
            </summary>
            <param name="d">the date in the format D:YYYYMMDDHHmmSSOHH'mm'</param>
            <returns>a formatted date</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.GetW3CDate">
            <summary>
                Gives the W3C format of the PdfDate.
            </summary>
            <returns>a formatted date</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDestination">
            <summary>
                A  PdfColor  defines a Color (it's a  PdfArray  containing 3 values).
                @see        PdfDictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FIT">
            <summary>
                public static member-variables
            </summary>
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITB">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITBH">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITBV">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITH">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITR">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITV">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.XYZ">
            <summary>
                This is a possible destination type
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination._status">
            <summary>
                member variables
            </summary>
            <summary>
                Is the indirect reference to a page already added?
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new  PdfDestination .
                If <VAR>type</VAR> equals <VAR>FITB</VAR>, the bounding box of a page
                will fit the window of the Reader. Otherwise the type will be set to
                <VAR>FIT</VAR> so that the entire page will fit to the window.
            </summary>
            <param name="type">The destination type</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single)">
            <summary>
                Constructs a new  PdfDestination .
                If <VAR>type</VAR> equals <VAR>FITBH</VAR> / <VAR>FITBV</VAR>,
                the width / height of the bounding box of a page will fit the window
                of the Reader. The parameter will specify the y / x coordinate of the
                top / left edge of the window. If the <VAR>type</VAR> equals <VAR>FITH</VAR>
                or <VAR>FITV</VAR> the width / height of the entire page will fit
                the window and the parameter will specify the y / x coordinate of the
                top / left edge. In all other cases the type will be set to <VAR>FITH</VAR>.
            </summary>
            <param name="type">the destination type</param>
            <param name="parameter">a parameter to combined with the destination type</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Constructs a new  PdfDestination .
                Display the page, with the coordinates (left, top) positioned
                at the top-left corner of the window and the contents of the page magnified
                by the factor zoom. A negative value for any of the parameters left or top, or a
                zoom value of 0 specifies that the current value of that parameter is to be retained unchanged.
            </summary>
            <param name="type">must be a <VAR>PdfDestination.XYZ</VAR></param>
            <param name="left">the left value. Negative to place a null</param>
            <param name="top">the top value. Negative to place a null</param>
            <param name="zoom">The zoom factor. A value of 0 keeps the current value</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Constructs a new  PdfDestination .
                Display the page, with its contents magnified just enough
                to fit the rectangle specified by the coordinates left, bottom, right, and top
                entirely within the window both horizontally and vertically. If the required
                horizontal and vertical magnification factors are different, use the smaller of
                the two, centering the rectangle within the window in the other dimension.
                @since iText0.38
            </summary>
            <param name="type">must be PdfDestination.FITR</param>
            <param name="left">a parameter</param>
            <param name="bottom">a parameter</param>
            <param name="right">a parameter</param>
            <param name="top">a parameter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.AddPage(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                methods
            </summary>
            <summary>
                Checks if an indirect reference to a page has been added.
            </summary>
            <returns> true  or  false </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDeveloperExtension">
            <summary>
                Beginning with BaseVersion 1.7, the extensions dictionary lets developers
                designate that a given document contains extensions to PDF. The presence
                of the extension dictionary in a document indicates that it may contain
                developer-specific PDF properties that extend a particular base version
                of the PDF specification.
                The extensions dictionary enables developers to identify their own extensions
                relative to a base version of PDF. Additionally, the convention identifies
                extension levels relative to that base version. The intent of this dictionary
                is to enable developers of PDF-producing applications to identify company-specific
                specifications (such as this one) that PDF-consuming applications use to
                interpret the extensions.
                @since   2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.Adobe17Extensionlevel3">
            <summary>
                An instance of this class for Adobe 1.7 Extension level 3.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.baseversion">
            <summary>
                The base version.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.extensionLevel">
            <summary>
                The extension level within the baseversion.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.prefix">
            <summary>
                The prefix used in the Extensions dictionary added to the Catalog.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDeveloperExtension.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName,System.Int32)">
            <summary>
                Creates a PdfDeveloperExtension object.
            </summary>
            <param name="prefix">the prefix referring to the developer</param>
            <param name="baseversion">the number of the base version</param>
            <param name="extensionLevel">the extension level within the baseverion.</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDeveloperExtension.Baseversion">
            <summary>
                Gets the baseversion name.
            </summary>
            <returns>a PdfName</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDeveloperExtension.ExtensionLevel">
            <summary>
                Gets the extension level within the baseversion.
            </summary>
            <returns>an integer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDeveloperExtension.Prefix">
            <summary>
                Gets the prefix name.
            </summary>
            <returns>a PdfName</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDeveloperExtension.GetDeveloperExtensions">
            <summary>
                Generations the developer extension dictionary corresponding
                with the prefix.
            </summary>
            <returns>a PdfDictionary</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDictionary">
            <summary>
                PdfDictionary  is the Pdf dictionary object.
                A dictionary is an associative table containing pairs of objects. The first element
                of each pair is called the <I>key</I> and the second element is called the <I>value</I>.
                Unlike dictionaries in the PostScript language, a key must be a  PdfName .
                A value can be any kind of  PdfObject , including a dictionary. A dictionary is
                generally used to collect and tie together the attributes of a complex object, with each
                key-value pair specifying the name and value of an attribute.
                A dictionary is represented by two left angle brackets , followed by a sequence of
                key-value pairs, followed by two right angle brackets.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.7 (page 40-41).
                @see        PdfObject
                @see        PdfName
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.Catalog">
            <summary>
                static membervariables (types of dictionary's)
            </summary>
            <summary>
                This is a possible type of dictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.Font">
            <summary>
                This is a possible type of dictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.Outlines">
            <summary>
                This is a possible type of dictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.Page">
            <summary>
                This is a possible type of dictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.Pages">
            <summary>
                This is a possible type of dictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary._dictionaryType">
            <summary>
                This is the type of this dictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.HashMap">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the hashmap that contains all the values and keys of the dictionary
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs an empty  PdfDictionary -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.#ctor(iTextSharp.text.pdf.PdfName)">
            <summary>
                Constructs a  PdfDictionary -object of a certain type.
            </summary>
            <param name="type">a  PdfName </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDictionary.Keys">
            <summary>
                methods overriding some methods in PdfObject
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.GetAsDict(iTextSharp.text.pdf.PdfName)">
            <summary>
                All the getAs functions will return either null, or the specified object type
                This function will automatically look up indirect references. There's one obvious
                exception, the one that will only return an indirect reference.  All direct objects
                come back as a null.
                Mark A Storer (2/17/06)
            </summary>
            <param name="key"></param>
            <returns>the appropriate object in its final type, or null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.GetDirectObject(iTextSharp.text.pdf.PdfName)">
            <summary>
                This function behaves the same as 'get', but will never return an indirect reference,
                it will always look such references up and return the actual object.
            </summary>
            <param name="key"></param>
            <returns>null, or a non-indirect object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.Merge(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Checks if a  Dictionary  is of the type FONT.
            </summary>
            <returns> true  if it is,  false  if it isn't.</returns>
            <summary>
                Checks if a  Dictionary  is of the type PAGE.
            </summary>
            <returns> true  if it is,  false  if it isn't.</returns>
            <summary>
                Checks if a  Dictionary  is of the type PAGES.
            </summary>
            <returns> true  if it is,  false  if it isn't.</returns>
            <summary>
                Checks if a  Dictionary  is of the type CATALOG.
            </summary>
            <returns> true  if it is,  false  if it isn't.</returns>
            <summary>
                Checks if a  Dictionary  is of the type OUTLINES.
            </summary>
            <returns> true  if it is,  false  if it isn't.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.MergeDifferent(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                methods concerning the type of Dictionary
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.PutEx(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Adds a  PdfObject  and its key to the  PdfDictionary .
                If the value is null it does nothing.
            </summary>
            <param name="key">key of the entry (a  PdfName )</param>
            <param name="value">value of the entry (a  PdfObject )</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            <summary>
                Returns the PDF representation of this  PdfDictionary .
            </summary>
            <returns>an array of  byte </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDocument">
            <summary>
                PdfDocument  is the class that is used by  PdfWriter
                to translate a  Document  into a PDF with different pages.
                A  PdfDocument  always listens to a  Document
                and adds the Pdf representation of every  Element  that is
                added to the  Document .
                @see      com.lowagie.text.Document
                @see      com.lowagie.text.DocListener
                @see      PdfWriter
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.hangingPunctuation">
            <summary>
                PdfInfo  is the PDF InfoDictionary.
                A document's trailer may contain a reference to an Info dictionary that provides information
                about the document. This optional dictionary may contain one or more keys, whose values
                should be strings.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 6.10 (page 120-121)
            </summary>
            <summary>
                The characters to be applied the hanging punctuation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument._jsCounter">
            <summary>
                Stores a list of document level JavaScript actions.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Alignment">
            <summary>
                This represents the current alignment of the PDF Elements.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.AnchorAction">
            <summary>
                The current active  PdfAction  when processing an  Anchor .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.BoxSize">
            <summary>
                This is the size of the several boxes that will be used in
                the next page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.CurrentOutline">
            <summary>
                This is the current  PdfOutline  in the hierarchy of outlines.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.duration">
            <summary>
                The duration of the page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.FirstPageEvent">
            <summary>
                Signals that OnOpenDocument should be called.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Graphics">
            <summary>
                This is the PdfContentByte object, containing the borders and other Graphics.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.ImageEnd">
            <summary>
                This is the position where the image ends.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.ImageWait">
            <summary>
                This is the image that could not be shown on a previous page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.info">
            <summary>
                some meta information about the Document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.IsSectionTitle">
            <summary>
                Signals that onParagraph is valid (to avoid that a Chapter/Section title is treated as a Paragraph).
                @since 2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.LastElementType">
            <summary>
                Holds the type of the last element, that has been added to the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.leading">
            <summary>
                This represents the leading of the lines.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.LeadingCount">
            <summary>
                Signals that the current leading has to be subtracted from a YMark object.
                @since 2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Line">
            <summary>
                The line that is currently being written.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Lines">
            <summary>
                The lines that are written until now.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.LocalDestinations">
            <summary>
                Stores the destinations keyed by name. Value is
                Object[]{PdfAction,PdfIndirectReference,PdfDestintion} .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.NextMarginBottom">
            <summary>
                margin in y direction starting from the bottom. Will be valid in the next page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.NextMarginLeft">
            <summary>
                margin in x direction starting from the left. Will be valid in the next page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.NextMarginRight">
            <summary>
                margin in x direction starting from the right. Will be valid in the next page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.NextMarginTop">
            <summary>
                margin in y direction starting from the top. Will be valid in the next page
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.NextPageSize">
            <summary>
                This is the size of the next page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.pageEmpty">
            <summary>
                This checks if the page is empty.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.pageResources">
            <summary>
                This are the page resources of the current Page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.rootOutline">
            <summary>
                This is the root outline of the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.strictImageSequence">
            <summary>
                Holds value of property strictImageSequence.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Text">
            <summary>
                This is the PdfContentByte object, containing the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.ThisBoxSize">
            <summary>
                [U1] page sizes
            </summary>
            <summary>
                This is the size of the several boxes of the current Page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.transition">
            <summary>
                The page transition
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.viewerPreferences">
            <summary>
                Contains the Viewer preferences of this PDF document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Writer">
            <summary>
                The  PdfWriter .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.xmpMetadata">
            <summary>
                [L3] DocListener interface
            </summary>
            <summary>
                [C9] Metadata for the page
            </summary>
            <summary>
                XMP Metadata for the page.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.#ctor">
            <summary>
                Constructs a new PDF document.
                @throws DocumentException on error
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.CurrentHeight">
            <summary>
                This is the current height of the document.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.AcroForm">
            <summary>
                [C8] AcroForm
            </summary>
            <summary>
                Gets the AcroForm object.
            </summary>
            <returns>the PdfAcroform object of the PdfDocument</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Collection">
            <summary>
                Sets the collection dictionary.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Footer">
            <summary>
                Changes the footer of this document.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Header">
            <summary>
                Changes the header of this document.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Leading">
            <summary>
                [L0] ElementListener interface
            </summary>
            <summary>
                Getter for the current leading.
                @since   2.1.2
            </summary>
            <returns>the current leading</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PageCount">
            <summary>
                Sets the page number.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.RootOutline">
            <summary>
                Gets the root outline. All the outlines must be created with a parent.
                The first level is created with this outline.
            </summary>
            <returns>the root outline</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.XmpMetadata">
            <summary>
                Use this method to set the XMP Metadata.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Duration">
            <summary>
                Sets the display duration for the page (for presentations)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Info">
            <summary>
                Info Dictionary and Catalog
            </summary>
            <summary>
                Gets the  PdfInfo -object.
            </summary>
            <returns> PdfInfo</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PageEmpty">
            <summary>
                [U2] empty pages
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PageLabels">
            <summary>
                [C4] Page labels
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PageResources">
            <summary>
                [M0] Page resources contain references to fonts, extgstate, images,...
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.StrictImageSequence">
            <summary>
                Setter for property strictImageSequence.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Thumbnail">
            <summary>
                [U8] thumbnail images
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Transition">
            <summary>
                [U3] page actions
            </summary>
            <summary>
                Sets the transition for the page
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.ViewerPreferences">
            <summary>
                [C3] PdfViewerPreferences interface
            </summary>
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.IElement)">
            <summary>
                LISTENER METHODS START
            </summary>
            <summary>
                Signals that an  Element  was added to the  Document .
                @throws DocumentException when a document isn't open yet, or has been closed
            </summary>
            <param name="element">the element to add</param>
            <returns> true  if the element was added,  false  if not.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ClearTextWrap">
            <summary>
                Method added by Pelikan Stephan
                @see com.lowagie.text.DocListener#clearTextWrap()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Close">
            <summary>
                Closes the document.
                Once all the content has been written in the body, you have to close
                the body. After that nothing can be written to the body anymore.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetVerticalPosition(System.Boolean)">
            <summary>
                Gets the current vertical page position.
                for elements that do not terminate the lines they've started because those lines will get
                terminated.
            </summary>
            <param name="ensureNewLine">Tells whether a new line shall be enforced. This may cause side effects</param>
            <returns>The current vertical page position.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.NewPage">
            <summary>
                [L2] DocListener interface
            </summary>
            <summary>
                Makes a new page and sends it to the  PdfWriter .
                @throws DocumentException on error
            </summary>
            <returns>a  bool </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Open">
            <summary>
                Opens the document.
                You have to open the document before you can begin to add content
                to the body of the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetFooter">
            <summary>
                Resets the footer of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetHeader">
            <summary>
                Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetPageCount">
            <summary>
                Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMarginMirroring(System.Boolean)">
            <summary>
                @see com.lowagie.text.DocListener#setMarginMirroring(bool)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMarginMirroringTopBottom(System.Boolean)">
            <summary>
                [L6] DocListener interface
            </summary>
            <summary>
                @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
                @since    2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns>a  bool </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
                Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns> true  if the page size was set</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddOutline(iTextSharp.text.pdf.PdfOutline,System.String)">
            <summary>
                [C1] outlines
            </summary>
            <summary>
                Adds a named outline to the document .
            </summary>
            <param name="outline">the outline to be added</param>
            <param name="name">the name of this local destination</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddPTable(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Adds a  PdfPTable  to the document.
                @throws DocumentException on error
            </summary>
            <param name="ptable">the  PdfPTable  to be added to the document.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName,
                com.lowagie.text.pdf.PdfObject)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddWriter(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                CONSTRUCTING A PdfDocument/PdfWriter INSTANCE
            </summary>
            <summary>
                Adds a  PdfWriter  to the  PdfDocument .
                what is added to this document to an outputstream.
                @throws DocumentException on error
            </summary>
            <param name="writer">the  PdfWriter  that writes everything</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.FitsPage(iTextSharp.text.pdf.PdfPTable,System.Single)">
            <summary>
                [M4] Adding a PdfPTable
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetBottom(iTextSharp.text.Table)">
            <summary>
                Returns the bottomvalue of a  Table  if it were added to this document.
            </summary>
            <param name="table">the table that may or may not be added to this document</param>
            <returns>a bottom value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetBoxSize(System.String)">
            <summary>
                Gives the size of a trim, art, crop or bleed box, or null if not defined.
            </summary>
            <param name="boxName">crop, trim, art or bleed</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetCatalog(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Gets the  PdfCatalog -object.
            </summary>
            <param name="pages">an indirect reference to this document pages</param>
            <returns> PdfCatalog </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetMarkPoint">
            <summary>
                [F12] tagged PDF
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.LocalDestination(System.String,iTextSharp.text.pdf.PdfDestination)">
            <summary>
                The local destination to where a local goto with the same
                name will jump to.
                false  if a local destination with the same name
                already existed
            </summary>
            <param name="name">the name of this local destination</param>
            <param name="destination">the  PdfDestination  with the jump coordinates</param>
            <returns> true  if the local destination was added,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.LocalGoto(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements a link to other part of the document. The jump will
                be made to a local destination with the same name, that must exist.
            </summary>
            <param name="name">the name for this link</param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoteGoto(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                [C5] named objects: local destinations, javascript, embedded files
            </summary>
            <summary>
                Implements a link to another document.
            </summary>
            <param name="filename">the filename for the remote document</param>
            <param name="name">the name to jump to</param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoteGoto(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements a link to another document.
            </summary>
            <param name="filename">the filename for the remote document</param>
            <param name="page">the page to jump to</param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetAction(iTextSharp.text.pdf.PdfAction,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Implements an action in an area.
            </summary>
            <param name="action">the  PdfAction </param>
            <param name="llx">the lower left x corner of the activation area</param>
            <param name="lly">the lower left y corner of the activation area</param>
            <param name="urx">the upper right x corner of the activation area</param>
            <param name="ury">the upper right y corner of the activation area</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetOpenAction(System.String)">
            <summary>
                [C6] document level actions
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.WriteLineToContent(iTextSharp.text.pdf.PdfLine,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,System.Object[],System.Single)">
            <summary>
                Writes a text line to the document. It takes care of all the attributes.
                Before entering the line position must have been established and the
                text  argument must be in text object scope ( beginText() ).
                @throws DocumentException on error
            </summary>
            <param name="line">the line to be written</param>
            <param name="text">the  PdfContentByte  where the text will be written to</param>
            <param name="graphics">the  PdfContentByte  where the graphics will be written to</param>
            <param name="currentValues">the current font and extra spacing values</param>
            <param name="ratio"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.Image)">
            <summary>
                Adds an image to the document.
                @throws PdfException on error
                @throws DocumentException on error
            </summary>
            <param name="image">the  Image  to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddSpacing(System.Single,System.Single,iTextSharp.text.Font)">
            <summary>
                Gets the indentation on the left side.
            </summary>
            <returns>a margin</returns>
            <summary>
                Gets the indentation on the right side.
            </summary>
            <returns>a margin</returns>
            <summary>
                Gets the indentation on the top side.
            </summary>
            <returns>a margin</returns>
            <summary>
                Gets the indentation on the bottom side.
            </summary>
            <returns>a margin</returns>
            <summary>
                Adds extra space.
                This method should probably be rewritten.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.DoFooter">
            <summary>
                [M5] header/footer
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.EnsureNewLine">
            <summary>
                If the current line is not empty or null, it is added to the arraylist
                of lines and a new empty line is added.
                @throws DocumentException on error
            </summary>
            <summary>
                Ensures that a new line has been started.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.FlushLines">
            <summary>
                Writes all the lines to the text-object.
                @throws DocumentException on error
            </summary>
            <returns>the displacement that was caused</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.addPdfTable(iTextSharp.text.Table)">
            <summary>
                Adds a new table to
                @throws DocumentException
            </summary>
            <param name="t">Table to add. Rendered rows will be deleted after processing.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDocument.Indentation">
            <summary>
                [L1] DocListener interface
            </summary>
            <summary>
                [L4] DocListener interface
            </summary>
            <summary>
                [L7] DocListener interface
            </summary>
            <summary>
                [L8] DocListener interface
            </summary>
            <summary>
                DOCLISTENER METHODS END
            </summary>
            <summary>
                Initializes a page.
                If the footer/header is set, it is printed.
                @throws DocumentException on error
            </summary>
            <summary>
                Adds the current line to the list of lines and also adds an empty line.
                @throws DocumentException on error
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.ImageIndentLeft">
            <summary>
                This is the indentation caused by an image on the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.ImageIndentRight">
            <summary>
                This is the indentation caused by an image on the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentBottom">
            <summary>
                This represents the current indentation of the PDF Elements on the bottom side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentLeft">
            <summary>
                This represents the current indentation of the PDF Elements on the left side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentRight">
            <summary>
                This represents the current indentation of the PDF Elements on the right side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentTop">
            <summary>
                This represents the current indentation of the PDF Elements on the top side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.ListIndentLeft">
            <summary>
                This represents the current indentation of the PDF Elements on the left side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.SectionIndentLeft">
            <summary>
                Indentation to the left caused by a section.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.SectionIndentRight">
            <summary>
                Indentation to the right caused by a section.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Construct a  PdfInfo -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.#ctor(System.String,System.String,System.String)">
            <summary>
                Constructs a  PdfInfo -object.
            </summary>
            <param name="author">name of the author of the document</param>
            <param name="title">title of the document</param>
            <param name="subject">subject of the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.Addkey(System.String,System.String)">
            <summary>
                Adds the date of creation to the document.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDocument.PdfCatalog">
            <summary>
                PdfCatalog  is the PDF Catalog-object.
                The Catalog is a dictionary that is the root node of the document. It contains a reference
                to the tree of pages contained in the document, a reference to the tree of objects representing
                the document's outline, a reference to the document's article threads, and the list of named
                destinations. In addition, the Catalog indicates whether the document's outline or thumbnail
                page images should be displayed automatically when the document is viewed and wether some location
                other than the first page should be shown when the document is opened.
                In this class however, only the reference to the tree of pages is implemented.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 6.2 (page 67-71)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.#ctor(iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfCatalog .
            </summary>
            <param name="pages">an indirect reference to the root of the document's Pages tree.</param>
            <param name="writer">the writer the catalog applies to</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PdfCatalog.AdditionalActions">
            <summary>
                Sets the document level additional actions.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.AddNames(System.util.collections.OrderedTree,System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.PdfObject},System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.PdfObject},iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Adds the names of the named destinations to the catalog.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDocument.RenderingContext">
            <summary>
                [M4'] Adding a Table
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.RenderingContext.RowspanMap">
            <summary>
                internal float maxCellHeight;
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.RenderingContext.Table">
            <summary>
                A PdfPTable
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RenderingContext.ConsumeRowspan(iTextSharp.text.pdf.PdfCell)">
            <summary>
                Consumes the rowspan
            </summary>
            <param name="c"></param>
            <returns>a rowspan.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RenderingContext.CurrentRowspan(iTextSharp.text.pdf.PdfCell)">
            <summary>
                Looks at the current rowspan.
            </summary>
            <param name="c"></param>
            <returns>the current rowspan</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEFStream">
            <summary>
                Extends PdfStream and should be used to create Streams for Embedded Files
                (file attachments).
                @since	2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEFStream.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a Stream object using an InputStream and a PdfWriter object
            </summary>
            <param name="inp">that will be read to get the Stream object</param>
            <param name="writer">to which the stream will be added</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEFStream.#ctor(System.Byte[])">
            <summary>
                Creates a Stream object using a byte array
            </summary>
            <param name="fileStore">for the stream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEFStream.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            <summary>
                @see com.lowagie.text.pdf.PdfDictionary#toPdf(com.lowagie.text.pdf.PdfWriter, java.io.OutputStream)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncodings">
            <summary>
                Supports fast encodings for winansi and PDFDocEncoding.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncodings.CrlfCidNewline">
            <summary>
                Assumes that '\\n' and '\\r\\n' are the newline sequences. It may not work for
                all CJK encodings. To be used with LoadCmap().
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.AddExtraEncoding(System.String,iTextSharp.text.pdf.IExtraEncoding)">
            <summary>
                Adds an extra encoding.
            </summary>
            <param name="name">the name of the encoding. The encoding recognition is case insensitive</param>
            <param name="enc">the conversion class</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ClearCmap(System.String)">
            <summary>
                Clears the CJK cmaps from the cache. If  name  is the
                empty string then all the cache is cleared. Calling this method
                has no consequences other than the need to reload the cmap
                if needed.
            </summary>
            <param name="name">the name of the cmap to clear or all the cmaps if the empty string</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ConvertCmap(System.String,System.Byte[])">
            <summary>
                Converts a  byte  array encoded as  name
                to a CID string. This is needed to reach some CJK characters
                that don't exist in 16 bit Unicode.
                The font to use this result must use the encoding "Identity-H"
                or "Identity-V".
                See ftp://ftp.oreilly.com/pub/examples/nutshell/cjkv/adobe/.
            </summary>
            <param name="name">the CJK encoding name</param>
            <param name="seq">the  byte  array to be decoded</param>
            <returns>the CID string</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Converts a  byte  array encoded as  name
                to a CID string. This is needed to reach some CJK characters
                that don't exist in 16 bit Unicode.
                The font to use this result must use the encoding "Identity-H"
                or "Identity-V".
                See ftp://ftp.oreilly.com/pub/examples/nutshell/cjkv/adobe/.
            </summary>
            <param name="name">the CJK encoding name</param>
            <param name="start">the start offset in the data</param>
            <param name="length">the number of bytes to convert</param>
            <param name="seq">the  byte  array to be decoded</param>
            <returns>the CID string</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ConvertToBytes(System.String,System.String)">
            <summary>
                Converts a  string  to a  byte  array according
                to the font's encoding.
            </summary>
            <param name="text">the  string  to be converted</param>
            <param name="encoding"></param>
            <returns>an array of  byte  representing the conversion according to the font's encoding</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ConvertToBytes(System.Char,System.String)">
            <summary>
                Converts a  String  to a  byte  array according
                to the font's encoding.
            </summary>
            <param name="encoding">the encoding</param>
            <param name="char1">the  char  to be converted</param>
            <returns>an array of  byte  representing the conversion according to the font's encoding</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.IsPdfDocEncoding(System.String)">
            <summary>
                Checks is  text  only has PdfDocEncoding characters.
            </summary>
            <param name="text">the  String  to test</param>
            <returns> true  if only PdfDocEncoding characters are present</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.LoadCmap(System.String,System.Byte[][])">
            <summary>
                Loads a CJK cmap to the cache with the option of associating
                sequences to the newline.
            </summary>
            <param name="name">the CJK cmap name</param>
            <param name="newline">the sequences to be replaced bi a newline in the resulting CID. See  CRLF_CID_NEWLINE </param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncryption">
            <summary>
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption._embeddedFilesOnly">
            <summary>
                Indicates if the encryption is only necessary for embedded files.
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption._keyLength">
            <summary>
                The generic key length. It may be 40 or 128.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.Extra">
            <summary>
                Work area to prepare the object/generation bytes
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.Key">
            <summary>
                The encryption key for a particular object/generation
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.KeySize">
            <summary>
                The encryption key length for a particular object/generation
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.Mkey">
            <summary>
                The global encryption key
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.OwnerKey">
            <summary>
                The encryption key for the owner
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.PublicKeyHandler">
            <summary>
                The public key security handler for certificate encryption
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.UserKey">
            <summary>
                The encryption key for the user
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.IsEmbeddedFilesOnly">
            <summary>
                Indicates if only the embedded files have to be encrypted.
                @since   2.1.3
            </summary>
            <returns>if true only the embedded files will be encrypted</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupAllKeys(System.Byte[],System.Byte[],System.Int32)">
            <summary>
                gets keylength and revision and uses revison to choose the initial values for permissions
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupByOwnerPassword(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.computeOwnerKey(System.Byte[],System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.setupByUserPad(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.setupGlobalEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
                ownerKey, documentID must be setuped
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.setupUserKey">
            <summary>
                mkey must be setuped
            </summary>
            <summary>
                use the revision to choose the setup method
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncryptor">
            <summary>
                This class takes any PDF and returns exactly the same but
                encrypted. All the content, links, outlines, etc, are kept.
                It is also possible to change the info dictionary.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Entry point to encrypt a PDF document. The encryption parameters are the same as in
                PdfWriter . The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="strength128Bits"> true  for 128 bit key length,  false  for 40 bit key length</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Byte[],System.Byte[],System.Int32,System.Boolean,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Entry point to encrypt a PDF document. The encryption parameters are the same as in
                PdfWriter . The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                the info dictionary. Entries with  null
                values delete the key in the original info dictionary
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="strength128Bits"> true  for 128 bit key length,  false  for 40 bit key length</param>
            <param name="newInfo">an optional  String  map to add or change</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Entry point to encrypt a PDF document. The encryption parameters are the same as in
                PdfWriter . The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="strength"> true  for 128 bit key length,  false  for 40 bit key length</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Boolean,System.String,System.String,System.Int32,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Entry point to encrypt a PDF document. The encryption parameters are the same as in
                PdfWriter . The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                the info dictionary. Entries with  null
                values delete the key in the original info dictionary
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="strength"> true  for 128 bit key length,  false  for 40 bit key length</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="newInfo">an optional  String  map to add or change</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Int32,System.String,System.String,System.Int32,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Entry point to encrypt a PDF document. The encryption parameters are the same as in
                PdfWriter . The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                the info dictionary. Entries with  null
                values delete the key in the original info dictionary
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="type">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or
                ENCRYPTION_AES128.
            </param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="newInfo">an optional  String  map to add or change</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Int32,System.String,System.String,System.Int32)">
            <summary>
                Entry point to encrypt a PDF document. The encryption parameters are the same as in
                PdfWriter . The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                values delete the key in the original info dictionary
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="type">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or
                ENCRYPTION_AES128.
            </param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.GetPermissionsVerbose(System.Int32)">
            <summary>
                Give you a verbose analysis of the permissions.
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>a String that explains the meaning of the permissions value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsAssemblyAllowed(System.Int32)">
            <summary>
                Tells you if document assembly is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if document assembly is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsCopyAllowed(System.Int32)">
            <summary>
                Tells you if copying is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if copying is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsDegradedPrintingAllowed(System.Int32)">
            <summary>
                Tells you if degraded printing is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if degraded printing is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsFillInAllowed(System.Int32)">
            <summary>
                Tells you if filling in fields is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if filling in fields is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsModifyAnnotationsAllowed(System.Int32)">
            <summary>
                Tells you if modifying annotations is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if modifying annotations is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsModifyContentsAllowed(System.Int32)">
            <summary>
                Tells you if modifying content is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if modifying content is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsPrintingAllowed(System.Int32)">
            <summary>
                Tells you if printing is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if printing is allowed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsScreenReadersAllowed(System.Int32)">
            <summary>
                Tells you if repurposing for screenreaders is allowed.
                @since 2.0.7
            </summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if repurposing for screenreaders is allowed</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfException">
            <summary>
                Signals that an unspecified problem while constructing a PDF document.
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFileSpecification">
            <summary>
                Specifies a file or an URL. The file can be extern or embedded.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.#ctor">
            <summary>
                Creates a new instance of PdfFileSpecification. The static methods are preferred.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.MultiByteFileName">
            <summary>
                Sets the file name (the key /F) string as an hex representation
                to support multi byte file names. The name must have the slash and
                backslash escaped according to the file specification rules
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.Reference">
            <summary>
                Gets the indirect reference to this file specification.
                Multiple invocations will retrieve the same value.
                @throws IOException on error
            </summary>
            <returns>the indirect reference</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.Volatile">
            <summary>
                Sets a flag that indicates whether an external file referenced by the file
                specification is volatile. If the value is true, applications should never
                cache a copy of the file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[])">
            <summary>
                Creates a file specification with the file embedded. The file may
                come from the file system or from a byte array. The data is flate compressed.
                it takes precedence over  filePath
                @throws IOException on error
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="filePath">the file path</param>
            <param name="fileDisplay">the file information that is presented to the user</param>
            <param name="fileStore">the byte array with the file. If it is not  null </param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Int32)">
            <summary>
                Creates a file specification with the file embedded. The file may
                come from the file system or from a byte array. The data is flate compressed.
                it takes precedence over  filePath
                it takes precedence over  filePath
                @throws IOException on error
                @since    2.1.3
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="filePath">the file path</param>
            <param name="fileDisplay">the file information that is presented to the user</param>
            <param name="fileStore">the byte array with the file. If it is not  null </param>
            <param name="compressionLevel">the compression level to be used for compressing the file</param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
                Creates a file specification with the file embedded. The file may
                come from the file system or from a byte array.
                it takes precedence over  filePath
                from compression
                @throws IOException on error
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="filePath">the file path</param>
            <param name="fileDisplay">the file information that is presented to the user</param>
            <param name="fileStore">the byte array with the file. If it is not  null </param>
            <param name="compress">sets the compression on the data. Multimedia content will benefit little</param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Boolean,System.String,iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Creates a file specification with the file embedded. The file may
                come from the file system or from a byte array.
                it takes precedence over  filePath
                from compression
                @throws IOException on error
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="filePath">the file path</param>
            <param name="fileDisplay">the file information that is presented to the user</param>
            <param name="fileStore">the byte array with the file. If it is not  null </param>
            <param name="compress">sets the compression on the data. Multimedia content will benefit little</param>
            <param name="mimeType">the optional mimeType</param>
            <param name="fileParameter">the optional extra file parameters such as the creation or modification date</param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.String,iTextSharp.text.pdf.PdfDictionary,System.Int32)">
            <summary>
                Creates a file specification with the file embedded. The file may
                come from the file system or from a byte array.
                it takes precedence over  filePath
                @throws IOException on error
                @since   2.1.3
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="filePath">the file path</param>
            <param name="fileDisplay">the file information that is presented to the user</param>
            <param name="fileStore">the byte array with the file. If it is not  null </param>
            <param name="mimeType">the optional mimeType</param>
            <param name="fileParameter">the optional extra file parameters such as the creation or modification date</param>
            <param name="compressionLevel">the level of compression</param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileExtern(iTextSharp.text.pdf.PdfWriter,System.String)">
            <summary>
                Creates a file specification for an external file.
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="filePath">the file path</param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.Url(iTextSharp.text.pdf.PdfWriter,System.String)">
            <summary>
                Creates a file specification of type URL.
            </summary>
            <param name="writer">the  PdfWriter </param>
            <param name="url">the URL</param>
            <returns>the file specification</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.AddCollectionItem(iTextSharp.text.pdf.collection.PdfCollectionItem)">
            <summary>
                Adds the Collection item dictionary.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.AddDescription(System.String,System.Boolean)">
            <summary>
                Adds a description for the file that is specified here.
            </summary>
            <param name="description">some text</param>
            <param name="unicode">if true, the text is added as a unicode string</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.SetUnicodeFileName(System.String,System.Boolean)">
            <summary>
                Adds the unicode file name (the key /UF). This entry was introduced
                in PDF 1.7. The filename must have the slash and backslash escaped
                according to the file specification rules.
            </summary>
            <param name="filename">the filename</param>
            <param name="unicode">if true, the filename is UTF-16BE encoded; otherwise PDFDocEncoding is used;</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFont">
            <summary>
                PdfFont  is the Pdf Font object.
                Limitation: in this class only base 14 Type 1 fonts (courier, courier bold, courier oblique,
                courier boldoblique, helvetica, helvetica bold, helvetica oblique, helvetica boldoblique,
                symbol, times roman, times bold, times italic, times bolditalic, zapfdingbats) and their
                standard encoding (standard, MacRoman, (MacExpert,) WinAnsi) are supported.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 7.7 (page 198-203).
                @see        PdfName
                @see        PdfDictionary
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFont._size">
            <summary>
                the size.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFont.image">
            <summary>
                an image.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.#ctor(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
                constructors
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFont.Font">
            <summary>
                the font metrics.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.Width">
            <summary>
                Returns the size of this font.
            </summary>
            <returns>a size</returns>
            <summary>
                Returns the approximative width of 1 character of this font.
            </summary>
            <returns>a width in Text Space</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.Width(System.Int32)">
            <summary>
                Returns the width of a certain character of this font.
            </summary>
            <param name="character">a certain character</param>
            <returns>a width in Text Space</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFormField">
            <summary>
                Implements form fields.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormField.parent">
            <summary>
                Holds value of property parent.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormField.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Constructs a new  PdfAnnotation  of subtype link (Action).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormField.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates new PdfFormField
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFormField.Parent">
            <summary>
                Getter for property parent.
            </summary>
            <returns>Value of property parent.</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFormXObject">
            <summary>
                PdfFormObject  is a type of XObject containing a template-object.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.Matrix">
            <summary>
                public static variables
            </summary>
            <summary>
                This is the 1 - matrix.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.One">
            <summary>
                This is a PdfNumber representing 1.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.Zero">
            <summary>
                This is a PdfNumber representing 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormXObject.#ctor(iTextSharp.text.pdf.PdfTemplate,System.Int32)">
            <summary>
                Constructs a  PdfFormXObject -object.
                @since   2.1.3 (Replacing the existing constructor with param compressionLevel)
            </summary>
            <param name="template">the template</param>
            <param name="compressionLevel">the compression level for the stream</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFunction">
            <summary>
                Implements PDF functions.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFunction.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates new PdfFunction
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfGState">
            <summary>
                The graphic state dictionary.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmColorburn">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmColordodge">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmCompatible">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmDarken">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmDifference">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmExclusion">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmHardlight">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmLighten">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmMultiply">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmNormal">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmOverlay">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmScreen">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BmSoftlight">
            <summary>
                A possible blend mode
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.AlphaIsShape">
            <summary>
                The alpha source flag specifying whether the current soft mask
                and alpha constant are to be interpreted as shape values (true)
                or opacity values (false).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.BlendMode">
            <summary>
                The current blend mode to be used in the transparent imaging model.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.FillOpacity">
            <summary>
                Sets the current stroking alpha constant, specifying the constant shape or
                constant opacity value to be used for nonstroking operations in the transparent
                imaging model.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintMode">
            <summary>
                Sets the flag whether to toggle knockout behavior for overprinted objects.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintNonStroking">
            <summary>
                Sets the flag whether to apply overprint for non stroking painting operations.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintStroking">
            <summary>
                Sets the flag whether to apply overprint for stroking.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.StrokeOpacity">
            <summary>
                Sets the current stroking alpha constant, specifying the constant shape or
                constant opacity value to be used for stroking operations in the transparent
                imaging model.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.TextKnockout">
            <summary>
                Determines the behaviour of overlapping glyphs within a text object
                in the transparent imaging model.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfIccBased">
            <summary>
                A  PdfICCBased  defines a ColorSpace
                @see        PdfStream
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIccBased.#ctor(iTextSharp.text.pdf.IccProfile)">
            <summary>
                Creates an ICC stream.
            </summary>
            <param name="profile">an ICC profile</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIccBased.#ctor(iTextSharp.text.pdf.IccProfile,System.Int32)">
            <summary>
                Creates an ICC stream.
                @since   2.1.3   (replacing the constructor without param compressionLevel)
            </summary>
            <param name="compressionLevel">the compressionLevel</param>
            <param name="profile">an ICC profile</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfImage">
            <summary>
                PdfImage  is a  PdfStream  containing an image- Dictionary  and -stream.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfImage.name">
            <summary>
                membervariables
            </summary>
            <summary>
                This is the  PdfName  of the image.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImage.#ctor(iTextSharp.text.Image,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                constructor
            </summary>
            <summary>
                Constructs a  PdfImage -object.
                @throws BadPdfFormatException on error
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImage.Name">
            <summary>
                Returns the  PdfName  of the image.
            </summary>
            <returns>the name</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfImportedPage">
            <summary>
                Represents an imported page.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImportedPage.Duplicate">
            <summary>
                Always throws an error. This operation is not allowed.
            </summary>
            <returns>dummy</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImportedPage.FromReader">
            <summary>
                Reads the content from this  PdfImportedPage -object from a reader.
            </summary>
            <returns>self</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Always throws an error. This operation is not allowed.
                @throws DocumentException  dummy
            </summary>
            <param name="image">dummy</param>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <param name="c">dummy</param>
            <param name="d">dummy</param>
            <param name="e">dummy</param>
            <param name="f">dummy</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Always throws an error. This operation is not allowed.
            </summary>
            <param name="template">dummy</param>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <param name="c">dummy</param>
            <param name="d">dummy</param>
            <param name="e">dummy</param>
            <param name="f">dummy</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
                Always throws an error. This operation is not allowed.
            </summary>
            <param name="bf">dummy</param>
            <param name="size">dummy</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.GetFormXObject(System.Int32)">
            <summary>
                Gets the stream representing this page.
                @since   2.1.3   (replacing the method without param compressionLevel)
            </summary>
            <param name="compressionLevel">the compressionLevel</param>
            <returns>the stream representing this page</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfIndirectObject">
            <summary>
                PdfIndirectObject  is the Pdf indirect object.
                An <I>indirect object</I> is an object that has been labeled so that it can be referenced by
                other objects. Any type of  PdfObject  may be labeled as an indirect object.
                An indirect object consists of an object identifier, a direct object, and the <B>endobj</B>
                keyword. The <I>object identifier</I> consists of an integer <I>object number</I>, an integer
                <I>generation number</I>, and the <B>obj</B> keyword.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.10 (page 53).
                @see        PdfObject
                @see        PdfIndirectReference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.Endobj">
            <summary>
                membervariables
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.Generation">
            <summary>
                the generation number
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.Number">
            <summary>
                The object number
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#cctor">
            <summary>
                constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#ctor(System.Int32,iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Constructs a  PdfIndirectObject .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#ctor(System.Int32,System.Int32,iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Constructs a  PdfIndirectObject .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectObject.IndirectReference">
            <summary>
                methods
            </summary>
            <summary>
                Returns a  PdfIndirectReference  to this  PdfIndirectObject .
            </summary>
            <returns>a  PdfIndirectReference </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.WriteTo(System.IO.Stream)">
            <summary>
                Writes eficiently to a stream
                @throws IOException on write error
            </summary>
            <param name="os">the stream to write to</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfIndirectReference">
            <summary>
                PdfIndirectReference  contains a reference to a  PdfIndirectObject .
                Any object used as an element of an array or as a value in a dictionary may be specified
                by either a direct object of an indirect reference. An <I>indirect reference</I> is a reference
                to an indirect object, and consists of the indirect object's object number, generation number
                and the <B>R</B> keyword.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.11 (page 54).
                @see        PdfObject
                @see        PdfIndirectObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectReference.generation">
            <summary>
                membervariables
            </summary>
            <summary>
                the generation number
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectReference.number">
            <summary>
                the object number
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectReference.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectReference.ToString">
            <summary>
                Returns the generation of the object.
            </summary>
            <returns>a number.</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLayer">
            <summary>
                An optional content group is a dictionary representing a collection of graphics
                that can be made visible or invisible dynamically by users of viewer applications.
                In iText they are referenced as layers.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayer._on">
            <summary>
                Holds value of property on.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayer._onPanel">
            <summary>
                Holds value of property onPanel.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.#ctor(System.String,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a new layer.
            </summary>
            <param name="name">the name of the layer</param>
            <param name="writer">the writer</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Children">
            <summary>
                Gets the children layers.
            </summary>
            <returns>the children layers or  null  if the layer has no children</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Export">
            <summary>
                Specifies the recommended state for content in this
                group when the document (or part of it) is saved by a viewer application to a format
                that does not support optional content (for example, an earlier version of
                PDF or a raster image format).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Name">
            <summary>
                Sets the name of this layer.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.On">
            <summary>
                Gets the initial visibility of the layer.
            </summary>
            <returns>the initial visibility of the layer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.OnPanel">
            <summary>
                Gets the layer visibility in Acrobat's layer panel
                Sets the visibility of the layer in Acrobat's layer panel. If  false
                the layer cannot be directly manipulated by the user. Note that any children layers will
                also be absent from the panel.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Parent">
            <summary>
                Gets the parent layer.
            </summary>
            <returns>the parent layer or  null  if the layer has no parent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.View">
            <summary>
                Indicates that the group should be set to that state when the
                document is opened in a viewer application.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.PdfObject">
            <summary>
                Gets the dictionary representing the layer. It just returns  this .
            </summary>
            <returns>the dictionary representing the layer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Ref">
            <summary>
                Gets the  PdfIndirectReference  that represents this layer.
            </summary>
            <returns>the  PdfIndirectReference  that represents this layer</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.CreateTitle(System.String,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a title layer. A title layer is not really a layer but a collection of layers
                under the same title heading.
            </summary>
            <param name="title">the title text</param>
            <param name="writer">the  PdfWriter </param>
            <returns>the title layer</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.AddChild(iTextSharp.text.pdf.PdfLayer)">
            <summary>
                Adds a child layer. Nested layers can only have one parent.
            </summary>
            <param name="child">the child layer</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetCreatorInfo(System.String,System.String)">
            <summary>
                Used by the creating application to store application-specific
                data associated with this optional content group.
                values include but are not limited to <B>Artwork</B>, for graphic-design or publishing
                applications, and <B>Technical</B>, for technical designs such as building plans or
                schematics
            </summary>
            <param name="creator">a text string specifying the application that created the group</param>
            <param name="subtype">a string defining the type of content controlled by the group. Suggested</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetLanguage(System.String,System.Boolean)">
            <summary>
                Specifies the language of the content controlled by this
                optional content group
                (for example, <B>es-MX</B> represents Mexican Spanish)
                match between the system language and the language strings in all usage dictionaries
            </summary>
            <param name="lang">a language string which specifies a language and possibly a locale</param>
            <param name="preferred">used by viewer applications when there is a partial match but no exact</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetPrint(System.String,System.Boolean)">
            <summary>
                Specifies that the content in this group is intended for
                use in printing
                for example, <B>Trapping</B>, <B>PrintersMarks</B> and <B>Watermark</B>
                set to that state when the document is printed from a viewer application
            </summary>
            <param name="subtype">a name specifying the kind of content controlled by the group;</param>
            <param name="printstate">indicates that the group should be</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetZoom(System.Single,System.Single)">
            <summary>
                Specifies a range of magnifications at which the content
                in this optional content group is best viewed.
                should be ON. A negative value will set the default to 0
                should be ON. A negative value will set the largest possible magnification supported by the
                viewer application
            </summary>
            <param name="min">the minimum recommended magnification factors at which the group</param>
            <param name="max">the maximum recommended magnification factor at which the group</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLayerMembership">
            <summary>
                Content typically belongs to a single optional content group,
                and is visible when the group is <B>ON</B> and invisible when it is <B>OFF</B>. To express more
                complex visibility policies, content should not declare itself to belong to an optional
                content group directly, but rather to an optional content membership dictionary
                represented by this class.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.Alloff">
            <summary>
                Visible only if all of the entries are <B>OFF</B>.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.Allon">
            <summary>
                Visible only if all of the entries are <B>ON</B>.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.Anyoff">
            <summary>
                Visible if any of the entries are <B>OFF</B>.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.Anyon">
            <summary>
                Visible if any of the entries are <B>ON</B>.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayerMembership.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a new, empty, membership layer.
            </summary>
            <param name="writer">the writer</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.Layers">
            <summary>
                Gets the member layers.
            </summary>
            <returns>the member layers</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.VisibilityPolicy">
            <summary>
                Sets the visibility policy for content belonging to this
                membership dictionary. Possible values are ALLON, ANYON, ANYOFF and ALLOFF.
                The default value is ANYON.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.PdfObject">
            <summary>
                Gets the dictionary representing the membership layer. It just returns  this .
            </summary>
            <returns>the dictionary representing the layer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.Ref">
            <summary>
                Gets the  PdfIndirectReference  that represents this membership layer.
            </summary>
            <returns>the  PdfIndirectReference  that represents this layer</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayerMembership.AddMember(iTextSharp.text.pdf.PdfLayer)">
            <summary>
                Adds a new member to the layer.
            </summary>
            <param name="layer">the new member to the layer</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLine">
            <summary>
                PdfLine  defines an array with  PdfChunk -objects
                that fit into 1 line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.Alignment">
            <summary>
                The alignment of the line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.height">
            <summary>
                The heigth of the line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.Left">
            <summary>
                The left indentation of the line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.Line">
            <summary>
                membervariables
            </summary>
            <summary>
                The arraylist containing the chunks.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.listSymbol">
            <summary>
                The listsymbol (if necessary).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.newlineSplit">
            <summary>
                true  if the chunk splitting was caused by a newline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.originalWidth">
            <summary>
                The original width.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.SymbolIndent">
            <summary>
                The listsymbol (if necessary).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.Width">
            <summary>
                The width of the line.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.#ctor(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new  PdfLine -object.
            </summary>
            <param name="left">the limit of the line at the left</param>
            <param name="right">the limit of the line at the right</param>
            <param name="alignment">the alignment of the line</param>
            <param name="height">the height of the line</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Collections.Generic.IList{iTextSharp.text.pdf.PdfChunk},System.Boolean)">
            <summary>
                Creates a PdfLine object.
            </summary>
            <param name="left">the left offset</param>
            <param name="originalWidth">the original width of the line</param>
            <param name="remainingWidth">bigger than 0 if the line isn't completely filled</param>
            <param name="alignment">the alignment of the line</param>
            <param name="newlineSplit">was the line splitted (or does the paragraph end with this line)</param>
            <param name="line">an array of PdfChunk objects</param>
            <param name="isRtl">do you have to read the line from Right to Left?</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Size">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Returns the number of chunks in the line.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Height">
            <summary>
                Returns the height of the line.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.IndentLeft">
            <summary>
                Returns the left indentation of the line taking the alignment of the line into account.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.WidthLeft">
            <summary>
                Returns the width that is left, after a maximum of characters is added to the line.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.NumberOfSpaces">
            <summary>
                Returns the number of space-characters in this line.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.ListItem">
            <summary>
                Sets the listsymbol of this line.
                This is only necessary for the first line of a  ListItem .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.ListSymbol">
            <summary>
                Returns the listsymbol of this line.
            </summary>
            <returns>a  PdfChunk  if the line has a listsymbol;  null  otherwise</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.ListIndent">
            <summary>
                Return the indentation needed to show the listsymbol.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.NewlineSplit">
            <summary>
                Checks if a newline caused the line split.
            </summary>
            <returns> true  if a newline caused the line split</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.LastStrokeChunk">
            <summary>
                Gets the index of the last  PdfChunk  with metric attributes
            </summary>
            <returns>the last  PdfChunk  with metric attributes</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.OriginalWidth">
            <summary>
                Gets the original width of the line.
            </summary>
            <returns>the original width of the line</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Ascender">
            <summary>
                Gets the maximum size of the ascender for all the fonts used
                in this line.
            </summary>
            <returns>maximum size of all the ascenders used in this line</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Descender">
            <summary>
                Gets the biggest descender for all the fonts used
                in this line.  Note that this is a negative number.
            </summary>
            <returns>maximum size of all the ascenders used in this line</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.Add(iTextSharp.text.pdf.PdfChunk)">
            <summary>
                methods
            </summary>
            <summary>
                Adds a  PdfChunk  to the  PdfLine .
                a  PdfChunk  containing the part of the chunk that could
                not be added is returned
            </summary>
            <param name="chunk">the  PdfChunk  to add</param>
            <returns> null  if the chunk could be added completely; if not</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetEnumerator">
            <summary>
                Returns an iterator of  PdfChunk s.
            </summary>
            <returns>an  Iterator </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.HasToBeJustified">
            <summary>
                Checks if this line has to be justified.
            </summary>
            <returns> true  if the alignment equals <VAR>ALIGN_JUSTIFIED</VAR> and there is some width left.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.ResetAlignment">
            <summary>
                Resets the alignment of this line.
                The alignment of the last line of for instance a  Paragraph
                that has to be justified, has to be reset to <VAR>ALIGN_LEFT</VAR>.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.SetExtraIndent(System.Single)">
            <summary>
                Adds extra indentation to the left (for Paragraph.setFirstLineIndent).
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.ToString">
            <summary>
                Get the string representation of what is in this line.
            </summary>
            <returns>a  string </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetChunk(System.Int32)">
            <summary>
                Gets a  PdfChunk  by index.
            </summary>
            <param name="idx">the index</param>
            <returns>the  PdfChunk  or null if beyond the array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetMaxSize">
            <summary>
                Gets the difference between the "normal" leading and the maximum
                size (for instance when there are images in the chunk).
                @since    2.1.5
            </summary>
            <returns>an extra leading for images</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetSeparatorCount">
            <summary>
                Gets the number of separators in the line.
                @since   2.1.2
            </summary>
            <returns>the number of separators in the line</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLiteral">
            <summary>
                a Literal
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfMediaClipData">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfName">
            <summary>
                PdfName  is an object that can be used as a name in a PDF-file.
                A name, like a string, is a sequence of characters. It must begin with a slash
                followed by a sequence of ASCII characters in the range 32 through 136 except
                %, (, ), [, ], &lt;, &gt;, {, }, / and #. Any character except 0x00 may be included
                in a name by writing its twocharacter hex code, preceded by #. The maximum number
                of characters in a name is 127.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.5 (page 39-40).
                @see        PdfObject
                @see        PdfDictionary
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName._3D">
            <summary>
                CLASS CONSTANTS (a variety of standard names used in PDF))
            </summary>
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.A">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Aa">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Absolutecolorimetric">
            <summary>
                A name
                @since 2.1.5 renamed from ABSOLUTECALORIMETRIC
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ac">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Acroform">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Action">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Activation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Adbe">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Actualtext">
            <summary>
                a name used in PDF structure
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdbePkcs7Detached">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdbePkcs7S4">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdbePkcs7S5">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdbePkcs7Sha1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdbeX509RsaSha1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdobePpklite">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AdobePpkms">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Aesv2">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ais">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Allpages">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Alt">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Alternate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Animation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Annot">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Annots">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Antialias">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ap">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Appdefault">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Art">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Artbox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ascent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.As">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ascii85Decode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Asciihexdecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Asset">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Assets">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Authevent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Author">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.B">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Background">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Baseencoding">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Basefont">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Baseversion">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bbox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bc">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bg">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bibentry">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bigfive">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Binding">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bindingmaterialname">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bitspercomponent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bitspersample">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bl">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Blackis1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Blackpoint">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Blockquote">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bleedbox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Blinds">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Border">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bounds">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Box">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Bs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Btn">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Byterange">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C0">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CA">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CA_">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Calgray">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Calrgb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Capheight">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Caption">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Catalog">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Category">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ccittfaxdecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Center">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Centerwindow">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cert">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cf">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cfm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ch">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Charprocs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ci">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cidfonttype0">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cidfonttype2">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cidset">
            <summary>
                A name
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cidsysteminfo">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cidtogidmap">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Circle">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cmd">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Co">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Code">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Colors">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Colorspace">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Collection">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Collectionfield">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Collectionitem">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Collectionschema">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Collectionsort">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Collectionsubitem">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Columns">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Condition">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Configuration">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Configurations">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Contactinfo">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTENT">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Contents">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Coords">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Count">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Courier">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CourierBold">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CourierOblique">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CourierBoldoblique">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Creationdate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Creator">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Creatorinfo">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cropbox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Crypt">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cuepoint">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Cuepoints">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.D">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Da">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Data">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dc">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dctdecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Deactivation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Decode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Decodeparms">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Default">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Defaultcryptfilter">
            <summary>
                A name
                @since	2.1.5 renamed from DEFAULTCRYPTFILER
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Defaultcmyk">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Defaultgray">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Defaultrgb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Desc">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Descendantfonts">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Descent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dest">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Destoutputprofile">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dests">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Devicegray">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Devicergb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Devicecmyk">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Di">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Differences">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dissolve">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Direction">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Displaydoctitle">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Div">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Docmdp">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Docopen">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Document">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Domain">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dp">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dr">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ds">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dur">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Duplex">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Duplexflipshortedge">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Duplexfliplongedge">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Dw">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.E">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Earlychange">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EF">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Eff">
            <summary>
                A name
                @since	2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Efopen">
            <summary>
                A name
                @since	2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Embedded">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Embeddedfile">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Embeddedfiles">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Encode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Encodedbytealign">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Encoding">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Encrypt">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Encryptmetadata">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Endofblock">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Endofline">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Extend">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Extensions">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Extensionlevel">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Extgstate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Export">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Exportstate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Event">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.F">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Far">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fdecodeparms">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fdf">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ff">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ffilter">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fields">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Figure">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fileattachment">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Filespec">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Filter">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.First">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Firstchar">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Firstpage">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fit">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fith">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fitv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fitr">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fitb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fitbh">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fitbv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fitwindow">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Flags">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Flash">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Flashvars">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Flatedecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fo">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Font">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontbbox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontdescriptor">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontfile">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontfile2">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontfile3">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontmatrix">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fontname">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Foreground">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Form">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Formtype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Formula">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Freetext">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Frm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ft">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Fullscreen">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Function">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Functions">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Functiontype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Gamma">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Gbk">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Glitter">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Goto">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Gotoe">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Gotor">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Group">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GtsPdfa1">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GtsPdfx">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GtsPdfxversion">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H1">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H2">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H3">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H4">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H5">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H6">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Halign">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Height">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Helv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Helvetica">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HelveticaBold">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HelveticaOblique">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HelveticaBoldoblique">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Hid">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Hide">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Hidemenubar">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Hidetoolbar">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Hidewindowui">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Highlight">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Hoffset">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.I">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Iccbased">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Id">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Identity">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.If">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Image">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Imageb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Imagec">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Imagei">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Imagemask">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Index">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Indexed">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Info">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ink">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Inklist">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Instances">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Importdata">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Intent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Interpolate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ismap">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Irt">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Italicangle">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Itxt">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ix">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Javascript">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Jbig2Decode">
            <summary>
                A name
                @since	2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Jbig2Globals">
            <summary>
                A name
                @since	2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Jpxdecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Js">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.K">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Keywords">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Kids">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.L">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.L2R">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lang">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Language">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Last">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lastchar">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lastpage">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Launch">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lbl">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lbody">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LENGTH">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Length1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Li">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Limits">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Line">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Linear">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Link">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Listmode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Location">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lock">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Locked">
            <summary>
                A name
                @since	2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Lzwdecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.M">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Material">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Matrix">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MacExpertEncoding">
            <summary>
                A name of an encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MacRomanEncoding">
            <summary>
                A name of an encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Marked">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Markinfo">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Mask">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MaxLowerCase">
            <summary>
                A name
                @since	2.1.6 renamed from MAX
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MaxCamelCase">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Maxlen">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Mediabox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Mcid">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Mcr">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Metadata">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MinLowerCase">
            <summary>
                A name
                @since	2.1.6 renamed from MIN
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MinCamelCase">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Mk">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Mmtype1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Moddate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N0">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N2">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N3">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N4">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Name">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Named">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Names">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Navigation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Navigationpane">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Near">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Needappearances">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Newwindow">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Next">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Nextpage">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Nm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.None">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Nonfullscreenpagemode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Nonstruct">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Note">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Numcopies">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Nums">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.O">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Obj">
            <summary>
                A name used with Document Structure
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Objr">
            <summary>
                a name used with Doucment Structure
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Objstm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Oc">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ocg">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ocgs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ocmd">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ocproperties">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Off">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OFF">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.On">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Onecolumn">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Open">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Openaction">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Op">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Op_">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Opm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Opt">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Order">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ordering">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Oscillating">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Outlines">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Outputcondition">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Outputconditionidentifier">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Outputintent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Outputintents">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.P">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Page">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pagelabels">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pagelayout">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pagemode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pages">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Painttype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Panose">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Params">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Parent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Parenttree">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Parenttreenextkey">
            <summary>
                A name used in defining Document Structure.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Part">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Passcontextclick">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pattern">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Patterntype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pc">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pdf">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pdfdocencoding">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Perceptual">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Perms">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pg">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pi">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Picktraybypdfsize">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Playcount">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Po">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Popup">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Position">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Predictor">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Preferred">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Presentation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Preserverb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Prev">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Prevpage">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Print">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Printarea">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Printclip">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Printpagerange">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Printscaling">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Printstate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Private">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Procset">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Producer">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Properties">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ps">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pubsec">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Pv">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Q">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Quadpoints">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Quote">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.R">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.R2L">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Range">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rc">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rbgroups">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Reason">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Recipients">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rect">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Reference">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Registry">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Registryname">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Relativecolorimetric">
            <summary>
                A name
                @since	2.1.5 renamed from RELATIVECALORIMETRIC
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rendition">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Resetform">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Resources">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ri">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmedia">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediaactivation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediaanimation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediacommand">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediaconfiguration">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediacontent">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediadeactivation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediaexecute">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediainstance">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediaparams">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediaposition">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediapresentation">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediasettings">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Richmediawindow">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rolemap">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Root">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rotate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rows">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ruby">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Runlengthdecode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Rv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.S">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Saturation">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Schema">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Screen">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Scripts">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sect">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Separation">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Setocgstate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Settings">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Shading">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Shadingtype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ShiftJis">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sig">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sigflags">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sigref">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Simplex">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Singlepage">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Size">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Smask">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sort">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sound">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Span">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Speed">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Split">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Square">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Squiggly">
            <summary>
                A name
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.St">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Stamp">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Standard">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.State">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Stdcf">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Stemv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Stmf">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Strf">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Strikeout">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Structparent">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Structparents">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Structtreeroot">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Style">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Subfilter">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Subject">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Submitform">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Subtype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Supplement">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sv">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Sw">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Symbol">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.T">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ta">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Table">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tabs">
            <summary>
                A name
                @since	2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tbody">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Td">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Text">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tfoot">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Th">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Thead">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Thumb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Threads">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ti">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Time">
            <summary>
                A name
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tilingtype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TimesRoman">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TimesBold">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TimesItalic">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TimesBolditalic">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Title">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tk">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Toc">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Toci">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Toggle">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Toolbar">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tounicode">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tp">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tablerow">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Trans">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Transformparams">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Transformmethod">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Transparency">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Transparent">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Trapped">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Trimbox">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Truetype">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tu">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Twocolumnleft">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Twocolumnright">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Twopageleft">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Twopageright">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Tx">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Type0">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Type1">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Type3">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.U">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Uf">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Uhc">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Underline">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ur">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ur3">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Uri">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Url">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Usage">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Useattachments">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Usenone">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Useoc">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Useoutlines">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.User">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Userproperties">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Userunit">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Usethumbs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.V">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.V2">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Valign">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VerisignPpkvs">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Version">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Video">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.View">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Views">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Viewarea">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Viewclip">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Viewerpreferences">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Viewstate">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Visiblepages">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Voffset">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.W">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.W2">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Warichu">
            <summary>
                A name
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Wc">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Widget">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Width">
            <summary>
                A name of an attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Widths">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Win">
            <summary>
                A name of an encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WinAnsiEncoding">
            <summary>
                A name of an encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Window">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Windowed">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Wipe">
            <summary>
                A name of an encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Whitepoint">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Wp">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ws">
            <summary>
                A name of an encoding
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.X">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xa">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xd">
            <summary>
                A name.
                @since 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xfa">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xml">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xobject">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xstep">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xref">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xrefstm">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Xyz">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Ystep">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Zadb">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Zapfdingbats">
            <summary>
                A name of a base 14 type 1 font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Zoom">
            <summary>
                A name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.StaticNames">
            <summary>
                map strings to all known static names
                @since 2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#cctor">
            <summary>
                Use reflection to cache all the static public final names so
                future  PdfName  additions don't have to be "added twice".
                A bit less efficient (around 50ms spent here on a 2.2ghz machine),
                but Much Less error prone.
                @since 2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#ctor(System.String)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new  PdfName . The name length will be checked.
            </summary>
            <param name="name">the new name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#ctor(System.String,System.Boolean)">
            <summary>
                Constructs a new  PdfName .
                have any length
            </summary>
            <param name="name">the new name</param>
            <param name="lengthCheck">if  true  check the lenght validity, if  false  the name can</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.CompareTo(System.Object)">
            <summary>
                methods
            </summary>
            <summary>
                Compares this object with the specified object for order.  Returns a
                negative int, zero, or a positive int as this object is less
                than, equal to, or greater than the specified object.
                is less than, equal to, or greater than the specified object.
                @throws Exception if the specified object's type prevents it
                from being compared to this Object.
            </summary>
            <param name="obj">the Object to be compared.</param>
            <returns>a negative int, zero, or a positive int as this object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.Equals(System.Object)">
            <summary>
                Indicates whether some other object is "equal to" this one.
                argument;  false  otherwise.
            </summary>
            <param name="obj">the reference object with which to compare.</param>
            <returns> true  if this object is the same as the obj</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.GetHashCode">
            <summary>
                Returns a hash code value for the object. This method is
                supported for the benefit of hashtables such as those provided by
                java.util.Hashtable .
            </summary>
            <returns>a hash code value for this object.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.EncodeName(System.String)">
            <summary>
                Encodes a plain name given in the unescaped form "AB CD" into "/AB#20CD".
                @since	2.1.5
            </summary>
            <param name="name">the name to encode</param>
            <returns>the encoded name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.DecodeName(System.String)">
            <summary>
                Decodes an escaped name in the form "/AB#20CD" into "AB CD".
            </summary>
            <param name="name">the name to decode</param>
            <returns>the decoded name</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNameTree">
            <summary>
                Creates a name tree.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNameTree.WriteTree(System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.PdfObject},iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a name tree.
                and the value is a  PdfObject . Note that although the
                keys are strings only the lower byte is used and no check is made for chars
                with the same lower byte and different upper byte. This will generate a wrong
                tree name.
                @throws IOException on error
                generally pointed to by the key /Dests, for example
            </summary>
            <param name="items">the item of the name tree. The key is a  String </param>
            <param name="writer">the writer</param>
            <returns>the dictionary with the name tree. This dictionary is the one</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNull">
            <summary>
                PdfNull  is the Null object represented by the keyword <VAR>null</VAR>.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.9 (page 53).
                @see        PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfNull.Pdfnull">
            <summary>
                static membervariables
            </summary>
            <summary>
                This is an instance of the  PdfNull -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNull.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfNull -object.
                You never need to do this yourself, you can always use the static object <VAR>PDFNULL</VAR>.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNull.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNumber">
            <summary>
                PdfNumber  provides two types of numbers, int and real.
                ints may be specified by signed or unsigned constants. Reals may only be
                in decimal format.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.3 (page 37).
                @see        PdfObject
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfNumber._value">
            <summary>
                actual value of this  PdfNumber , represented as a  double
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.String)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfNumber -object.
            </summary>
            <param name="content">value of the new  PdfNumber -object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Int32)">
            <summary>
                Constructs a new int  PdfNumber -object.
            </summary>
            <param name="value">value of the new  PdfNumber -object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Double)">
            <summary>
                Constructs a new REAL  PdfNumber -object.
            </summary>
            <param name="value">value of the new  PdfNumber -object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Single)">
            <summary>
                Constructs a new REAL  PdfNumber -object.
            </summary>
            <param name="value">value of the new  PdfNumber -object</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfNumber.DoubleValue">
            <summary>
                methods returning the value of this object
            </summary>
            <summary>
                Returns the primitive  int  value of this object.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfNumber.FloatValue">
            <summary>
                Returns the primitive  double  value of this object.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.Increment">
            <summary>
                other methods
            </summary>
            <summary>
                Increments the value of the  PdfNumber -object with 1.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNumberTree">
            <summary>
                Creates a number tree.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumberTree.WriteTree``1(System.util.INullValueDictionary{System.Int32,``0},iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a number tree.
                and the value is a  PdfObject .
                @throws IOException on error
            </summary>
            <param name="items">the item of the number tree. The key is an  Integer </param>
            <param name="writer">the writer</param>
            <returns>the dictionary with the number tree.</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfObject">
            <summary>
                PdfObject  is the abstract baseclass of all PDF objects.
                PDF supports seven basic types of objects: bools, numbers, strings, names,
                arrays, dictionaries and streams. In addition, PDF provides a null object.
                Objects may be labeled so that they can be referred to by other objects.
                All these basic PDF objects are described in the 'Portable Document Format
                Reference Manual version 1.3' Chapter 4 (pages 37-54).
                @see        PdfNull
                @see        Pdfbool
                @see        PdfNumber
                @see        PdfString
                @see        PdfName
                @see        PdfArray
                @see        PdfDictionary
                @see        PdfStream
                @see        PdfIndirectReference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.ARRAY">
            <summary>
                static membervariables (all the possible types of a PdfObject)
            </summary>
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.BOOLEAN">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.DICTIONARY">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.INDIRECT">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NAME">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NOTHING">
            <summary>
                This is an empty string used for the  PdfNull -object and for an empty  PdfString -object.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NULL">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NUMBER">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.STREAM">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.STRING">
            <summary>
                a possible type of  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.TEXT_PDFDOCENCODING">
            <summary>
                This is the default encoding to be used for converting strings into bytes and vice versa.
                The default encoding is PdfDocEcoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.TEXT_UNICODE">
            <summary>
                This is the encoding to be used to output text in Unicode.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.Bytes">
            <summary>
                membervariables
            </summary>
            <summary>
                the content of this  PdfObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.indRef">
            <summary>
                Holds value of property indRef.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.type">
            <summary>
                the type of this  PdfObject
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfObject  of a certain <VAR>type</VAR> without any <VAR>content</VAR>.
            </summary>
            <param name="type">type of the new  PdfObject </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32,System.String)">
            <summary>
                Constructs a  PdfObject  of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            </summary>
            <param name="type">type of the new  PdfObject </param>
            <param name="content">content of the new  PdfObject  as a  String .</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32,System.Byte[])">
            <summary>
                Constructs a  PdfObject  of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            </summary>
            <param name="type">type of the new  PdfObject </param>
            <param name="bytes">content of the new  PdfObject  as an array of  byte .</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.CanBeInObjStm">
            <summary>
                Can this object be in an object stream?
            </summary>
            <returns>true if this object can be in an object stream.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.GetBytes">
            <summary>
                Gets the presentation of this object in a byte array
            </summary>
            <returns>a byte array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsIndirect">
            <summary>
                Checks if this is an indirect object.
            </summary>
            <returns>true if this is an indirect object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.ToString">
            <summary>
                Returns the length of the PDF representation of the  PdfObject .
                In some cases, namely for  PdfString  and  PdfStream ,
                this method differs from the method  length  because  length
                returns the length of the actual content of the  PdfObject .
                Remark: the actual content of an object is in most cases identical to its representation.
                The following statement is always true: Length() &gt;= PdfLength().
            </summary>
            <returns>a length</returns>
            <summary>
                public int PdfLength() {
            </summary>
            <summary>
                return ToPdf(null).length;
            </summary>
            <summary>
                }
            </summary>
            <summary>
                Returns the  String -representation of this  PdfObject .
            </summary>
            <returns>a  String </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfOcProperties">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfOutline">
            <summary>
                PdfOutline  is an object that represents a PDF outline entry.
                An outline allows a user to access views of a document by name.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 6.7 (page 104-106)
                @see     PdfDictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline._action">
            <summary>
                The  PdfAction  for this outline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline._destination">
            <summary>
                value of the <B>Destination</B>-key
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline._color">
            <summary>
                Holds value of property color.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline._open">
            <summary>
                Holds value of property open.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline._tag">
            <summary>
                Holds value of property tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.kids">
            <summary>
                membervariables
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,System.String)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for the  outlines object .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,System.String,System.Boolean)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="action">the  PdfAction  for this outline item</param>
            <param name="title">the title of this outline item</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,System.String,System.Boolean)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="destination">the destination for this outline item</param>
            <param name="title">the title of this outline item</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.pdf.PdfString)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry . The open mode is
                true .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="action">the  PdfAction  for this outline item</param>
            <param name="title">the title of this outline item</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.pdf.PdfString,System.Boolean)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="action">the  PdfAction  for this outline item</param>
            <param name="title">the title of this outline item</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfString,System.Boolean)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="destination">the destination for this outline item</param>
            <param name="title">the title of this outline item</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.Paragraph,System.Boolean)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="action">the  PdfAction  for this outline item</param>
            <param name="title">the title of this outline item</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.Paragraph,System.Boolean)">
            <summary>
                Constructs a  PdfOutline .
                This is the constructor for an  outline entry .
            </summary>
            <param name="parent">the parent of this outline item</param>
            <param name="destination">the destination for this outline item</param>
            <param name="title">the title of this outline item</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Color">
            <summary>
                methods
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.IndirectReference">
            <summary>
                the  PdfIndirectReference  of this object
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Open">
            <summary>
                Setter for property open.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Parent">
            <summary>
                value of the <B>Parent</B>-key
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.PdfDestination">
            <summary>
                Gets the destination for this outline.
            </summary>
            <returns>the destination</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Style">
            <summary>
                Holds value of property style.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Tag">
            <summary>
                Getter for property tag.
            </summary>
            <returns>Value of property tag.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Count">
            <summary>
                value of the <B>Count</B>-key
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.InitOutline(iTextSharp.text.pdf.PdfOutline,System.String,System.Boolean)">
            <summary>
                Helper for the constructors.
            </summary>
            <param name="parent">the parent outline</param>
            <param name="title">the title for this outline</param>
            <param name="open"> true  if the children are visible</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPage">
            <summary>
                PdfPage  is the PDF Page-object.
                A Page object is a dictionary whose keys describe a single page containing text,
                graphics, and images. A Page onjects is a leaf of the Pages tree.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 6.4 (page 73-81)
                @see     PdfPageElement
                @see     PdfPages
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.Invertedportrait">
            <summary>
                value of the <B>Rotate</B> key for a page in INVERTEDPORTRAIT
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.Landscape">
            <summary>
                value of the <B>Rotate</B> key for a page in LANDSCAPE
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.Portrait">
            <summary>
                value of the <B>Rotate</B> key for a page in PORTRAIT
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.Seascape">
            <summary>
                value of the <B>Rotate</B> key for a page in SEASCAPE
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage._boxStrings">
            <summary>
                membervariables
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage._mediaBox">
            <summary>
                value of the <B>MediaBox</B> key
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.#ctor(iTextSharp.text.pdf.PdfRectangle,System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.PdfRectangle},iTextSharp.text.pdf.PdfDictionary,System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfPage .
            </summary>
            <param name="mediaBox">a value for the <B>MediaBox</B> key</param>
            <param name="boxSize"></param>
            <param name="resources">an indirect reference to a  PdfResources -object</param>
            <param name="rotate">a value for the <B>Rotate</B> key</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.#ctor(iTextSharp.text.pdf.PdfRectangle,System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.PdfRectangle},iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Constructs a  PdfPage .
            </summary>
            <param name="mediaBox">a value for the <B>MediaBox</B> key</param>
            <param name="boxSize"></param>
            <param name="resources">an indirect reference to a  PdfResources -object</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPage.MediaBox">
            <summary>
                Checks if this page element is a tree of pages.
                This method allways returns  false .
            </summary>
            <returns> false  because this is a single page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.Add(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                methods
            </summary>
            <summary>
                Adds an indirect reference pointing to a  PdfContents -object.
            </summary>
            <param name="contents">an indirect reference to a  PdfContents -object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.RotateMediaBox">
            <summary>
                Rotates the mediabox, but not the text in it.
            </summary>
            <returns>a  PdfRectangle </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPageEventHelper">
            <summary>
                Helps the use of  PdfPageEvent  by implementing all the interface methods.
                A class can extend  PdfPageEventHelper  and only implement the
                needed methods.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)">
            <summary>
                Called when a Chapter is written.
                position  will hold the height at which the
                chapter will be written to.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the chapter will be written to</param>
            <param name="title">the title of the Chapter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when the end of a Chapter is reached.
                position  will hold the height of the end of the chapter.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="position">the position of the end of the chapter.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when the document is closed.
                Note that this method is called with the page number equal
                to the last page plus one.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            <summary>
                Called when a  Chunk  with a generic tag is written.
                It is usefull to pinpoint the  Chunk  location to generate
                bookmarks, for example.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="rect">the  Rectangle  containing the  Chunk </param>
            <param name="text">the text of the tag</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when the document is opened.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when a Paragraph is written.
                paragraphPosition  will hold the height at which the
                paragraph will be written to. This is useful to insert bookmarks with
                more control.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the paragraph will be written to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when a Paragraph is written.
                paragraphPosition  will hold the height of the end of the paragraph.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position of the end of the paragraph</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)">
            <summary>
                Called when a Section is written.
                position  will hold the height at which the
                section will be written to.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="paragraphPosition">the position the chapter will be written to</param>
            <param name="depth"></param>
            <param name="title">the title of the Chapter</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)">
            <summary>
                Called when the end of a Section is reached.
                position  will hold the height of the section end.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
            <param name="position">the position of the end of the section</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
                Called when a page is initialized.
                Note that if even if a page is not written this method is still
                called. It is preferable to use  onEndPage  to avoid
                infinite loops.
            </summary>
            <param name="writer">the  PdfWriter  for this document</param>
            <param name="document">the document</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPageLabels">
            <summary>
                Page labels are used to identify each
                page visually on the screen or in print.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.DECIMAL_ARABIC_NUMERALS">
            <summary>
                Logical pages will have the form 1,2,3,...
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.EMPTY">
            <summary>
                No logical page numbers are generated but fixed text may
                still exist
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.LOWERCASE_LETTERS">
            <summary>
                Logical pages will have the form of uppercase letters
                (a to z for the first 26 pages, aa to zz for the next 26, and so on)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.LOWERCASE_ROMAN_NUMERALS">
            <summary>
                Logical pages will have the form i,ii,iii,iv,...
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.UPPERCASE_LETTERS">
            <summary>
                Logical pages will have the form of uppercase letters
                (A to Z for the first 26 pages, AA to ZZ for the next 26, and so on)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.UPPERCASE_ROMAN_NUMERALS">
            <summary>
                Logical pages will have the form I,II,III,IV,...
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.NumberingStyle">
            <summary>
                Dictionary values to set the logical page styles
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.Map">
            <summary>
                The sequence of logical pages. Will contain at least a value for page 1
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.#ctor">
            <summary>
                Creates a new PdfPageLabel with a default logical page 1
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.GetPageLabelFormats(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Retrieves the page labels from a PDF as an array of {@link PdfPageLabelFormat} objects.
                or  null  if no page labels are present
            </summary>
            <param name="reader">a PdfReader object that has the page labels you want to retrieve</param>
            <returns>a PdfPageLabelEntry array, containing an entry for each format change</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.GetPageLabels(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Retrieves the page labels from a PDF as an array of String objects.
            </summary>
            <param name="reader">a PdfReader object that has the page labels you want to retrieve</param>
            <returns>a String array or  null  if no page labels are present</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
                Adds or replaces a page label.
            </summary>
            <param name="page">the real page to start the numbering. First page is 1</param>
            <param name="numberStyle">the numbering style such as LOWERCASE_ROMAN_NUMERALS</param>
            <param name="text">the text to prefix the number. Can be  null  or empty</param>
            <param name="firstPage">the first logical page number</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32,System.String)">
            <summary>
                Adds or replaces a page label. The first logical page has the default
                of 1.
            </summary>
            <param name="page">the real page to start the numbering. First page is 1</param>
            <param name="numberStyle">the numbering style such as LOWERCASE_ROMAN_NUMERALS</param>
            <param name="text">the text to prefix the number. Can be  null  or empty</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32)">
            <summary>
                Adds or replaces a page label. There is no text prefix and the first
                logical page has the default of 1.
            </summary>
            <param name="page">the real page to start the numbering. First page is 1</param>
            <param name="numberStyle">the numbering style such as LOWERCASE_ROMAN_NUMERALS</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(iTextSharp.text.pdf.PdfPageLabels.PdfPageLabelFormat)">
            <summary>
                Adds or replaces a page label.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.RemovePageLabel(System.Int32)">
            <summary>
                Removes a page label. The first page lagel can not be removed, only changed.
            </summary>
            <param name="page">the real page to remove</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.GetDictionary(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Gets the page label dictionary to insert into the document.
            </summary>
            <returns>the page label dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.PdfPageLabelFormat.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
                Creates a page label format.
            </summary>
            <param name="physicalPage">the real page to start the numbering. First page is 1</param>
            <param name="numberStyle">the numbering style such as LOWERCASE_ROMAN_NUMERALS</param>
            <param name="prefix">the text to prefix the number. Can be  null  or empty</param>
            <param name="logicalPage">the first logical page number</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPages">
            <summary>
                PdfPages  is the PDF Pages-object.
                The Pages of a document are accessible through a tree of nodes known as the Pages tree.
                This tree defines the ordering of the pages in the document.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 6.3 (page 71-73)
                @see        PdfPageElement
                @see        PdfPage
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPages.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfPages -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPages.WritePageTree">
            <summary>
                returns the top parent to include in the catalog
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPattern">
            <summary>
                A  PdfPattern  defines a ColorSpace
                @see     PdfStream
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPattern.#ctor(iTextSharp.text.pdf.PdfPatternPainter)">
            <summary>
                Creates a PdfPattern object.
            </summary>
            <param name="painter">a pattern painter instance</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPattern.#ctor(iTextSharp.text.pdf.PdfPatternPainter,System.Int32)">
            <summary>
                Creates a PdfPattern object.
                @since   2.1.3
            </summary>
            <param name="painter">a pattern painter instance</param>
            <param name="compressionLevel">the compressionLevel for the stream</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPatternPainter">
            <summary>
                Implements the pattern.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a  PdfPattern .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.BaseColor)">
            <summary>
                Creates new PdfPattern
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#addImage(com.lowagie.text.Image, float, float, float, float, float, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetCmykColorFill">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#resetCMYKColorFill()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetCmykColorStroke">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#resetCMYKColorStroke()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetGrayFill">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#resetGrayFill()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetGrayStroke">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#resetGrayStroke()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetRgbColorFill">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#resetRGBColorFill()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetRgbColorStroke">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#resetRGBColorStroke()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCmykColorFill(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorFill(int, int, int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCmykColorFillF(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorFillF(float, float, float, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCmykColorStroke(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorStroke(int, int, int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCmykColorStrokeF(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorStrokeF(float, float, float, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorFill(iTextSharp.text.BaseColor)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setColorFill(java.awt.Color)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorFill(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setColorFill(com.lowagie.text.pdf.PdfSpotColor, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorStroke(iTextSharp.text.BaseColor)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setColorStroke(java.awt.Color)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorStroke(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setColorStroke(com.lowagie.text.pdf.PdfSpotColor, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetGrayFill(System.Single)">
            <summary>
                Gets a duplicate of this  PdfPatternPainter . All
                the members are copied by reference but the buffer stays different.
            </summary>
            <returns>a copy of this  PdfPatternPainter </returns>
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setGrayFill(float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetGrayStroke(System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setGrayStroke(float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setPatternFill(com.lowagie.text.pdf.PdfPatternPainter)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.BaseColor,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setPatternFill(com.lowagie.text.pdf.PdfPatternPainter, java.awt.Color,
                float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.BaseColor,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter, java.awt.Color,
                float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRgbColorFill(System.Int32,System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setRGBColorFill(int, int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRgbColorFillF(System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setRGBColorFillF(float, float, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRgbColorStroke(System.Int32,System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setRGBColorStroke(int, int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRgbColorStrokeF(System.Single,System.Single,System.Single)">
            <summary>
                @see com.lowagie.text.pdf.PdfContentByte#setRGBColorStrokeF(float, float, float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.GetPattern">
            <summary>
                Gets the stream representing this pattern
            </summary>
            <returns>the stream representing this pattern</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.GetPattern(System.Int32)">
            <summary>
                Gets the stream representing this pattern
                @since   2.1.3
            </summary>
            <param name="compressionLevel">the compression level of the stream</param>
            <returns>the stream representing this pattern</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPCell">
            <summary>
                A cell in a PdfPTable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._cellEvent">
            <summary>
                Holds value of property cellEvent.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._colspan">
            <summary>
                Holds value of property colspan.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._fixedHeight">
            <summary>
                Holds value of property fixedHeight.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._image">
            <summary>
                Holds value of property image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._minimumHeight">
            <summary>
                Holds value of property minimumHeight.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._noWrap">
            <summary>
                Holds value of property noWrap.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._paddingBottom">
            <summary>
                Holds value of property paddingBottom.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._paddingLeft">
            <summary>
                Holds value of property paddingLeft.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._paddingRight">
            <summary>
                Holds value of property paddingLeft.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._paddingTop">
            <summary>
                Holds value of property paddingTop.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._rotation">
            <summary>
                The rotation of the cell. Possible values are
                0, 90, 180 and 270.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._rowspan">
            <summary>
                Holds value of property rowspan.
                @since    2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._table">
            <summary>
                Holds value of property table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._useBorderPadding">
            <summary>
                Increases padding to include border if true
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._useDescender">
            <summary>
                Holds value of property useDescender.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell._verticalAlignment">
            <summary>
                Holds value of property verticalAlignment.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.phrase">
            <summary>
                The text in the cell.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor">
            <summary>
                Constructs an empty  PdfPCell .
                The default padding is 2.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Phrase)">
            <summary>
                Constructs a  PdfPCell  with a  Phrase .
                The default padding is 2.
            </summary>
            <param name="phrase">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Image)">
            <summary>
                Constructs a  PdfPCell  with an  Image .
                The default padding is 0.
            </summary>
            <param name="image">the  Image </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Image,System.Boolean)">
            <summary>
                Constructs a  PdfPCell  with an  Image .
                The default padding is 0.25 for a border width of 0.5.
            </summary>
            <param name="image">the  Image </param>
            <param name="fit"> true  to fit the image to the cell</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Constructs a  PdfPCell  with a  PdfPtable .
                This constructor allows nested tables.
                The default padding is 0.
            </summary>
            <param name="table">The  PdfPTable </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPTable,iTextSharp.text.pdf.PdfPCell)">
            <summary>
                Constructs a  PdfPCell  with a  PdfPtable .
                This constructor allows nested tables.
                @since 2.1.0
            </summary>
            <param name="table">The  PdfPTable </param>
            <param name="style">The style to apply to the cell (you could use getDefaultCell())</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPCell)">
            <summary>
                Constructs a deep copy of a  PdfPCell .
            </summary>
            <param name="cell">the  PdfPCell  to duplicate</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.ArabicOptions">
            <summary>
                Gets the arabic shaping options.
            </summary>
            <returns>the arabic shaping options</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.CellEvent">
            <summary>
                Gets the cell event for this cell.
            </summary>
            <returns>the cell event</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Colspan">
            <summary>
                Getter for property colspan.
            </summary>
            <returns>Value of property colspan.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Column">
            <summary>
                Gets the ColumnText with the content of the cell.
            </summary>
            <returns>a columntext object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.CompositeElements">
            <summary>
                Returns the list of composite elements of the column.
                @since    2.1.1
            </summary>
            <returns>a List object.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingBottom">
            <summary>
                /** Gets the effective bottom padding.  This will include
                the bottom border width if {@link #UseBorderPadding} is true.
            </summary>
            <returns>effective value of property paddingBottom.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingLeft">
            <summary>
                Gets the effective left padding.  This will include
                the left border width if {@link #UseBorderPadding} is true.
            </summary>
            <returns>effective value of property paddingLeft.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingRight">
            <summary>
                Gets the effective right padding.  This will include
                the right border width if {@link #UseBorderPadding} is true.
            </summary>
            <returns>effective value of property paddingRight.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingTop">
            <summary>
                Gets the effective top padding.  This will include
                the top border width if {@link #isUseBorderPadding()} is true.
            </summary>
            <returns>effective value of property paddingTop.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.ExtraParagraphSpace">
            <summary>
                Gets the extra space between paragraphs.
            </summary>
            <returns>the extra space between paragraphs</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.FixedHeight">
            <summary>
                Getter for property fixedHeight.
            </summary>
            <returns>Value of property fixedHeight.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.FollowingIndent">
            <summary>
                Gets the following paragraph lines indent.
            </summary>
            <returns>the indent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.HorizontalAlignment">
            <summary>
                Gets the horizontal alignment for the cell.
            </summary>
            <returns>the horizontal alignment for the cell</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Image">
            <summary>
                Getter for property image.
            </summary>
            <returns>Value of property image.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Indent">
            <summary>
                Gets the first paragraph line indent.
            </summary>
            <returns>the indent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Leading">
            <summary>
                Gets the fixed leading
            </summary>
            <returns>the leading</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.MinimumHeight">
            <summary>
                Getter for property minimumHeight.
            </summary>
            <returns>Value of property minimumHeight.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.MultipliedLeading">
            <summary>
                Gets the variable leading
            </summary>
            <returns>the leading</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.NoWrap">
            <summary>
                Setter for property noWrap.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Padding">
            <summary>
                Sets the padding of the contents in the cell (space between content and border).
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingBottom">
            <summary>
                Getter for property paddingBottom.
            </summary>
            <returns>Value of property paddingBottom.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingLeft">
            <summary>
            </summary>
            <returns>Value of property paddingLeft.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingRight">
            <summary>
                Getter for property paddingRight.
            </summary>
            <returns>Value of property paddingRight.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingTop">
            <summary>
                Getter for property paddingTop.
            </summary>
            <returns>Value of property paddingTop.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Phrase">
            <summary>
                Gets the  Phrase  from this cell.
            </summary>
            <returns>the  Phrase </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.RightIndent">
            <summary>
                Gets the right paragraph lines indent.
            </summary>
            <returns>the indent</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Rotation">
            <summary>
                Sets the rotation of the cell. Possible values are
                0, 90, 180 and 270.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Rowspan">
            <summary>
                Getter for property rowspan.
            </summary>
            <returns>Value of property rowspan.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.RunDirection">
            <summary>
                Gets the run direction of the text content in the cell
            </summary>
            <returns>
                One of the following values: PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI,
                PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
            </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.SpaceCharRatio">
            <summary>
                Gets the space/character extra spacing ratio for
                fully justified text.
            </summary>
            <returns>the space/character extra spacing ratio</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Table">
            <summary>
                Getter for property table.
            </summary>
            <returns>Value of property table.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseAscender">
            <summary>
                Gets state of first line height based on max ascender
            </summary>
            <returns>true if an ascender is to be used.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseBorderPadding">
            <summary>
                Adjusts effective padding to include border widths.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseDescender">
            <summary>
                Getter for property useDescender.
            </summary>
            <returns>Value of property useDescender.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.VerticalAlignment">
            <summary>
                Gets the vertical alignment for the cell.
            </summary>
            <returns>the vertical alignment for the cell</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.AddElement(iTextSharp.text.IElement)">
            <summary>
                Adds an iText element to the cell.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.GetMaxHeight">
            <summary>
                Returns the height of the cell.
                @since   3.0.0
            </summary>
            <returns>the height of the cell</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.HasFixedHeight">
            <summary>
                Tells you whether the cell has a fixed height.
                @since 2.1.5
            </summary>
            <returns>true is a fixed height was set.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.HasMinimumHeight">
            <summary>
                Tells you whether the cell has a minimum height.
                @since 2.1.5
            </summary>
            <returns>true if a minimum height was set.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.SetLeading(System.Single,System.Single)">
            <summary>
                Sets the leading fixed and variable. The resultant leading will be
                fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
                size of the bigest font in the line.
            </summary>
            <param name="fixedLeading">the fixed leading</param>
            <param name="multipliedLeading">the variable leading</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.ConsumeHeight(System.Single)">
            <summary>
                Consumes part of the content of the cell.
                @since   2.1.6
            </summary>
            <param name="height">the hight of the part that has to be consumed</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPkcs7">
            <summary>
                This class does all the processing related to signing and verifying a PKCS#7
                signature.
                It's based in code found at org.bouncycastle.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.#ctor(System.Byte[],System.Byte[])">
            <summary>
                Verifies a signature using the sub-filter adbe.x509.rsa_sha1.
            </summary>
            <param name="contentsKey">the /Contents key</param>
            <param name="certsKey">the /Cert key</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.#ctor(System.Byte[])">
            <summary>
                Verifies a signature using the sub-filter adbe.pkcs7.detached or
                adbe.pkcs7.sha1.
                @throws SecurityException on error
                @throws CRLException on error
                @throws InvalidKeyException on error
                @throws CertificateException on error
                @throws NoSuchProviderException on error
                @throws NoSuchAlgorithmException on error
            </summary>
            <param name="contentsKey">the /Contents key</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.X509.X509Certificate[],System.Object[],System.String,System.Boolean)">
            <summary>
                Generates a signature.
                @throws SecurityException on error
                @throws InvalidKeyException on error
                @throws NoSuchProviderException on error
                @throws NoSuchAlgorithmException on error
            </summary>
            <param name="privKey">the private key</param>
            <param name="certChain">the certificate chain</param>
            <param name="crlList">the certificate revocation list</param>
            <param name="hashAlgorithm">the hash algorithm</param>
            <param name="hasRsAdata"> true  if the sub-filter is adbe.pkcs7.sha1</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.Certificates">
            <summary>
                Get all the X.509 certificates associated with this PKCS#7 object in no particular order.
                Other certificates, from OCSP for example, will also be included.
            </summary>
            <returns>the X.509 certificates associated with this PKCS#7 object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.CrLs">
            <summary>
                Get the X.509 certificate revocation lists associated with this PKCS#7 object
            </summary>
            <returns>the X.509 certificate revocation lists associated with this PKCS#7 object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.Location">
            <summary>
                Holds value of property location.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.Ocsp">
            <summary>
                Gets the OCSP basic response if there is one.
                @since    2.1.6
            </summary>
            <returns>the OCSP basic response or null</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.Reason">
            <summary>
                Holds value of property reason.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.SignCertificateChain">
            <summary>
                Get the X.509 sign certificate chain associated with this PKCS#7 object.
                Only the certificates used for the main signature will be returned, with
                the signing certificate first.
                @since    2.1.6
            </summary>
            <returns>the X.509 certificates associated with this PKCS#7 object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.SignDate">
            <summary>
                Holds value of property signDate.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.SigningCertificate">
            <summary>
                Get the X.509 certificate actually used to sign the digest.
            </summary>
            <returns>the X.509 certificate actually used to sign the digest</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.SigningInfoVersion">
            <summary>
                Get the version of the PKCS#7 "SignerInfo" object. Always 1
            </summary>
            <returns>the version of the PKCS#7 "SignerInfo" object. Always 1</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.SignName">
            <summary>
                Holds value of property signName.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.TimeStampDate">
            <summary>
                Gets the timestamp date
                @since    2.1.6
            </summary>
            <returns>a date</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.TimeStampToken">
            <summary>
                Gets the timestamp token if there is one.
                @since    2.1.6
            </summary>
            <returns>the timestamp token or null</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPkcs7.Version">
            <summary>
                Get the version of the PKCS#7 object. Always 1
            </summary>
            <returns>the version of the PKCS#7 object. Always 1</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetAlgorithm(System.String)">
            <summary>
                Gets the algorithm name for a certain id.
                @since    2.1.6
            </summary>
            <param name="oid">an id (for instance "1.2.840.113549.1.1.1")</param>
            <returns>an algorithm name (for instance "RSA")</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetDigest(System.String)">
            <summary>
                Gets the digest name for a certain id
                @since    2.1.6
            </summary>
            <param name="oid">an id (for instance "1.2.840.113549.2.5")</param>
            <returns>a digest name (for instance "MD5")</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetIssuerFields(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
                Get the issuer fields from an X509 Certificate
            </summary>
            <param name="cert">an X509Certificate</param>
            <returns>an X509Name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetOcspurl(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
                Retrieves the OCSP URL from the given certificate.
                @throws CertificateParsingException on error
                @since    2.1.6
            </summary>
            <param name="certificate">the certificate</param>
            <returns>the URL or null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetSubjectFields(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
                Get the subject fields from an X509 Certificate
            </summary>
            <param name="cert">an X509Certificate</param>
            <returns>an X509Name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.VerifyCertificate(Org.BouncyCastle.X509.X509Certificate,System.Object[],System.DateTime)">
            <summary>
                Verifies a single certificate.
                if no error
            </summary>
            <param name="cert">the certificate to verify</param>
            <param name="crls">the certificate revocation list or  null </param>
            <param name="calendar">the date or  null  for the current date</param>
            <returns>a  String  with the error description or  null </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.VerifyCertificates(Org.BouncyCastle.X509.X509Certificate[],System.Collections.Generic.IList{Org.BouncyCastle.X509.X509Certificate},System.Object[],System.DateTime)">
            <summary>
                Verifies a certificate chain against a KeyStore.
                Object[]{cert,error}  where  cert  is the
                failed certificate and  error  is the error message
            </summary>
            <param name="certs">the certificate chain</param>
            <param name="keystore">the  KeyStore </param>
            <param name="crls">the certificate revocation list or  null </param>
            <param name="calendar">the date or  null  for the current date</param>
            <returns> null  if the certificate chain could be validade or a</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.VerifyOcspCertificates(Org.BouncyCastle.Ocsp.BasicOcspResp,System.Collections.Generic.IList{Org.BouncyCastle.X509.X509Certificate})">
            <summary>
                Loads the default root certificates at &lt;java.home&gt;/lib/security/cacerts
                with the default provider.
            </summary>
            <returns>a  KeyStore </returns>
            <summary>
                public static KeyStore LoadCacertsKeyStore() {
            </summary>
            <summary>
                return LoadCacertsKeyStore(null);
            </summary>
            <summary>
                }
            </summary>
            <summary>
                Verifies an OCSP response against a KeyStore.
                @since    2.1.6
            </summary>
            <param name="ocsp">the OCSP response</param>
            <param name="keystore">the  KeyStore </param>
            <returns> true  is a certificate was found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.VerifyTimestampCertificates(Org.BouncyCastle.Tsp.TimeStampToken,System.Collections.Generic.IList{Org.BouncyCastle.X509.X509Certificate})">
            <summary>
                Verifies a timestamp against a KeyStore.
                @since    2.1.6
            </summary>
            <param name="ts">the timestamp</param>
            <param name="keystore">the  KeyStore </param>
            <returns> true  is a certificate was found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetAuthenticatedAttributeBytes(System.Byte[],System.DateTime,System.Byte[])">
            <summary>
                When using authenticatedAttributes the authentication process is different.
                The document digest is generated and put inside the attribute. The signing is done over the DER encoded
                authenticatedAttributes. This method provides that encoding and the parameters must be
                exactly the same as in {@link #getEncodedPKCS7(byte[],Calendar)}.
                A simple example:
                Calendar cal = Calendar.GetInstance();
                PdfPKCS7 pk7 = new PdfPKCS7(key, chain, null, "SHA1", null, false);
                MessageDigest messageDigest = MessageDigest.GetInstance("SHA1");
                byte buf[] = new byte[8192];
                int n;
                Stream inp = sap.GetRangeStream();
                while ((n = inp.Read(buf)) &gt; 0) {
                messageDigest.Update(buf, 0, n);
                }
                byte hash[] = messageDigest.Digest();
                byte sh[] = pk7.GetAuthenticatedAttributeBytes(hash, cal);
                pk7.Update(sh, 0, sh.length);
                byte sg[] = pk7.GetEncodedPKCS7(hash, cal);
            </summary>
            <param name="secondDigest">the content digest</param>
            <param name="signingTime">the signing time</param>
            <param name="ocsp"></param>
            <returns>the byte array representation of the authenticatedAttributes ready to be signed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetDigestAlgorithm">
            <summary>
                Get the algorithm used to calculate the message digest
            </summary>
            <returns>the algorithm used to calculate the message digest</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetEncodedPkcs1">
            <summary>
                Gets the bytes for the PKCS#1 object.
            </summary>
            <returns>a byte array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetEncodedPkcs7">
            <summary>
                Gets the bytes for the PKCS7SignedData object.
            </summary>
            <returns>the bytes for the PKCS7SignedData object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetEncodedPkcs7(System.Byte[],System.DateTime)">
            <summary>
                Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes
                in the signerInfo can also be set. If either of the parameters is  null , none will be used.
            </summary>
            <param name="secondDigest">the digest in the authenticatedAttributes</param>
            <param name="signingTime">the signing time in the authenticatedAttributes</param>
            <returns>the bytes for the PKCS7SignedData object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetEncodedPkcs7(System.Byte[],System.DateTime,iTextSharp.text.pdf.ITsaClient,System.Byte[])">
            <summary>
                Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes
                in the signerInfo can also be set, OR a time-stamp-authority client
                may be provided.
                @since   2.1.6
            </summary>
            <param name="secondDigest">the digest in the authenticatedAttributes</param>
            <param name="signingTime">the signing time in the authenticatedAttributes</param>
            <param name="tsaClient">TSAClient - null or an optional time stamp authority client</param>
            <param name="ocsp"></param>
            <returns>byte[] the bytes for the PKCS7SignedData object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.GetHashAlgorithm">
            <summary>
                Returns the algorithm.
            </summary>
            <returns>the digest algorithm</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.IsRevocationValid">
            <summary>
                Checks if OCSP revocation refers to the document signing certificate.
                @since    2.1.6
            </summary>
            <returns>true if it checks false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            <summary>
                Sets the digest/signature to an external calculated value.
                is also  null . If the  digest  is not  null
                then it may be "RSA" or "DSA"
            </summary>
            <param name="digest">the digest. This is the actual signature</param>
            <param name="rsAdata">the extra data that goes into the data tag in PKCS#7</param>
            <param name="digestEncryptionAlgorithm">the encryption algorithm. It may must be  null  if the  digest </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Update the digest with the specified bytes. This method is used both for signing and verifying
                @throws SignatureException on error
            </summary>
            <param name="buf">the data buffer</param>
            <param name="off">the offset in the data buffer</param>
            <param name="len">the data length</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.Verify">
            <summary>
                Verify the digest.
                @throws SignatureException on error
            </summary>
            <returns> true  if the signature checks out,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.VerifyTimestampImprint">
            <summary>
                Checks if the timestamp refers to this document.
                @throws java.security.NoSuchAlgorithmException on error
                @since    2.1.6
            </summary>
            <returns>true if it checks false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.getIssuer(System.Byte[])">
            <summary>
                Get the "issuer" from the TBSCertificate bytes that are passed in
            </summary>
            <param name="enc">a TBSCertificate in a byte array</param>
            <returns>a DERObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.getSubject(System.Byte[])">
            <summary>
                Get the "subject" from the TBSCertificate bytes that are passed in
            </summary>
            <param name="enc">A TBSCertificate in a byte array</param>
            <returns>a DERObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.buildUnauthenticatedAttributes(System.Byte[])">
            <summary>
                Added by Aiken Sam, 2006-11-15, modifed by Martin Brunecky 07/12/2007
                to start with the timeStampToken (signedData 1.2.840.113549.1.7.2).
                Token is the TSA response without response status, which is usually
                handled by the (vendor supplied) TSA request/response interface).
                @throws IOException
            </summary>
            <param name="timeStampToken">byte[] - time stamp token, DER encoded signedData</param>
            <returns>ASN1EncodableVector</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPkcs7.X509Name">
            <summary>
                a class that holds an X509 name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.C">
            <summary>
                country code - StringType(SIZE(2))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Cn">
            <summary>
                common name - StringType(SIZE(1..64))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Dc">
            <summary>
                object identifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.DefaultSymbols">
            <summary>
                A Hashtable with default symbols
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.E">
            <summary>
                email address in Verisign certificates
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.EmailAddress">
            <summary>
                Email address (RSA PKCS#9 extension) - IA5String.
                Note: if you're trying to be ultra orthodox, don't use this! It shouldn't be in here.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Generation">
            <summary>
                Naming attribute of type X520name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Givenname">
            <summary>
                Naming attribute of type X520name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Initials">
            <summary>
                Naming attribute of type X520name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.L">
            <summary>
                locality name - StringType(SIZE(1..64))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.O">
            <summary>
                organization - StringType(SIZE(1..64))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Ou">
            <summary>
                organizational unit name - StringType(SIZE(1..64))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Sn">
            <summary>
                device serial number name - StringType(SIZE(1..64))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.St">
            <summary>
                state, or province name - StringType(SIZE(1..64))
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Surname">
            <summary>
                Naming attribute of type X520name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.T">
            <summary>
                Title
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Uid">
            <summary>
                LDAP User id.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.UniqueIdentifier">
            <summary>
                Naming attribute of type X520name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPkcs7.X509Name.Values">
            <summary>
                A Hashtable with values
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.X509Name.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
            <summary>
                Constructs an X509 name
            </summary>
            <param name="seq">an Asn1 Sequence</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.X509Name.#ctor(System.String)">
            <summary>
                Constructs an X509 name
            </summary>
            <param name="dirName">a directory name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.X509Name.GetFieldArray(System.String)">
            <summary>
                gets a field array from the values Hashmap
            </summary>
            <param name="name"></param>
            <returns>an ArrayList</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.X509Name.GetFields">
            <summary>
                getter for values
            </summary>
            <returns>a Hashtable with the fields of the X509 name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPkcs7.X509Name.ToString">
            <summary>
                @see java.lang.Object#toString()
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPkcs7.X509NameTokenizer">
            <summary>
                class for breaking up an X500 Name into it's component tokens, ala
                java.util.StringTokenizer. We need this class as some of the
                lightweight Java environment don't support classes like
                StringTokenizer.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPRow">
            <summary>
                A row in a PdfPTable.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.BOTTOM_LIMIT">
            <summary>
                the bottom limit (bottom right y)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.RIGHT_LIMIT">
            <summary>
                the right limit
                @since    2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.ExtraHeights">
            <summary>
                extra heights that needs to be added to a cell because of rowspans.
                @since    2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.#ctor(iTextSharp.text.pdf.PdfPCell[])">
            <summary>
                Constructs a new PdfPRow with the cells in the array that was passed
                as a parameter.
            </summary>
            <param name="cells"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.#ctor(iTextSharp.text.pdf.PdfPRow)">
            <summary>
                Makes a copy of an existing row.
            </summary>
            <param name="row"></param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPRow.MaxHeights">
            <summary>
                Gets the maximum height of the row (i.e. of the 'highest' cell).
            </summary>
            <returns>the maximum height of the row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetColumn(iTextSharp.text.pdf.ColumnText,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @since	3.0.0 protected is now public static
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.CalculateHeights">
            <summary>
                Calculates the heights of each cell in the row.
            </summary>
            <returns>the maximum height of the row.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.GetCells">
            <summary>
                Returns the array of cells in the row.
                Please be extremely careful with this method.
                Use the cells as read only objects.
                @since    2.1.1
            </summary>
            <returns>an array of cells</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.InitExtraHeights">
            <summary>
                Initializes the extra heights array.
                @since    2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.IsCalculated">
            <summary>
                Checks if the dimensions of the columns were calculated.
            </summary>
            <returns>true if the dimensions of the columns were calculated</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetExtraHeight(System.Int32,System.Single)">
            <summary>
                Sets an extra height for a cell.
                @since    2.1.6
            </summary>
            <param name="cell">the index of the cell that needs an extra height</param>
            <param name="height">the extra height</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetWidths(System.Single[])">
            <summary>
                Sets the widths of the columns in the row.
            </summary>
            <param name="widths"></param>
            <returns>true if everything went right</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SplitRow(iTextSharp.text.pdf.PdfPTable,System.Int32,System.Single)">
            <summary>
                Splits a row to newHeight.
                The returned row is the remainder. It will return null if the newHeight
                was so small that only an empty row would result.
                an empty row would result
            </summary>
            <returns>the remainder row or null if the newHeight was so small that only</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.WriteBorderAndBackground(System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfPCell,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                Writes the border and background of one cell in the row.
                @since    2.1.6   extra parameter currentMaxHeight
            </summary>
            <param name="xPos">The x-coordinate where the table starts on the canvas</param>
            <param name="yPos">The y-coordinate where the table starts on the canvas</param>
            <param name="currentMaxHeight">The height of the cell to be drawn.</param>
            <param name="cell"></param>
            <param name="canvases"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.WriteCells(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                Writes a number of cells (not necessarily all cells).
                Remember that the column index starts with 0.
                Remember that the column index starts with 0.
                If -1, all the columns to the end are written.
            </summary>
            <param name="colStart">The first column to be written.</param>
            <param name="colEnd">The last column to be written.</param>
            <param name="xPos">The x-coordinate where the table starts on the canvas</param>
            <param name="yPos">The y-coordinate where the table starts on the canvas</param>
            <param name="canvases"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.RestoreCanvases(iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                @since    2.1.6 private is now protected
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SaveAndRotateCanvases(iTextSharp.text.pdf.PdfContentByte[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                @since    2.1.6 private is now protected
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPsxObject">
            <summary>
                Implements the PostScript XObject.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPsxObject.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Constructs a PSXObject
            </summary>
            <param name="wr"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPsxObject.#ctor">
            <summary>
                Creates a new instance of PdfPSXObject
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPsxObject.Duplicate">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPsxObject.GetFormXObject(System.Int32)">
            <summary>
                Gets the stream representing this object.
                @since   2.1.3   (replacing the method without param compressionLevel)
                @throws IOException
            </summary>
            <param name="compressionLevel">the compressionLevel</param>
            <returns>the stream representing this template</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPTable">
            <summary>
                This is a table that can be put at an absolute position but can also
                be added to the document as the class  Table .
                In the last case when crossing pages the table always break at full rows; if a
                row is bigger than the page it is dropped silently to avoid infinite loops.
                A PdfPTableEvent can be associated to the table to do custom drawing
                when the table is rendered.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.BACKGROUNDCANVAS">
            <summary>
                The index of the duplicate  PdfContentByte  where the background will be drawn.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.BASECANVAS">
            <summary>
                The index of the original  PdfcontentByte .
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.LINECANVAS">
            <summary>
                The index of the duplicate  PdfContentByte  where the border lines will be drawn.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.TEXTCANVAS">
            <summary>
                The index of the duplicate  PdfContentByte  where the text will be drawn.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable._keepTogether">
            <summary>
                Defines if the table should be kept
                on one page if possible
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable._skipLastFooter">
            <summary>
                Holds value of property skipLastFooter.
                @since    2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.Complete">
            <summary>
                Indicates if the PdfPTable is complete once added to the document.
                @since	iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.headerRows">
            <summary>
                Holds value of property headerRows.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.RowCompleted">
            <summary>
                Keeps track of the completeness of the current row.
                @since    2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.spacingAfter">
            <summary>
                The spacing after the table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.spacingBefore">
            <summary>
                The spacing before the table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.widthPercentage">
            <summary>
                Holds value of property widthPercentage.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(System.Single[])">
            <summary>
                Constructs a  PdfPTable  with the relative column widths.
            </summary>
            <param name="relativeWidths">the relative column widths</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(System.Int32)">
            <summary>
                Constructs a  PdfPTable  with  numColumns  columns.
            </summary>
            <param name="numColumns">the number of columns</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Constructs a copy of a  PdfPTable .
            </summary>
            <param name="table">the  PdfPTable  to be copied</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.AbsoluteWidths">
            <summary>
                Gets the absolute sizes of each column width.
            </summary>
            <returns>he absolute sizes of each column width</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.DefaultCell">
            <summary>
                Gets the default  PdfPCell  that will be used as
                reference for all the  addCell  methods except
                addCell(PdfPCell) .
            </summary>
            <returns>default  PdfPCell </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.ExtendLastRow">
            <summary>
                Holds value of property extendLastRow.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.FooterHeight">
            <summary>
                Gets the height of the rows that constitute the header as defined by
                setFooterRows() .
                @since 2.1.1
            </summary>
            <returns>the height of the rows that constitute the footer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.HeaderHeight">
            <summary>
                Gets the height of the rows that constitute the header as defined by
                setHeaderRows() .
            </summary>
            <returns>the height of the rows that constitute the header and footer</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.HeadersInEvent">
            <summary>
                Holds value of property headersInEvent.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.HorizontalAlignment">
            <summary>
                Holds value of property horizontalAlignment.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.KeepTogether">
            <summary>
                If true the table will be kept on one page if it fits, by forcing a
                new page if it doesn't fit on the current page. The default is to
                split the table over multiple pages.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.LockedWidth">
            <summary>
                Holds value of property lockedWidth.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.NumberOfColumns">
            <summary>
                Returns the number of columns.
                @since   2.1.1
            </summary>
            <returns>the number of columns.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.RelativeWidths">
            <summary>
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Rows">
            <summary>
                Gets an arraylist with all the rows in the table.
            </summary>
            <returns>an arraylist</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Size">
            <summary>
                Gets the number of rows in this table.
            </summary>
            <returns>the number of rows in this table</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.SkipFirstHeader">
            <summary>
                Holds value of property skipFirstHeader.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.SkipLastFooter">
            <summary>
                Tells you if the last footer needs to be skipped
                (for instance if the footer says "continued on the next page")
                @since   2.1.6
            </summary>
            <returns>Value of property skipLastFooter.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.SplitLate">
            <summary>
                Holds value of property splitLate.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.SplitRows">
            <summary>
                Holds value of property splitRows.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.TotalHeight">
            <summary>
                Gets the total height of the table.
            </summary>
            <returns>the total height of the table</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.TotalWidth">
            <summary>
                Gets the full width of the table.
            </summary>
            <returns>the full width of the table</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <returns>an  ArrayList </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.ElementComplete">
            <summary>
                @since   iText 2.0.8
                @see com.lowagie.text.LargeElement#isComplete()
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <returns>a type</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.FlushContent">
            <summary>
                @since   iText 2.0.8
                @see com.lowagie.text.LargeElement#flushContent()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                ElementListener .
            </summary>
            <param name="listener">an  ElementListener </param>
            <returns> true  if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.BeginWritingRows(iTextSharp.text.pdf.PdfContentByte)">
            <summary>
                Gets and initializes the 4 layers where the table is written to. The text or graphics are added to
                one of the 4  PdfContentByte  returned with the following order:
                PdfPtable.BASECANVAS  - the original  PdfContentByte . Anything placed here
                will be under the table.
                PdfPtable.BACKGROUNDCANVAS  - the layer where the background goes to.
                PdfPtable.LINECANVAS  - the layer where the lines go to.
                PdfPtable.TEXTCANVAS  - the layer where the text go to. Anything placed here
                will be over the table.
                The layers are placed in sequence on top of each other.
                be written to
                @see #writeSelectedRows(int, int, float, float, PdfContentByte[])
            </summary>
            <param name="canvas">the  PdfContentByte  where the rows will</param>
            <returns>an array of 4  PdfContentByte </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.EndWritingRows(iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                Finishes writing the table.
            </summary>
            <param name="canvases">the array returned by  beginWritingRows() </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.ShallowCopy(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Makes a shallow copy of a table (format without content).
            </summary>
            <param name="table"></param>
            <returns>a shallow copy of the table</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.pdf.PdfPCell)">
            <summary>
                Adds a cell element.
            </summary>
            <param name="cell">the cell element</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(System.String)">
            <summary>
                Adds a cell element.
            </summary>
            <param name="text">the text for the cell</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Adds a nested table.
            </summary>
            <param name="table">the table to be added to the cell</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.Image)">
            <summary>
                Adds an Image as Cell.
            </summary>
            <param name="image">the  Image  to add to the table. This image will fit in the cell</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.Phrase)">
            <summary>
                Adds a cell element.
            </summary>
            <param name="phrase">the  Phrase  to be added to the cell</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CalculateHeights(System.Boolean)">
            <summary>
                Calculates the heights of the table.
                This takes time; normally the heights of the rows are already calcultated,
                so in most cases, it's save to use false as parameter.
                specify the width of the table with SetTotalWidth().
                @since    2.1.5   added a parameter and a return type to an existing method,
                and made it public
            </summary>
            <param name="firsttime">if true, the heights of the rows will be recalculated.</param>
            <returns>the total height of the table. Note that it will be 0 if you didn't</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CalculateHeightsFast">
            <summary>
                Calculates the heights of the table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CompleteRow">
            <summary>
                Completes the current row with the default cell. An incomplete row will be dropped
                but calling this method will make sure that it will be present in the table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteBodyRows">
            <summary>
                Removes all of the rows except headers
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteLastRow">
            <summary>
                Deletes the last row in the table.
            </summary>
            <returns> true  if the last row was deleted</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteRow(System.Int32)">
            <summary>
                Deletes a row from the table.
            </summary>
            <param name="rowNumber">the row to be deleted</param>
            <returns> true  if the row was deleted</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRow(System.Int32)">
            <summary>
                Gets a row with a given index
                (added by Jin-Hsia Yang).
            </summary>
            <param name="idx"></param>
            <returns>the row at position idx</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowHeight(System.Int32)">
            <summary>
                Gets the height of a particular row.
            </summary>
            <param name="idx">the row index (starts at 0)</param>
            <returns>the height of a particular row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowHeight(System.Int32,System.Boolean)">
            <summary>
                Gets the height of a particular row.
                @since    3.0.0
            </summary>
            <param name="idx">the row index (starts at 0)</param>
            <param name="firsttime">is this the first time the row heigh is calculated?</param>
            <returns>the height of a particular row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRows(System.Int32,System.Int32)">
            <summary>
                Gets an arraylist with a selection of rows.
                @since    2.1.6
            </summary>
            <param name="start">the first row in the selection</param>
            <param name="end">the first row that isn't part of the selection</param>
            <returns>a selection of rows</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowspanHeight(System.Int32,System.Int32)">
            <summary>
                Gets the maximum height of a cell in a particular row (will only be different
                from getRowHeight is one of the cells in the row has a rowspan > 1).
                @since    2.1.6
            </summary>
            <param name="rowIndex">the row index</param>
            <param name="cellIndex">the cell index</param>
            <returns>the height of a particular row including rowspan</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetTotalWidth(System.Single[])">
            <summary>
                Sets the full width of the table from the absolute column width.
                @throws DocumentException if the number of widths is different than the number
                of columns
            </summary>
            <param name="columnWidth">the absolute width of each column</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidthPercentage(System.Single[],iTextSharp.text.Rectangle)">
            <summary>
                Sets the percentage width of the table from the absolute column width.
                @throws DocumentException
            </summary>
            <param name="columnWidth">the absolute width of each column</param>
            <param name="pageSize">the page size</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidths(System.Single[])">
            <summary>
                Sets the relative widths of the table.
                @throws DocumentException if the number of widths is different than the number
                of columns
            </summary>
            <param name="relativeWidths">the relative widths of the table.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidths(System.Int32[])">
            <summary>
                Sets the relative widths of the table.
                @throws DocumentException if the number of widths is different than the number
                of columns
            </summary>
            <param name="relativeWidths">the relative widths of the table.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                Writes the selected rows to the document.
                canvases  is obtained from  beginWritingRows() .
                rows to the end are written
                beginWrittingRows()
                @see #beginWritingRows(com.lowagie.text.pdf.PdfContentByte)
            </summary>
            <param name="rowStart">the first row to be written, zero index</param>
            <param name="rowEnd">the last row to be written + 1. If it is -1 all the</param>
            <param name="xPos">the x write coodinate</param>
            <param name="yPos">the y write coodinate</param>
            <param name="canvases">an array of 4  PdfContentByte  obtained from</param>
            <returns>the y coordinate position of the bottom of the last row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                Writes the selected rows and columns to the document.
                This method does not clip the columns; this is only important
                if there are columns with colspan at boundaries.
                canvases  is obtained from  beginWritingRows() .
                The table event is only fired for complete rows.
                columns to the end are written
                rows to the end are written
                beginWrittingRows()
                @see #beginWritingRows(com.lowagie.text.pdf.PdfContentByte)
            </summary>
            <param name="colStart">the first column to be written, zero index</param>
            <param name="colEnd">the last column to be written + 1. If it is -1 all the</param>
            <param name="rowStart">the first row to be written, zero index</param>
            <param name="rowEnd">the last row to be written + 1. If it is -1 all the</param>
            <param name="xPos">the x write coodinate</param>
            <param name="yPos">the y write coodinate</param>
            <param name="canvases">an array of 4  PdfContentByte  obtained from</param>
            <returns>the y coordinate position of the bottom of the last row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte)">
            <summary>
                Writes the selected rows to the document.
                rows to the end are written
                be written to
            </summary>
            <param name="rowStart">the first row to be written, zero index</param>
            <param name="rowEnd">the last row to be written + 1. If it is -1 all the</param>
            <param name="xPos">the x write coodinate</param>
            <param name="yPos">the y write coodinate</param>
            <param name="canvas">the  PdfContentByte  where the rows will</param>
            <returns>the y coordinate position of the bottom of the last row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte)">
            <summary>
                Writes the selected rows to the document.
                This method clips the columns; this is only important
                if there are columns with colspan at boundaries.
                The table event is only fired for complete rows.
                rows to the end are written
                be written to
            </summary>
            <param name="colStart">the first column to be written, zero index</param>
            <param name="colEnd">the last column to be written + 1. If it is -1 all the</param>
            <param name="rowStart">the first row to be written, zero index</param>
            <param name="rowEnd">the last row to be written + 1. If it is -1 all the</param>
            <param name="xPos">the x write coodinate</param>
            <param name="yPos">the y write coodinate</param>
            <param name="canvas">the  PdfContentByte  where the rows will</param>
            <returns>the y coordinate position of the bottom of the last row</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.RowSpanAbove(System.Int32,System.Int32)">
            <summary>
                Checks if there are rows above belonging to a rowspan.
                @since    2.1.6
            </summary>
            <param name="currRow">the current row to check</param>
            <param name="currCol">the current column to check</param>
            <returns>true if there's a cell above that belongs to a rowspan</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CopyFormat(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Copies the format of the sourceTable without copying the content.
            </summary>
            <param name="sourceTable"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AdjustCellsInRow(System.Int32,System.Int32)">
            <summary>
                Calculates the extra height needed in a row because of rowspans.
                @since    2.1.6
            </summary>
            <param name="start">the index of the start row (the one to adjust)</param>
            <param name="end">the index of the end row on the page</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.skipColsWithRowspanAbove">
            <summary>
                When updating the row index, cells with rowspan should be taken into account.
                This is what happens in this method.
                @since    2.1.6
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPublicKeyRecipient">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPublicKeySecurityHandler">
            <summary>
                @author Aiken Sam (aikensam@ieee.org)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfReader">
            <summary>
                Reads a PDF document.
                @author Paulo Soares (psoares@consiste.pt)
                @author Kazuya Ujihara
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfReader.AllowOpenWithFullPermissions">
            <summary>
                Allows reading the pdf file without the owner password.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfReader._appendable">
            <summary>
                Holds value of property appendable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfReader._readDepth">
            <summary>
                Track how deeply nested the current object is, so
            </summary>
            <summary>
                we know when to return an individual null or boolean, or
            </summary>
            <summary>
                reuse one of the static ones.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfReader.Xref">
            <summary>
                Each xref pair is a position
            </summary>
            <summary>
                type 0 -> -1, 0
            </summary>
            <summary>
                type 1 -> offset, 0
            </summary>
            <summary>
                type 2 -> index, obj num
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String)">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="filename">the file name of the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String,System.Byte[])">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="filename">the file name of the document</param>
            <param name="ownerPassword">the password to read the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Byte[])">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="pdfIn">the byte array with the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Byte[],System.Byte[])">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="pdfIn">the byte array with the document</param>
            <param name="ownerPassword">the password to read the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.ICipherParameters)">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="filename">the file name of the document</param>
            <param name="certificate">the certificate to read the document</param>
            <param name="certificateKey">the private key of the certificate</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Uri)">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="url">the Uri of the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Uri,System.Byte[])">
            <summary>
                Reads and parses a PDF document.
                @throws IOException on error
            </summary>
            <param name="url">the Uri of the document</param>
            <param name="ownerPassword">the password to read the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
                Reads and parses a PDF document.
                end but is not closed
                @throws IOException on error
            </summary>
            <param name="isp">the  InputStream  containing the document. The stream is read to the</param>
            <param name="ownerPassword">the password to read the document</param>
            <param name="forceRead">force the read of the entire stream, even it's a FileStream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
                Reads and parses a PDF document.
                end but is not closed
                @throws IOException on error
            </summary>
            <param name="isp">the  InputStream  containing the document. The stream is read to the</param>
            <param name="forceRead">force the read of the entire stream, even it's a FileStream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Byte[])">
            <summary>
                Reads and parses a pdf document. Contrary to the other constructors only the xref is read
                into memory. The reader is said to be working in "partial" mode as only parts of the pdf
                are read as needed. The pdf is left open but may be closed at any time with
                PdfReader.Close() , reopen is automatic.
                @throws IOException on error
            </summary>
            <param name="raf">the document location</param>
            <param name="ownerPassword">the password or  null  for no password</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Creates an independent duplicate.
            </summary>
            <param name="reader">the  PdfReader  to duplicate</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.AcroFields">
            <summary>
                Gets a read-only version of  AcroFields .
            </summary>
            <returns>a read-only version of  AcroFields </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.AcroForm">
            <summary>
                Returns the document's acroform, if it has one.
            </summary>
            <returns>the document's acroform</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Catalog">
            <summary>
                Returns the document's catalog. This dictionary is not a copy,
                any changes will be reflected in the catalog.
            </summary>
            <returns>the document's catalog</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.EofPos">
            <summary>
                Gets the byte address of the %%EOF marker.
            </summary>
            <returns>the byte address of the %%EOF marker</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.FileLength">
            <summary>
                Getter for property fileLength.
            </summary>
            <returns>Value of property fileLength.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Info">
            <summary>
                Returns the content of the document information dictionary as a  Hashtable
                of  String .
            </summary>
            <returns>content of the document information dictionary</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.IsOpenedWithFullPermissions">
            <summary>
                Checks if the document was opened with the owner password so that the end application
                can decide what level of access restrictions to apply. If the document is not encrypted
                it will return  true .
                false  if the document was opened with the user password
            </summary>
            <returns> true  if the document was opened with the owner password or if it's not encrypted,</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.JavaScript">
            <summary>
                Gets the global document JavaScript.
                @throws IOException on error
            </summary>
            <returns>the global document JavaScript</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.LastXref">
            <summary>
                Gets the byte address of the last xref table.
            </summary>
            <returns>the byte address of the last xref table</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.XrefByteOffset">
            <summary>
                Gets the byte address of the all xref tables.
            </summary>
            <returns>the byte address of all the xref tables</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Metadata">
            <summary>
                Gets the XML metadata.
                @throws IOException on error
            </summary>
            <returns>the XML metadata</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.NumberOfPages">
            <summary>
                Gets the number of pages in the document.
            </summary>
            <returns>the number of pages in the document</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.PdfVersion">
            <summary>
                Gets the PDF version. Only the last version char is returned. For example
                version 1.4 is returned as '4'.
            </summary>
            <returns>the PDF version</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Permissions">
            <summary>
                Gets the encryption permissions. It can be used directly in
                PdfWriter.SetEncryption() .
            </summary>
            <returns>the encryption permissions</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.SafeFile">
            <summary>
                Gets a new file instance of the original PDF
                document.
            </summary>
            <returns>a new file instance of the original PDF document</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.SimpleViewerPreferences">
            <summary>
                Returns a bitset representing the PageMode and PageLayout viewer preferences.
                Doesn't return any information about the ViewerPreferences dictionary.
            </summary>
            <returns>an int that contains the Viewer Preferences.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Tampered">
            <summary>
                Sets the tampered state. A tampered PdfReader cannot be reused in PdfStamper.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Trailer">
            <summary>
                Gets the trailer dictionary
            </summary>
            <returns>the trailer dictionary</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.XrefSize">
            <summary>
                Gets the number of xref objects.
            </summary>
            <returns>the number of xref objects</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.ViewerPreferences">
            <summary>
                Sets the viewer preferences as the sum of several constants.
                @see PdfViewerPreferences#setViewerPreferences
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Adds a viewer preference
                @see PdfViewerPreferences#addViewerPreference
            </summary>
            <param name="key">a key for a viewer preference</param>
            <param name="value">a value for the viewer preference</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Ascii85Decode(System.Byte[])">
            <summary>
                Decodes a stream that has the ASCII85Decode filter.
            </summary>
            <param name="inp">the input data</param>
            <returns>the decoded data</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.AsciiHexDecode(System.Byte[])">
            <summary>
                Decodes a stream that has the ASCIIHexDecode filter.
            </summary>
            <param name="inp">the input data</param>
            <returns>the decoded data</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.DecodePredictor(System.Byte[],iTextSharp.text.pdf.PdfObject)">
            <summary>
            </summary>
            <param name="inp"></param>
            <param name="dicPar"></param>
            <returns>a byte array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.FlateDecode(System.Byte[])">
            <summary>
                Decodes a stream that has the FlateDecode filter.
            </summary>
            <param name="inp">the input data</param>
            <returns>the decoded data</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.FlateDecode(System.Byte[],System.Boolean)">
            <summary>
                A helper to FlateDecode.
                to try to read a corrupted stream
            </summary>
            <param name="inp">the input data</param>
            <param name="strict"> true  to read a correct stream.  false </param>
            <returns>the decoded data</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNormalizedRectangle(iTextSharp.text.pdf.PdfArray)">
            <summary>
                Normalizes a  Rectangle  so that llx and lly are smaller than urx and ury.
            </summary>
            <param name="box">the original rectangle</param>
            <returns>a normalized  Rectangle </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Reads a  PdfObject  resolving an indirect reference
                if needed.
            </summary>
            <param name="obj">the  PdfObject  to read</param>
            <returns>the resolved  PdfObject </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfObject)">
            <summary>
            </summary>
            <param name="obj"></param>
            <param name="parent"></param>
            <returns>a PdfObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(iTextSharp.text.pdf.PdfObject)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>a PdfObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Reads a  PdfObject  resolving an indirect reference
                if needed. If the reader was opened in partial mode the object will be released
                to save memory.
            </summary>
            <param name="obj">the  PdfObject  to read</param>
            <param name="parent"></param>
            <returns>a PdfObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytes(iTextSharp.text.pdf.PrStream,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Get the content from a stream applying the required filters.
                @throws IOException on error
            </summary>
            <param name="stream">the stream</param>
            <param name="file">the location where the stream is</param>
            <returns>the stream content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytes(iTextSharp.text.pdf.PrStream)">
            <summary>
                Get the content from a stream applying the required filters.
                @throws IOException on error
            </summary>
            <param name="stream">the stream</param>
            <returns>the stream content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(iTextSharp.text.pdf.PrStream,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Get the content from a stream as it is without applying any filter.
                @throws IOException on error
            </summary>
            <param name="stream">the stream</param>
            <param name="file">the location where the stream is</param>
            <returns>the stream content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(iTextSharp.text.pdf.PrStream)">
            <summary>
                Get the content from a stream as it is without applying any filter.
                @throws IOException on error
            </summary>
            <param name="stream">the stream</param>
            <returns>the stream content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.KillIndirect(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Eliminates the reference to the object freeing the memory used by it and clearing
                the xref entry.
            </summary>
            <param name="obj">the object. If it's an indirect reference it will be eliminated</param>
            <returns>the object or the already erased dereferenced object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.LzwDecode(System.Byte[])">
            <summary>
                Decodes a stream that has the LZWDecode filter.
            </summary>
            <param name="inp">the input data</param>
            <returns>the decoded data</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleaseLastXrefPartial(iTextSharp.text.pdf.PdfObject)">
            <summary>
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.AddPdfObject(iTextSharp.text.pdf.PdfObject)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns>an indirect reference</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Close">
            <summary>
                Closes the reader
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ConsolidateNamedDestinations">
            <summary>
                Replaces all the local named links with the actual destinations.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.CreateFakeFontSubsets">
            <summary>
                Finds all the fonts not subset but embedded and marks them as subset.
            </summary>
            <returns>the number of fonts altered</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.DumpPerc">
            <summary>
            </summary>
            <returns>the percentage of the cross reference table that has been read</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.EliminateSharedStreams">
            <summary>
                Eliminates shared streams if they exist.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetBoxSize(System.Int32,System.String)">
            <summary>
                Gets the box size. Allowed names are: "crop", "trim", "art", "bleed" and "media".
            </summary>
            <param name="index">the page number. The first page is 1</param>
            <param name="boxName">the box name</param>
            <returns>the box rectangle or null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetCertificationLevel">
            <summary>
                Gets the certification level for this document. The return values can be  PdfSignatureAppearance.NOT_CERTIFIED ,
                PdfSignatureAppearance.CERTIFIED_NO_CHANGES_ALLOWED ,
                PdfSignatureAppearance.CERTIFIED_FORM_FILLING  and
                PdfSignatureAppearance.CERTIFIED_FORM_FILLING_AND_ANNOTATIONS .
                No signature validation is made, use the methods availabe for that in  AcroFields .
            </summary>
            <returns>gets the certification level for this document</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetCropBox(System.Int32)">
            <summary>
                Gets the crop box without taking rotation into account. This
                is the value of the /CropBox key. The crop box is the part
                of the document to be displayed or printed. It usually is the same
                as the media box but may be smaller. If the page doesn't have a crop
                box the page size will be returned.
            </summary>
            <param name="index">the page number. The first page is 1</param>
            <returns>the crop box</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetJavaScript(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Gets the global document JavaScript.
                @throws IOException on error
            </summary>
            <param name="file">the document file</param>
            <returns>the global document JavaScript</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestination">
            <summary>
                Gets all the named destinations as an  Hashtable . The key is the name
                and the value is the destinations array.
            </summary>
            <returns>gets all the named destinations</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestination(System.Boolean)">
            <summary>
                Gets all the named destinations as an  HashMap . The key is the name
                and the value is the destinations array.
                @since   2.1.6
            </summary>
            <param name="keepNames">true if you want the keys to be real PdfNames instead of Strings</param>
            <returns>gets all the named destinations</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromNames">
            <summary>
                Gets the named destinations from the /Dests key in the catalog as an  Hashtable . The key is the name
                and the value is the destinations array.
            </summary>
            <returns>gets the named destinations</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromNames(System.Boolean)">
            <summary>
                Gets the named destinations from the /Dests key in the catalog as an  HashMap . The key is the name
                and the value is the destinations array.
                @since   2.1.6
            </summary>
            <param name="keepNames">true if you want the keys to be real PdfNames instead of Strings</param>
            <returns>gets the named destinations</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromStrings">
            <summary>
                Gets the named destinations from the /Names key in the catalog as an  Hashtable . The key is the name
                and the value is the destinations array.
            </summary>
            <returns>gets the named destinations</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageContent(System.Int32,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Gets the contents of the page.
                @throws IOException on error
            </summary>
            <param name="pageNum">the page number. 1 is the first</param>
            <param name="file">the location of the PDF document</param>
            <returns>the content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageContent(System.Int32)">
            <summary>
                Gets the contents of the page.
                @throws IOException on error
            </summary>
            <param name="pageNum">the page number. 1 is the first</param>
            <returns>the content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageN(System.Int32)">
            <summary>
                Gets the dictionary that represents a page.
            </summary>
            <param name="pageNum">the page number. 1 is the first</param>
            <returns>the page dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageNRelease(System.Int32)">
            <summary>
            </summary>
            <param name="pageNum"></param>
            <returns>a Dictionary object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageOrigRef(System.Int32)">
            <summary>
                Gets the page reference to this page.
            </summary>
            <param name="pageNum">the page number. 1 is the first</param>
            <returns>the page reference</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageRotation(System.Int32)">
            <summary>
                Gets the page rotation. This value can be 0, 90, 180 or 270.
            </summary>
            <param name="index">the page number. The first page is 1</param>
            <returns>the page rotation</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSize(System.Int32)">
            <summary>
                Gets the page size without taking rotation into account. This
                is the value of the /MediaBox key.
            </summary>
            <param name="index">the page number. The first page is 1</param>
            <returns>the page size</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSize(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Gets the page from a page dictionary
            </summary>
            <param name="page">the page dictionary</param>
            <returns>the page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSizeWithRotation(System.Int32)">
            <summary>
                Gets the page size, taking rotation into account. This
                is a  Rectangle  with the value of the /MediaBox and the /Rotate key.
            </summary>
            <param name="index">the page number. The first page is 1</param>
            <returns>a  Rectangle </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSizeWithRotation(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Gets the rotated page from a page dictionary.
            </summary>
            <param name="page">the page dictionary</param>
            <returns>the rotated page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(System.Int32)">
            <summary>
            </summary>
            <param name="idx"></param>
            <returns>aPdfObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(System.Int32)">
            <summary>
            </summary>
            <param name="idx"></param>
            <returns>a PdfObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Is128Key">
            <summary>
                Returns  true  if the PDF has a 128 bit key encryption.
            </summary>
            <returns> true  if the PDF has a 128 bit key encryption</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsEncrypted">
            <summary>
                Returns  true  if the PDF is encrypted.
            </summary>
            <returns> true  if the PDF is encrypted</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsHybridXref">
            <summary>
                Getter for property hybridXref.
            </summary>
            <returns>Value of property hybridXref.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsNewXrefType">
            <summary>
                Getter for property newXrefType.
            </summary>
            <returns>Value of property newXrefType.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsRebuilt">
            <summary>
                Checks if the document had errors and was rebuilt.
            </summary>
            <returns>true if rebuilt.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleaseLastXrefPartial">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleasePage(System.Int32)">
            <summary>
            </summary>
            <param name="pageNum"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveAnnotations">
            <summary>
                Removes all the annotations and fields from the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveFields">
            <summary>
                Removes all the fields from the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveUnusedObjects">
            <summary>
                Removes all the unreachable objects.
            </summary>
            <returns>the number of indirect objects removed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveUsageRights">
            <summary>
                Removes any usage rights that this PDF may have. Only Adobe can grant usage rights
                and any PDF modification with iText will invalidate them. Invalidated usage rights may
                confuse Acrobat and it's advisabe to remove them altogether.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ResetLastXrefPartial">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ResetReleasePage">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SelectPages(System.String)">
            <summary>
                Selects the pages to keep in the document. The pages are described as
                ranges. The page ordering can be changed but
                no page repetitions are allowed. Note that it may be very slow in partial mode.
            </summary>
            <param name="ranges">the comma separated ranges as described in {@link SequenceList}</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SelectPages(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Selects the pages to keep in the document. The pages are described as a
                List  of  Integer . The page ordering can be changed but
                no page repetitions are allowed. Note that it may be very slow in partial mode.
            </summary>
            <param name="pagesToKeep">the pages to keep in the document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SetPageContent(System.Int32,System.Byte[])">
            <summary>
                Sets the contents of the page.
                @throws IOException on error
            </summary>
            <param name="content">the new page content</param>
            <param name="pageNum">the page number. 1 is the first</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SetPageContent(System.Int32,System.Byte[],System.Int32)">
            <summary>
                Sets the contents of the page.
                @since   2.1.3   (the method already existed without param compressionLevel)
            </summary>
            <param name="content">the new page content</param>
            <param name="pageNum">the page number. 1 is the first</param>
            <param name="compressionLevel"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ShuffleSubsetNames">
            <summary>
                Finds all the font subsets and changes the prefixes to some
                random values.
            </summary>
            <returns>the number of font subsets altered</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.readDecryptedDocObj">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SignaturesCoverWholeDocument">
            <summary>
                Return all Signature Names from signatures that cover the whole document.
                Empty in case no signature covers the whole document.
            </summary>
            <returns> An ArrayList filled with the Signature Names from signatures that covers the whole document.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageN(System.Int32)">
            <summary>
                Gets the dictionary that represents a page.
            </summary>
            <param name="pageNum">the page number. 1 is the first</param>
            <returns>the page dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageNRelease(System.Int32)">
            <summary>
            </summary>
            <param name="pageNum"></param>
            <returns>a dictionary object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageOrigRef(System.Int32)">
            <summary>
                Gets the page reference to this page.
            </summary>
            <param name="pageNum">the page number. 1 is the first</param>
            <returns>the page reference</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageOrigRefRelease(System.Int32)">
            <summary>
            </summary>
            <param name="pageNum"></param>
            <returns>an indirect reference</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.ReleasePage(System.Int32)">
            <summary>
            </summary>
            <param name="pageNum"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.ResetReleasePage">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfReaderInstance">
            <summary>
                Instance of PdfReader in each output document.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReaderInstance.GetFormXObject(System.Int32,System.Int32)">
            <summary>
                Gets the content stream of a page as a PdfStream object.
                @since   2.1.3 (the method already existed without param compressionLevel)
            </summary>
            <param name="pageNumber">the page of which you want the stream</param>
            <param name="compressionLevel">the compression level you want to apply to the stream</param>
            <returns>a PdfStream object</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfRectangle">
            <summary>
                PdfRectangle  is the PDF Rectangle object.
                Rectangles are used to describe locations on the page and bounding boxes for several
                objects in PDF, such as fonts. A rectangle is represented as an  array  of
                four numbers, specifying the lower lef <I>x</I>, lower left <I>y</I>, upper right <I>x</I>,
                and upper right <I>y</I> coordinates of the rectangle, in that order.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 7.1 (page 183).
                @see     iTextSharp.text.Rectangle
                @see     PdfArray
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle._lly">
            <summary>
                lower left y
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfRectangle -object.
                @since       rugPdf0.10
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
            <param name="rotation"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
                Constructs a  PdfRectangle -object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
            <param name="rotation"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(iTextSharp.text.Rectangle,System.Int32)">
            <summary>
                Constructs a  PdfRectangle -object with a  Rectangle -object.
            </summary>
            <param name="rectangle">a  Rectangle </param>
            <param name="rotation"></param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Bottom">
            <summary>
                methods
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Left">
            <summary>
                membervariables
            </summary>
            <summary>
                lower left x
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Rectangle">
            <summary>
                Returns the high level version of this PdfRectangle
            </summary>
            <returns>this PdfRectangle translated to class Rectangle</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Right">
            <summary>
                upper right x
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Top">
            <summary>
                upper right y
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.Add(System.Single[])">
            <summary>
                Block changes to the underlying PdfArray
                @since 2.1.5
            </summary>
            <param name="values">stuff we'll ignore. Ha!</param>
            <returns>false. You can't add anything to a PdfRectangle</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.Add(System.Int32[])">
            <summary>
                Block changes to the underlying PdfArray
                @since 2.1.5
            </summary>
            <param name="values">stuff we'll ignore. Ha!</param>
            <returns>false. You can't add anything to a PdfRectangle</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.AddFirst(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Block changes to the underlying PdfArray
                @since 2.1.5
            </summary>
            <param name="obj">Ignored.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetBottom(System.Int32)">
            <summary>
                Returns the lower left x-coordinate.
            </summary>
            <returns>the lower left x-coordinaat</returns>
            <summary>
                Returns the upper right x-coordinate.
            </summary>
            <returns>the upper right x-coordinate</returns>
            <summary>
                Returns the upper right y-coordinate.
            </summary>
            <returns>the upper right y-coordinate</returns>
            <summary>
                Returns the lower left y-coordinate.
            </summary>
            <returns>the lower left y-coordinate</returns>
            <summary>
                Returns the lower left x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetRight(System.Int32)">
            <summary>
                Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetTop(System.Int32)">
            <summary>
                Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfRendition">
            <summary>
                A Rendition dictionary (pdf spec 1.5)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRendition.#ctor(System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String)">
            <summary>
            </summary>
            <param name="file"></param>
            <param name="fs"></param>
            <param name="mimeType"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfResources">
            <summary>
                PdfResources  is the PDF Resources-object.
                The marking operations for drawing a page are stored in a stream that is the value of the
                <B>Contents</B> key in the Page object's dictionary. Each marking context includes a list
                of the named resources it uses. This resource list is stored as a dictionary that is the
                value of the context's <B>Resources</B> key, and it serves two functions: it enumerates
                the named resources in the contents stream, and it established the mapping from the names
                to the objects used by the marking operations.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 7.5 (page 195-197).
                @see     PdfResource
                @see     PdfProcSet
                @see     PdfFontDictionary
                @see     PdfPage
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfResources.Add(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                methods
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfShading">
            <summary>
                Implements the shading dictionary (or stream).
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfShading.antiAlias">
            <summary>
                Holds value of property antiAlias.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfShading.bBox">
            <summary>
                Holds value of property bBox.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfShading.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates new PdfShading
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfShadingPattern">
            <summary>
                Implements the shading pattern dictionary.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfShadingPattern.#ctor(iTextSharp.text.pdf.PdfShading)">
            <summary>
                Creates new PdfShadingPattern
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPkcs">
            <summary>
                A signature dictionary representation for the standard filters.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPkcs.HashAlgorithm">
            <summary>
                The hash algorith, for example "SHA1"
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPkcs.name">
            <summary>
                The subject name in the signing certificate (the element "CN")
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPkcs.Pkcs">
            <summary>
                The class instance that calculates the PKCS#1 and PKCS#7
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPkcs.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            <summary>
                Creates a generic standard filter.
            </summary>
            <param name="filter">the filter name</param>
            <param name="subFilter">the sub-filter name</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPkcs.Name">
            <summary>
                Gets the subject name in the signing certificate (the element "CN")
            </summary>
            <returns>the subject name in the signing certificate (the element "CN")</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPkcs.Signer">
            <summary>
                Gets the class instance that does the actual signing.
            </summary>
            <returns>the class instance that does the actual signing</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPkcs.SignerContents">
            <summary>
                Gets the signature content. This can be a PKCS#1 or a PKCS#7. It corresponds to
                the /Contents key.
            </summary>
            <returns>the signature content</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPkcs.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            <summary>
                Sets the digest/signature to an external calculated value.
                is also  null . If the  digest  is not  null
                then it may be "RSA" or "DSA"
            </summary>
            <param name="digest">the digest. This is the actual signature</param>
            <param name="rsAdata">the extra data that goes into the data tag in PKCS#7</param>
            <param name="digestEncryptionAlgorithm">the encryption algorithm. It may must be  null  if the  digest </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPkcs.SetSignInfo(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.X509.X509Certificate[],System.Object[])">
            <summary>
                Sets the crypto information to sign.
            </summary>
            <param name="privKey">the private key</param>
            <param name="certChain">the certificate chain</param>
            <param name="crlList">the certificate revocation list. It can be  null </param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPkcs.PpkLite">
            <summary>
                Creates a standard filter of the type self signed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPkcs.PpkLite.#ctor">
            <summary>
                The constructor for the default provider.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPkcs.Ppkms">
            <summary>
                Creates a standard filter of the type Windows Certificate.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPkcs.Ppkms.#ctor">
            <summary>
                The constructor for the default provider.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPkcs.VeriSign">
            <summary>
                Creates a standard filter of the type VeriSign.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPkcs.VeriSign.#ctor">
            <summary>
                The constructor for the default provider.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignature">
            <summary>
                Implements the signature dictionary.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignature.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            <summary>
                Creates new PdfSignature
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance">
            <summary>
                This class takes care of the cryptographic options and appearances that form a signature.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.SignatureRender">
            <summary>
                Enumeration representing the different rendering options of a signature
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.questionMark">
            <summary>
                Commands to draw a yellow question mark in a stream content
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.SelfSigned">
            <summary>
                The self signed filter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.VerisignSigned">
            <summary>
                The VeriSign filter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.WincerSigned">
            <summary>
                The Windows Certificate Security.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._acro6Layers">
            <summary>
                Holds value of property acro6Layers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._contact">
            <summary>
                Holds value of property contact.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._image">
            <summary>
                Holds value of property image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._imageScale">
            <summary>
                Holds value of property imageScale.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._layer2Font">
            <summary>
                Holds value of property layer2Font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._layer4Text">
            <summary>
                Holds value of property layer4Text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._runDirection">
            <summary>
                Holds value of property runDirection.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance._signatureEvent">
            <summary>
                Holds value of property signatureEvent.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Acro6Layers">
            <summary>
                Acrobat 6.0 and higher recomends that only layer n2 and n4 be present. This method sets that mode.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CertChain">
            <summary>
                Gets the certificate chain.
            </summary>
            <returns>the certificate chain</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CertificationLevel">
            <summary>
                Sets the document type to certified instead of simply signed.
                CERTIFIED_FORM_FILLING  and  CERTIFIED_FORM_FILLING_AND_ANNOTATIONS
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Contact">
            <summary>
                Sets the signing contact.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CrlList">
            <summary>
                Gets the certificate revocation list.
            </summary>
            <returns>the certificate revocation list</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CryptoDictionary">
            <summary>
                Gets the user made signature dictionary. This is the dictionary at the /V key.
            </summary>
            <returns>the user made signature dictionary</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.FieldName">
            <summary>
                Gets the field name.
            </summary>
            <returns>the field name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Filter">
            <summary>
                Gets the filter used to sign the document.
            </summary>
            <returns>the filter used to sign the document</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Image">
            <summary>
                Sets the background image for the layer 2.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.ImageScale">
            <summary>
                Sets the scaling to be applied to the background image. If it's zero the image
                will fully fill the rectangle. If it's less than zero the image will fill the rectangle but
                will keep the proportions. If it's greater than zero that scaling will be applied.
                In any of the cases the image will always be centered. It's zero by default.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer2Font">
            <summary>
                Sets the n2 and n4 layer font. If the font size is zero, auto-fit will be used.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer2Text">
            <summary>
                Sets the signature text identifying the signer.
                a standard description will be used
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer4Text">
            <summary>
                Sets the text identifying the signature status.
                the description "Signature Not Verified" will be used
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Location">
            <summary>
                Sets the signing location.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Page">
            <summary>
                Gets the page number of the field.
            </summary>
            <returns>the page number of the field</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.PageRect">
            <summary>
                Gets the rectangle that represent the position and dimension of the signature in the page.
            </summary>
            <returns>the rectangle that represent the position and dimension of the signature in the page</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.PrivKey">
            <summary>
                Gets the private key.
            </summary>
            <returns>the private key</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.RangeStream">
            <summary>
                Gets the document bytes that are hashable when using external signatures. The general sequence is:
                PreClose(), GetRangeStream() and Close().
            </summary>
            <returns>the document bytes that are hashable</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Reason">
            <summary>
                Sets the signing reason.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Rect">
            <summary>
                Gets the rectangle representing the signature dimensions.
                or have zero width or height for invisible signatures
            </summary>
            <returns>the rectangle representing the signature dimensions. It may be  null </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Render">
            <summary>
                Gets the rendering mode for this signature .
            </summary>
            <returns>the rectangle rendering mode for this signature.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.RunDirection">
            <summary>
                Sets the run direction in the n2 and n4 layer.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignatureEvent">
            <summary>
                Sets the signature event to allow modification of the signature dictionary.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignatureGraphic">
            <summary>
                Sets the Image object to render when Render is set to SignatureRender.GraphicAndDescription
                to SignatureRender.Description
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignDate">
            <summary>
                Gets the signature date.
            </summary>
            <returns>the signature date</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SigStandard">
            <summary>
                Gets the instance of the standard signature dictionary. This instance
                is only available after pre close.
                The main use is to insert external signatures.
            </summary>
            <returns>the instance of the standard signature dictionary</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Stamper">
            <summary>
                Gets the  PdfStamper  associated with this instance.
            </summary>
            <returns>the  PdfStamper  associated with this instance</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.TempFile">
            <summary>
                Gets the temporary file.
            </summary>
            <returns>the temporary file or  null  is the document is created in memory</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FitText(iTextSharp.text.Font,System.String,iTextSharp.text.Rectangle,System.Single,System.Int32)">
            <summary>
                Fits the text to some rectangle adjusting the font size as needed.
            </summary>
            <param name="font">the font to use</param>
            <param name="text">the text</param>
            <param name="rect">the rectangle where the text must fit</param>
            <param name="maxFontSize">the maximum font size</param>
            <param name="runDirection">the run direction</param>
            <returns>the calculated font size that makes the text fit</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.Close(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                This is the last method to be called when using external signatures. The general sequence is:
                PreClose(), GetDocumentBytes() and Close().
                update  is a  PdfDictionary  that must have exactly the
                same keys as the ones provided in {@link #preClose(Hashtable)}.
                in {@link #preClose(Hashtable)}
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="update">a  PdfDictionary  with the key/value that will fill the holes defined</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetAppearance">
            <summary>
                Gets the main appearance layer.
                Consult <A HREF="http://partners.adobe.com/asn/developer/pdfs/tn/PPKAppearances.pdf">PPKAppearances.pdf</A>
                for further details.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <returns>the main appearance layer</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetImage">
            <summary>
                Gets the background image for the layer 2.
            </summary>
            <returns>the background image for the layer 2</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetLayer(System.Int32)">
            <summary>
                Gets a template layer to create a signature appearance. The layers can go from 0 to 4.
                Consult <A HREF="http://partners.adobe.com/asn/developer/pdfs/tn/PPKAppearances.pdf">PPKAppearances.pdf</A>
                for further details.
            </summary>
            <param name="layer">the layer</param>
            <returns>a template</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetNewSigName">
            <summary>
                Gets a new signature fied name that doesn't clash with any existing name.
            </summary>
            <returns>a new signature fied name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetTopLayer">
            <summary>
                Gets the template that aggregates all appearance layers. This corresponds to the /FRM resource.
                Consult <A HREF="http://partners.adobe.com/asn/developer/pdfs/tn/PPKAppearances.pdf">PPKAppearances.pdf</A>
                for further details.
            </summary>
            <returns>the template that aggregates all appearance layers</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsInvisible">
            <summary>
                Gets the visibility status of the signature.
            </summary>
            <returns>the visibility status of the signature</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsNewField">
            <summary>
                Checks if a new field was created.
                an existing field or if the signature is invisible
            </summary>
            <returns> true  if a new field was created,  false  if signing</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsPreClosed">
            <summary>
                Checks if the document is in the process of closing.
                false  otherwise
            </summary>
            <returns> true  if the document is in the process of closing,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.PreClose">
            <summary>
                This is the first method to be called when using external signatures. The general sequence is:
                PreClose(), GetDocumentBytes() and Close().
                If calling PreClose() <B>dont't</B> call PdfStamper.Close().
                No external signatures are allowed if this methos is called.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.PreClose(System.util.INullValueDictionary{iTextSharp.text.pdf.PdfName,System.Int32})">
            <summary>
                This is the first method to be called when using external signatures. The general sequence is:
                PreClose(), GetDocumentBytes() and Close().
                If calling PreClose() <B>dont't</B> call PdfStamper.Close().
                If using an external signature  exclusionSizes  must contain at least
                the  PdfName.CONTENTS  key with the size that it will take in the
                document. Note that due to the hex string coding this size should be
                byte_size*2+2.
                calculation. The key is a  PdfName  and the value an
                Integer . At least the  PdfName.CONTENTS  must be present
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <param name="exclusionSizes">a  Hashtable  with names and sizes to be excluded in the signature</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetCrypto(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.X509.X509Certificate[],System.Object[],iTextSharp.text.pdf.PdfName)">
            <summary>
                Sets the cryptographic parameters.
            </summary>
            <param name="privKey">the private key</param>
            <param name="certChain">the certificate chain</param>
            <param name="crlList">the certificate revocation list. It may be  null </param>
            <param name="filter">the crytographic filter type. It can be SELF_SIGNED, VERISIGN_SIGNED or WINCER_SIGNED</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            <summary>
                Sets the digest/signature to an external calculated value.
                is also  null . If the  digest  is not  null
                then it may be "RSA" or "DSA"
            </summary>
            <param name="digest">the digest. This is the actual signature</param>
            <param name="rsAdata">the extra data that goes into the data tag in PKCS#7</param>
            <param name="digestEncryptionAlgorithm">the encryption algorithm. It may must be  null  if the  digest </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetVisibleSignature(iTextSharp.text.Rectangle,System.Int32,System.String)">
            <summary>
                Sets the signature to be visible. It creates a new visible signature field.
            </summary>
            <param name="pageRect">the position and dimension of the field in the page</param>
            <param name="page">the page to place the field. The fist page is 1</param>
            <param name="fieldName">the field name or  null  to generate automatically a new field name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetVisibleSignature(System.String)">
            <summary>
                Sets the signature to be visible. An empty signature field with the same name must already exist.
            </summary>
            <param name="fieldName">the existing empty signature field name</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.ISignatureEvent">
            <summary>
                An interface to retrieve the signature dictionary for modification.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.ISignatureEvent.GetSignatureDictionary(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Allows modification of the signature dictionary.
            </summary>
            <param name="sig">the signature dictionary</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                @see java.io.Stream#read(byte[], int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream.ReadByte">
            <summary>
                @see java.io.Stream#read()
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSmartCopy">
            <summary>
                PdfSmartCopy has the same functionality as PdfCopy,
                but when resources (such as fonts, images,...) are
                encountered, a reference to these resources is saved
                in a cache, so that they can be reused.
                This requires more memory, but reduces the file size
                of the resulting PDF document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSmartCopy._streamMap">
            <summary>
                the cache with the streams and references.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSmartCopy.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                Creates a PdfSmartCopy instance.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSmartCopy.CopyIndirect(iTextSharp.text.pdf.PrIndirectReference)">
            <summary>
                Translate a PRIndirectReference to a PdfIndirectReference
                In addition, translates the object numbers, and copies the
                referenced object to the output file if it wasn't available
                in the cache yet. If it's in the cache, the reference to
                the already used stream is returned.
                NB: PRIndirectReferences (and PRIndirectObjects) really need to know what
                file they came from, because each file has its own namespace. The translation
                we do from their namespace to ours is *at best* heuristic, and guaranteed to
                fail under some circumstances.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSpotColor">
            <summary>
                A  PdfSpotColor  defines a ColorSpace
                @see     PdfDictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSpotColor.Altcs">
            <summary>
                The alternative color space
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSpotColor.Name">
            <summary>
                The color name
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSpotColor.tint">
            <summary>
                The tint value
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSpotColor.#ctor(System.String,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new  PdfSpotColor .
            </summary>
            <param name="name">a string value</param>
            <param name="tint">a tint value between 0 and 1</param>
            <param name="altcs">a altnative colorspace value</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfStamper">
            <summary>
                Applies extra content to the pages of a PDF document.
                This extra content can be all the objects allowed in PdfContentByte
                including pages from other Pdfs. The original PDF will keep
                all the interactive elements including bookmarks, links and form fields.
                It is also possible to change the field values and to
                flatten them. New fields can be added but not flattened.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStamper.Stamper">
            <summary>
                The writer
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream)">
            <summary>
                Starts the process of adding extra content to an existing PDF
                document.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the original document. It cannot be reused</param>
            <param name="os">the output stream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char)">
            <summary>
                Starts the process of adding extra content to an existing PDF
                document.
                document
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the original document. It cannot be reused</param>
            <param name="os">the output stream</param>
            <param name="pdfVersion">the new pdf version or '\0' to keep the same version as the original</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.Boolean)">
            <summary>
                Starts the process of adding extra content to an existing PDF
                document, possibly as a new revision.
                document
                only useful for multiple signatures as nothing is gained in speed or memory
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the original document. It cannot be reused</param>
            <param name="os">the output stream</param>
            <param name="pdfVersion">the new pdf version or '\0' to keep the same version as the original</param>
            <param name="append">if  true  appends the document changes as a new revision. This is</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.AcroFields">
            <summary>
                Gets the  AcroFields  object that allows to get and set field values
                and to merge FDF forms.
            </summary>
            <returns>the  AcroFields  object</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FormFlattening">
            <summary>
                Determines if the fields are flattened on close. The fields added with
                {@link #addAnnotation(PdfAnnotation,int)} will never be flattened.
                to keep the fields
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FreeTextFlattening">
            <summary>
                Determines if the FreeText annotations are flattened on close.
                (the default) to keep the FreeText annotations as active content.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FullCompression">
            <summary>
                Gets the 1.5 compression status.
            </summary>
            <returns> true  if the 1.5 compression is on</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.JavaScript">
            <summary>
                Adds a JavaScript action at the document level. When the document
                opens all this JavaScript runs. The existing JavaScript will be replaced.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.MoreInfo">
            <summary>
                Gets the optional  String  map to add or change values in
                the info dictionary.
            </summary>
            <returns>the map or  null </returns>
            <summary>
                An optional  String  map to add or change values in
                the info dictionary. Entries with  null
                values delete the key in the original info dictionary
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Outlines">
            <summary>
                Sets the bookmarks. The list structure is defined in
                {@link SimpleBookmark}.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Reader">
            <summary>
                Gets the underlying PdfReader.
            </summary>
            <returns>the underlying PdfReader</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.RotateContents">
            <summary>
                Checks if the content is automatically adjusted to compensate
                the original page rotation.
            </summary>
            <returns>the auto-rotation status</returns>
            <summary>
                Flags the content to be automatically adjusted to compensate
                the original page rotation. The default is  true .
                otherwise
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.SignatureAppearance">
            <summary>
                Gets the signing instance. The appearances and other parameters can the be set.
            </summary>
            <returns>the signing instance</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Writer">
            <summary>
                Gets the underlying PdfWriter.
            </summary>
            <returns>the underlying PdfWriter</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.XmpMetadata">
            <summary>
                Sets the XMP metadata.
                @see PdfWriter#setXmpMetadata(byte[])
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            <summary>
                Sets the certificate encryption options for this document. An array of one or more public certificates
                must be provided together with an array of the same size for the permissions for each certificate.
                The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the encryption was set too late
            </summary>
            <param name="certs">the public certificates to be used for the encryption</param>
            <param name="permissions">the user permissions for each of the certicates</param>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.ViewerPreferences">
            <summary>
                Sets the viewer preferences.
                @see PdfViewerPreferences#setViewerPreferences(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.String,System.Boolean)">
            <summary>
                Applies a digital signature to a document, possibly as a new revision, making
                possible multiple signatures. The returned PdfStamper
                can be used normally as the signature is only applied when closing.
                A possible use for adding a signature without invalidating an existing one is:
                KeyStore ks = KeyStore.getInstance("pkcs12");
                ks.load(new FileInputStream("my_private_key.pfx"), "my_password".toCharArray());
                String alias = (String)ks.aliases().nextElement();
                PrivateKey key = (PrivateKey)ks.getKey(alias, "my_password".toCharArray());
                Certificate[] chain = ks.getCertificateChain(alias);
                PdfReader reader = new PdfReader("original.pdf");
                FileOutputStream fout = new FileOutputStream("signed.pdf");
                PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0', new
                File("/temp"), true);
                PdfSignatureAppearance sap = stp.getSignatureAppearance();
                sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
                sap.setReason("I'm the author");
                sap.setLocation("Lisbon");
                // comment next line to have an invisible signature
                sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
                stp.close();
                document
                If it's a file it will be used directly. The file will be deleted on exit unless  os  is null.
                In that case the document can be retrieved directly from the temporary file. If it's  null
                no temporary file will be created and memory will be used
                new revision thus not invalidating existing signatures
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the original document</param>
            <param name="os">the output stream or  null  to keep the document in the temporary file</param>
            <param name="pdfVersion">the new pdf version or '\0' to keep the same version as the original</param>
            <param name="tempFile">location of the temporary file. If it's a directory a temporary file will be created there.</param>
            <param name="append">if  true  the signature and all the other content will be added as a</param>
            <returns>a  PdfStamper </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char)">
            <summary>
                Applies a digital signature to a document. The returned PdfStamper
                can be used normally as the signature is only applied when closing.
                Note that the pdf is created in memory.
                A possible use is:
                KeyStore ks = KeyStore.getInstance("pkcs12");
                ks.load(new FileInputStream("my_private_key.pfx"), "my_password".toCharArray());
                String alias = (String)ks.aliases().nextElement();
                PrivateKey key = (PrivateKey)ks.getKey(alias, "my_password".toCharArray());
                Certificate[] chain = ks.getCertificateChain(alias);
                PdfReader reader = new PdfReader("original.pdf");
                FileOutputStream fout = new FileOutputStream("signed.pdf");
                PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0');
                PdfSignatureAppearance sap = stp.getSignatureAppearance();
                sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
                sap.setReason("I'm the author");
                sap.setLocation("Lisbon");
                // comment next line to have an invisible signature
                sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
                stp.close();
                document
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the original document</param>
            <param name="os">the output stream</param>
            <param name="pdfVersion">the new pdf version or '\0' to keep the same version as the original</param>
            <returns>a  PdfStamper </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.String)">
            <summary>
                Applies a digital signature to a document. The returned PdfStamper
                can be used normally as the signature is only applied when closing.
                A possible use is:
                KeyStore ks = KeyStore.getInstance("pkcs12");
                ks.load(new FileInputStream("my_private_key.pfx"), "my_password".toCharArray());
                String alias = (String)ks.aliases().nextElement();
                PrivateKey key = (PrivateKey)ks.getKey(alias, "my_password".toCharArray());
                Certificate[] chain = ks.getCertificateChain(alias);
                PdfReader reader = new PdfReader("original.pdf");
                FileOutputStream fout = new FileOutputStream("signed.pdf");
                PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0', new File("/temp"));
                PdfSignatureAppearance sap = stp.getSignatureAppearance();
                sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
                sap.setReason("I'm the author");
                sap.setLocation("Lisbon");
                // comment next line to have an invisible signature
                sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
                stp.close();
                document
                If it's a file it will be used directly. The file will be deleted on exit unless  os  is null.
                In that case the document can be retrieved directly from the temporary file. If it's  null
                no temporary file will be created and memory will be used
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="reader">the original document</param>
            <param name="os">the output stream or  null  to keep the document in the temporary file</param>
            <param name="pdfVersion">the new pdf version or '\0' to keep the same version as the original</param>
            <param name="tempFile">location of the temporary file. If it's a directory a temporary file will be created there.</param>
            <returns>a  PdfStamper </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation,System.Int32)">
            <summary>
                Adds an annotation of form field in a specific page. This page number
                can be overridden with {@link PdfAnnotation#setPlaceInPage(int)}.
            </summary>
            <param name="annot">the annotation</param>
            <param name="page">the page</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddComments(iTextSharp.text.pdf.FdfReader)">
            <summary>
                Adds the comments present in an FDF file.
                @throws IOException on error
            </summary>
            <param name="fdf">the FDF file</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddFileAttachment(System.String,System.Byte[],System.String,System.String)">
            <summary>
                Adds a file attachment at the document level. Existing attachments will be kept.
                the file will be read from the disk
                fileStore  is not  null
                @throws IOException on error
            </summary>
            <param name="description">the file description</param>
            <param name="fileStore">an array with the file. If it's  null </param>
            <param name="file">the path to the file. It will only be used if</param>
            <param name="fileDisplay">the actual file name stored in the pdf</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddFileAttachment(System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            <summary>
                Adds a file attachment at the document level. Existing attachments will be kept.
            </summary>
            <param name="description">the file description</param>
            <param name="fs">the file specification</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddSignature(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Adds an empty signature.
                @since    2.1.4
            </summary>
            <param name="name">the name of the signature</param>
            <param name="page">the page number</param>
            <param name="llx">lower left x coordinate of the signature's position</param>
            <param name="lly">lower left y coordinate of the signature's position</param>
            <param name="urx">upper right x coordinate of the signature's position</param>
            <param name="ury">upper right y coordinate of the signature's position</param>
            <returns>a signature form field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.Close">
            <summary>
                Closes the document. No more content can be written after the
                document is closed.
                If closing a signed document with an external signature the closing must be done
                in the  PdfSignatureAppearance  instance.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            <summary>
                Gets a page from other PDF document. Note that calling this method more than
                once with the same parameters will retrieve the same object.
            </summary>
            <param name="reader">the PDF document where the page is</param>
            <param name="pageNumber">the page number. The first page is 1</param>
            <returns>the template representing the imported page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetOverContent(System.Int32)">
            <summary>
                Gets a  PdfContentByte  to write over the page of
                the original document.
                the original document
            </summary>
            <param name="pageNum">the page number where the extra content is written</param>
            <returns>a  PdfContentByte  to write over the page of</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetPdfLayers">
            <summary>
                Gets the PdfLayer objects in an existing document as a Map
                with the names/titles of the layers as keys.
                @since    2.1.2
            </summary>
            <returns>a Map with all the PdfLayers in the document (and the name/title of the layer as key)</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetUnderContent(System.Int32)">
            <summary>
                Gets a  PdfContentByte  to write under the page of
                the original document.
                the original document
            </summary>
            <param name="pageNum">the page number where the extra content is written</param>
            <returns>a  PdfContentByte  to write under the page of</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.InsertPage(System.Int32,iTextSharp.text.Rectangle)">
            <summary>
                Inserts a blank page. All the pages above and including  pageNumber  will
                be shifted up. If  pageNumber  is bigger than the total number of pages
                the new page will be the last one.
            </summary>
            <param name="pageNumber">the page number position where the new page will be inserted</param>
            <param name="mediabox">the size of the new page</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.MakePackage(iTextSharp.text.pdf.PdfName)">
            <summary>
                This is the most simple way to change a PDF into a
                portable collection. Choose one of the following names:
                PdfName.D (detailed view)
                PdfName.T (tiled view)
                PdfName.H (hidden)
                Pass this name as a parameter and your PDF will be
                a portable collection with all the embedded and
                attached files as entries.
            </summary>
            <param name="initialView">can be PdfName.D, PdfName.T or PdfName.H</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.MakePackage(iTextSharp.text.pdf.collection.PdfCollection)">
            <summary>
                Adds or replaces the Collection Dictionary in the Catalog.
            </summary>
            <param name="collection">the new collection dictionary.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.PartialFormFlattening(System.String)">
            <summary>
                Adds  name  to the list of fields that will be flattened on close,
                all the other fields will remain. If this method is never called or is called
                with invalid field names, all the fields will be flattened.
                Calling  setFormFlattening(true)  is needed to have any kind of
                flattening.
            </summary>
            <param name="name">the field name</param>
            <returns> true  if the field exists,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.ReplacePage(iTextSharp.text.pdf.PdfReader,System.Int32,System.Int32)">
            <summary>
                Replaces a page from this document with a page from other document. Only the content
                is replaced not the fields and annotations. This method must be called before
                getOverContent() or getUndercontent() are called for the same page.
            </summary>
            <param name="r">the  PdfReader  from where the new page will be imported</param>
            <param name="pageImported">the page number of the imported page</param>
            <param name="pageReplaced">the page to replace in this document</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetDuration(System.Int32,System.Int32)">
            <summary>
                Sets the display duration for the page (for presentations)
            </summary>
            <param name="seconds">the number of seconds to display the page. A negative value removes the entry</param>
            <param name="page">the page where the duration will be applied. The first page is 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if anything was already written to the output
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="strength128Bits"> true  for 128 bit key length,  false  for 40 bit key length</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if anything was already written to the output
            </summary>
            <param name="strength"> true  for 128 bit key length,  false  for 40 bit key length</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Int32,System.String,System.String,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetFullCompression">
            <summary>
                Sets the document's compression to the new 1.5 mode with object streams and xref
                streams. It can be set at any time but once set it can't be unset.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction,System.Int32)">
            <summary>
                Sets the open and close page additional action.
                or  PdfWriter.PAGE_CLOSE
                @throws PdfException if the action type is invalid
            </summary>
            <param name="actionType">the action type. It can be  PdfWriter.PAGE_OPEN </param>
            <param name="action">the action to perform</param>
            <param name="page">the page where the action will be applied. The first page is 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetThumbnail(iTextSharp.text.Image,System.Int32)">
            <summary>
                Sets the thumbnail image for a page.
                @throws PdfException on error
                @throws DocumentException on error
            </summary>
            <param name="image">the image</param>
            <param name="page">the page</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetTransition(iTextSharp.text.pdf.PdfTransition,System.Int32)">
            <summary>
                Sets the transition for the page
            </summary>
            <param name="transition">the transition object. A  null  removes the transition</param>
            <param name="page">the page where the transition will be applied. The first page is 1</param>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStamperImp.PagesToContent">
            <summary>
                Integer(page number) -> PageStamp
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.Boolean)">
            <summary>
                Creates new PdfStamperImp.
                document
                @throws DocumentException on error
                @throws IOException
            </summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="pdfVersion">the new pdf version or '\0' to keep the same version as the original</param>
            <param name="append"></param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Duration">
            <summary>
                Always throws an  UnsupportedOperationException .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.SigFlags">
            <summary>
                Set the signature flags.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Thumbnail">
            <summary>
                @see com.lowagie.text.pdf.PdfWriter#setThumbnail(com.lowagie.text.Image)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Transition">
            <summary>
                Always throws an  UnsupportedOperationException .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.ViewerPreferences">
            <summary>
                Sets the viewer preferences.
                @see PdfWriter#setViewerPreferences(int)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.RotateContents">
            <summary>
                Holds value of property rotateContents.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            <summary>
                @see com.lowagie.text.pdf.PdfWriter#addAnnotation(com.lowagie.text.pdf.PdfAnnotation)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddComments(iTextSharp.text.pdf.FdfReader)">
            <summary>
                @throws IOException
            </summary>
            <param name="fdf"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Adds a viewer preference
                @see PdfViewerPreferences#addViewerPreference
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.GetPageReference(System.Int32)">
            <summary>
                @see com.lowagie.text.pdf.PdfWriter#getPageReference(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.GetPdfLayers">
            <summary>
                Gets the PdfLayer objects in an existing document as a Map
                with the names/titles of the layers as keys.
                @since    2.1.2
            </summary>
            <returns>a Map with all the PdfLayers in the document (and the name/title of the layer as key)</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.RegisterReader(iTextSharp.text.pdf.PdfReader,System.Boolean)">
            <summary>
                @throws IOException
            </summary>
            <param name="reader"></param>
            <param name="openFile"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Additional-actions defining the actions to be taken in
                response to various trigger events affecting the document
                as a whole. The actions types allowed are:  DOCUMENT_CLOSE ,
                WILL_SAVE ,  DID_SAVE ,  WILL_PRINT
                and  DID_PRINT .
                @throws PdfException on invalid action type
            </summary>
            <param name="actionType">the action type</param>
            <param name="action">the action to execute in response to the trigger</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            <summary>
                @see com.lowagie.text.pdf.PdfWriter#setOpenAction(com.lowagie.text.pdf.PdfAction)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetOpenAction(System.String)">
            <summary>
                @see com.lowagie.text.pdf.PdfWriter#setOpenAction(java.lang.String)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Always throws an  UnsupportedOperationException .
                @throws PdfException ignore
                @see PdfStamper#setPageAction(PdfName, PdfAction, int)
            </summary>
            <param name="actionType">ignore</param>
            <param name="action">ignore</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.UnRegisterReader(iTextSharp.text.pdf.PdfReader)">
            <summary>
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.IsAppend">
            <summary>
                Getter for property append.
            </summary>
            <returns>Value of property append.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.MakePackage(iTextSharp.text.pdf.collection.PdfCollection)">
            <summary>
                Adds or replaces the Collection Dictionary in the Catalog.
            </summary>
            <param name="collection">the new collection dictionary.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetDuration(System.Int32,System.Int32)">
            <summary>
                Sets the display duration for the page (for presentations)
            </summary>
            <param name="seconds">the number of seconds to display the page. A negative value removes the entry</param>
            <param name="page">the page where the duration will be applied. The first page is 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction,System.Int32)">
            <summary>
                Sets the open and close page additional action.
                or  PdfWriter.PAGE_CLOSE
                @throws PdfException if the action type is invalid
            </summary>
            <param name="actionType">the action type. It can be  PdfWriter.PAGE_OPEN </param>
            <param name="action">the action to perform</param>
            <param name="page">the page where the action will be applied. The first page is 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetTransition(iTextSharp.text.pdf.PdfTransition,System.Int32)">
            <summary>
                Sets the transition for the page
            </summary>
            <param name="transition">the transition object. A  null  removes the transition</param>
            <param name="page">the page where the transition will be applied. The first page is 1</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.ReadOcProperties">
            <summary>
                Reads the OCProperties dictionary from the catalog of the existing document
                and fills the documentOCG, documentOCGorder and OCGRadioGroup variables in PdfWriter.
                Note that the original OCProperties of the existing document can contain more information.
                @since    2.1.2
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.addOrder(iTextSharp.text.pdf.PdfLayer,iTextSharp.text.pdf.PdfArray,System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.PdfLayer})">
            <summary>
                Recursive method to reconstruct the documentOCGorder variable in the writer.
                @since    2.1.2
            </summary>
            <param name="parent">a parent PdfLayer (can be null)</param>
            <param name="arr">an array possibly containing children for the parent PdfLayer</param>
            <param name="ocgmap">a Hashtable with indirect reference Strings as keys and PdfLayer objects as values.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfStream">
            <summary>
                PdfStream  is the Pdf stream object.
                A stream, like a string, is a sequence of characters. However, an application can
                read a small portion of a stream at a time, while a string must be read in its entirety.
                For this reason, objects with potentially large amounts of data, such as images and
                page descriptions, are represented as streams.
                A stream consists of a dictionary that describes a sequence of characters, followed by
                the keyword <B>stream</B>, followed by zero or more lines of characters, followed by
                the keyword <B>endstream</B>.
                All streams must be  PdfIndirectObject s. The stream dictionary must be a direct
                object. The keyword <B>stream</B> that follows the stream dictionary should be followed by
                a carriage return and linefeed or just a linefeed.
                Remark: In this version only the FLATEDECODE-filter is supported.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.8 (page 41-53).
                @see        PdfObject
                @see        PdfDictionary
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.BEST_COMPRESSION">
            <summary>
                membervariables
            </summary>
            <summary>
                A possible compression level.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.BEST_SPEED">
            <summary>
                A possible compression level.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.DEFAULT_COMPRESSION">
            <summary>
                A possible compression level.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.NO_COMPRESSION">
            <summary>
                A possible compression level.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.Compressed">
            <summary>
                is the stream compressed?
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.CompressionLevel">
            <summary>
                The level of compression.
                @since   2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.#cctor">
            <summary>
                constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor(System.Byte[])">
            <summary>
                Constructs a  PdfStream -object.
            </summary>
            <param name="bytes">content of the new  PdfObject  as an array of  byte .</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates an efficient stream. No temporary array is ever created. The  InputStream
                is totally consumed but is not closed. The general usage is:
                InputStream in = ...;
                PdfStream stream = new PdfStream(in, writer);
                stream.FlateCompress();
                writer.AddToBody(stream);
                stream.WriteLength();
                in.Close();
            </summary>
            <param name="inputStream">the data to write to this stream</param>
            <param name="writer">the  PdfWriter  for this stream</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor">
            <summary>
                Constructs a  PdfStream -object.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStream.RawLength">
            <summary>
                methods overriding some methods of PdfObject
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.FlateCompress">
            <summary>
                Compresses the stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.FlateCompress(System.Int32)">
            <summary>
                methods
            </summary>
            <summary>
                Compresses the stream.
                @since   2.1.3
            </summary>
            <param name="compressionLevel">the compression level (0 = best speed, 9 = best compression, -1 is default)</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.ToString">
            <summary>
                @see com.lowagie.text.pdf.PdfObject#toString()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.WriteContent(System.IO.Stream)">
            <summary>
                Writes the data content to an  Stream .
                @throws IOException on error
            </summary>
            <param name="os">the destination to write to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.WriteLength">
            <summary>
                Writes the stream length to the  PdfWriter .
                This method must be called and can only be called if the contructor {@link #PdfStream(InputStream,PdfWriter)}
                is used to create the stream.
                @throws IOException on error
                @see #PdfStream(InputStream,PdfWriter)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfString">
            <summary>
                A  PdfString -class is the PDF-equivalent of a JAVA- string -object.
                A string is a sequence of characters delimited by parenthesis. If a string is too long
                to be conveniently placed on a single line, it may be split across multiple lines by using
                the backslash character (\) at the end of a line to indicate that the string continues
                on the following line. Within a string, the backslash character is used as an escape to
                specify unbalanced parenthesis, non-printing ASCII characters, and the backslash character
                itself. Use of the \<I>ddd</I> escape sequence is the preferred way to represent characters
                outside the printable ASCII character set.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 4.4 (page 37-39).
                @see        PdfObject
                @see        BadPdfFormatException
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfString.encoding">
            <summary>
                membervariables
            </summary>
            <summary>
                The encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfString.Value">
            <summary>
                The value of this object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs an empty  PdfString -object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.String)">
            <summary>
                Constructs a  PdfString -object.
            </summary>
            <param name="value">the content of the string</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.String,System.String)">
            <summary>
                Constructs a  PdfString -object.
            </summary>
            <param name="value">the content of the string</param>
            <param name="encoding">an encoding</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.Byte[])">
            <summary>
                Constructs a  PdfString -object.
            </summary>
            <param name="bytes">an array of  byte </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfString.Encoding">
            <summary>
                methods overriding some methods in PdfObject
            </summary>
            <summary>
                Returns the PDF representation of this  PdfString .
            </summary>
            <returns>an array of  byte s</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.ToString">
            <summary>
                Returns the  string  value of the  PdfString -object.
            </summary>
            <returns>a  string </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.ToUnicodeString">
            <summary>
                other methods
            </summary>
            <summary>
                Gets the encoding of this string.
            </summary>
            <returns>a  string </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfStructureElement">
            <summary>
                This is a node in a document logical structure. It may contain a mark point or it may contain
                other nodes.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStructureElement._parent">
            <summary>
                Holds value of property kids.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStructureElement._reference">
            <summary>
                Holds value of property reference.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureElement.#ctor(iTextSharp.text.pdf.PdfStructureElement,iTextSharp.text.pdf.PdfName)">
            <summary>
                Creates a new instance of PdfStructureElement.
            </summary>
            <param name="parent">the parent of this node</param>
            <param name="structureType">the type of structure. It may be a standard type or a user type mapped by the role map</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureElement.#ctor(iTextSharp.text.pdf.PdfStructureTreeRoot,iTextSharp.text.pdf.PdfName)">
            <summary>
                Creates a new instance of PdfStructureElement.
            </summary>
            <param name="parent">the parent of this node</param>
            <param name="structureType">the type of structure. It may be a standard type or a user type mapped by the role map</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureElement.Parent">
            <summary>
                Gets the parent of this node.
            </summary>
            <returns>the parent of this node</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureElement.Reference">
            <summary>
                Gets the reference this object will be written to.
            </summary>
            <returns>the reference this object will be written to</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfStructureTreeRoot">
            <summary>
                The structure tree root corresponds to the highest hierarchy level in a tagged PDF.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStructureTreeRoot._writer">
            <summary>
                Holds value of property writer.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureTreeRoot.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a new instance of PdfStructureTreeRoot
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureTreeRoot.Reference">
            <summary>
                Gets the reference this object will be written to.
            </summary>
            <returns>the reference this object will be written to</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureTreeRoot.Writer">
            <summary>
                Gets the writer.
            </summary>
            <returns>the writer</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureTreeRoot.MapRole(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            <summary>
                Maps the user tags to the standard tags. The mapping will allow a standard application to make some sense of the
                tagged
                document whatever the user tags may be.
            </summary>
            <param name="used">the user tag</param>
            <param name="standard">the standard tag</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTable">
            <summary>
                PdfTable  is an object that contains the graphics and text of a table.
                @see     iTextSharp.text.Table
                @see     iTextSharp.text.Row
                @see     iTextSharp.text.Cell
                @see     PdfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable._cells">
            <summary>
                this is the ArrayList with all the cells in the table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable._headercells">
            <summary>
                this is the ArrayList with all the cell of the table header.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.Positions">
            <summary>
                membervariables
            </summary>
            <summary>
                Cached column widths.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.Table">
            <summary>
                Original table used to build this object
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.#ctor(iTextSharp.text.Table,System.Single,System.Single,System.Single)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfTable -object.
            </summary>
            <param name="table">a  Table </param>
            <param name="left">the left border on the page</param>
            <param name="right">the right border on the page</param>
            <param name="top">the start position of the top of the table</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Offset">
            <summary>
                methods
            </summary>
            <summary>
                Updates the table row additions in the underlying table object and deletes all table rows,
                in order to preserve memory and detect future row additions.
                <b>Pre-requisite</b>: the object must have been built with the parameter  supportUpdateRowAdditions  equals to
                true.
            </summary>
            <summary>
                Gets the offset of this table.
            </summary>
            <returns>the space between this table and the previous element.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Type">
            <summary>
                @see com.lowagie.text.Element#type()
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Columns">
            <summary>
                this is the number of columns in the table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.updateRowAdditionsInternal">
            <summary>
                Updates the table row additions in the underlying table object
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTemplate">
            <summary>
                Implements the form XObject.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.BBox">
            <summary>
                The bounding box of this template
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.pageResources">
            <summary>
                The resources used by this template
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.ThisReference">
            <summary>
                The indirect reference to this template
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Creates a  PdfTemplate .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Layer">
            <summary>
                Gets the bounding heigth of this template.
            </summary>
            <returns>heigth the bounding height</returns>
            <summary>
                Gets the layer this template belongs to.
            </summary>
            <returns>the layer this template belongs to or  null  for no layer defined</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Type">
            <summary>
                Gets a duplicate of this  PdfTemplate . All
                the members are copied by reference but the buffer stays different.
            </summary>
            <returns>a copy of this  PdfTemplate </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Width">
            <summary>
                Gets the bounding width of this template.
            </summary>
            <returns>width the bounding width</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.CreateTemplate(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single)">
            <summary>
                Creates a new template.
                Creates a new template that is nothing more than a form XObject. This template can be included
                in this  PdfContentByte  or in another template. Templates are only written
                to the output when the document is closed permitting things like showing text in the first page
                that is only defined in the last page.
            </summary>
            <param name="writer"></param>
            <param name="width">the bounding box width</param>
            <param name="height">the bounding box height</param>
            <returns>the templated created</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.BeginVariableText">
            <summary>
                Gets the indirect reference to this template.
            </summary>
            <returns>the indirect reference to this template</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.GetFormXObject(System.Int32)">
            <summary>
                Constructs the resources used by this template.
            </summary>
            <returns>the resources used by this template</returns>
            <summary>
                Gets the stream representing this template.
                @since   2.1.3   (replacing the method without param compressionLevel)
            </summary>
            <param name="compressionLevel">the compressionLevel</param>
            <returns>the stream representing this template</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTextArray">
            <summary>
                PdfTextArray  defines an array with displacements and  PdfString -objects.
                A  TextArray  is used with the operator <VAR>TJ</VAR> in  PdfText .
                The first object in this array has to be a  PdfString ;
                see reference manual version 1.3 section 8.7.5, pages 346-347.
                OR
                see reference manual version 1.6 section 5.3.2, pages 378-379.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTextArray._lastStr">
            <summary>
                To emit a more efficient array, we consolidate
            </summary>
            <summary>
                repeated numbers or strings into single array entries.
            </summary>
            <summary>
                "add( 50 ); Add( -50 );" will REMOVE the combined zero from the array.
            </summary>
            <summary>
                the alternative (leaving a zero in there) was Just Weird.
            </summary>
            <summary>
                --Mark Storer, May 12, 2008
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTextArray.#ctor(System.String)">
            <summary>
                constructors
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTextArray.Add(iTextSharp.text.pdf.PdfNumber)">
            <summary>
                Adds a  PdfNumber  to the  PdfArray .
            </summary>
            <param name="number">displacement of the string</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTransition">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BLINDH">
            <summary>
                Vertical Blinds
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BLINDV">
            <summary>
                Vertical Blinds
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BTWIPE">
            <summary>
                Bottom-Top Wipe
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.DGLITTER">
            <summary>
                Diagonal Glitter
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.DISSOLVE">
            <summary>
                Dissolve
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.INBOX">
            <summary>
                Inward Box
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.LRGLITTER">
            <summary>
                Left-Right Glitter
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.LRWIPE">
            <summary>
                Left-Right Wipe
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.OUTBOX">
            <summary>
                Outward Box
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.RLWIPE">
            <summary>
                Right-Left Wipe
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITHIN">
            <summary>
                IN Horizontal Split
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITHOUT">
            <summary>
                Out Horizontal Split
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITVIN">
            <summary>
                In Vertical Split
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITVOUT">
            <summary>
                Out Vertical Split
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.TBGLITTER">
            <summary>
                Top-Bottom Glitter
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.TBWIPE">
            <summary>
                Top-Bottom Wipe
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.duration">
            <summary>
                duration of the transition effect
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.type">
            <summary>
                type of the transition effect
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor">
            <summary>
                Constructs a  Transition .
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor(System.Int32)">
            <summary>
                Constructs a  Transition .
            </summary>
            <param name="type">type of the transition effect</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructs a  Transition .
            </summary>
            <param name="type">type of the transition effect</param>
            <param name="duration">duration of the transition effect</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTransparencyGroup">
            <summary>
                The transparency group dictionary.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransparencyGroup.#ctor">
            <summary>
                Constructs a transparencyGroup.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTransparencyGroup.Isolated">
            <summary>
                Determining the initial backdrop against which its stack is composited.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTransparencyGroup.Knockout">
            <summary>
                Determining whether the objects within the stack are composited with one another or only with the group's backdrop.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter">
            <summary>
                A  DocWriter  class for PDF.
                When this  PdfWriter  is added
                to a certain  PdfDocument , the PDF representation of every Element
                added to this Document will be written to the outputstream.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_ASSEMBLY">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_COPY">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_DEGRADED_PRINTING">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_FILL_IN">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_MODIFY_ANNOTATIONS">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_MODIFY_CONTENTS">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_PRINTING">
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_SCREENREADERS">
            <summary>
                permissions
            </summary>
            <summary>
                The operation permitted when the document is opened with the user password
                @since 2.0.7
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowAssembly">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_ASSEMBLY} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowCopy">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_COPY} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowDegradedPrinting">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_DEGRADED_PRINTING} instead. Scheduled for removal at or after
                2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowFillIn">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_FILL_IN} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowModifyAnnotations">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_MODIFY_ANNOTATIONS} instead. Scheduled for removal at or after
                2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowModifyContents">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_MODIFY_CONTENTS} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowPrinting">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_PRINTING} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowScreenReaders">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #ALLOW_SCREENREADERS} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.CenterWindow">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DirectionL2R">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DirectionR2L">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DisplayDocTitle">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DO_NOT_ENCRYPT_METADATA">
            <summary>
                Add this to the mode to keep the metadata in clear text
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.EMBEDDED_FILES_ONLY">
            <summary>
                Add this to the mode to keep encrypt only the embedded files.
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ENCRYPTION_AES_128">
            <summary>
                Type of encryption
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.FitWindow">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.GENERATION_MAX">
            <summary>
                The highest generation number possible.
                @since   iText 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideMenubar">
            <summary>
                INNER CLASSES
            </summary>
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideToolbar">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideWindowUI">
            <summary>
                values for setting viewer preferences in iText versions older than 2.x
            </summary>
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NO_SPACE_CHAR_RATIO">
            <summary>
                Disable the inter-character spacing.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseNone">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseOC">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseOutlines">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseThumbs">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutOneColumn">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutSinglePage">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoColumnLeft">
            <summary>
                page layout (section 13.1.1 of "iText in Action")
            </summary>
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoColumnRight">
            <summary>
                [C3] PdfViewerPreferences interface
            </summary>
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoPageLeft">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoPageRight">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeFullScreen">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseAttachments">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseNone">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseOC">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseOutlines">
            <summary>
                page mode (section 13.1.2 of "iText in Action")
            </summary>
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseThumbs">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFA1A">
            <summary>
                PDFA-1A level.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFA1B">
            <summary>
                PDFA-1B level.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFX1A2001">
            <summary>
                PDF/X level
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFX32002">
            <summary>
                PDF/X level
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFXNONE">
            <summary>
                PDF/X level
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PrintScalingNone">
            <summary>
                A viewer preference
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_DEFAULT">
            <summary>
                Use the default run direction.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_LTR">
            <summary>
                Use bidirectional reordering with left-to-right
                preferential run direction.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_NO_BIDI">
            <summary>
                [U7] run direction (doesn't actually do anything)
            </summary>
            <summary>
                Do not use bidirectional reordering.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_RTL">
            <summary>
                Use bidirectional reordering with right-to-left
                preferential run direction.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SIGNATURE_APPEND_ONLY">
            <summary>
                signature value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SIGNATURE_EXISTS">
            <summary>
                signature value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SPACE_CHAR_RATIO_DEFAULT">
            <summary>
                The default space-char ratio.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STANDARD_ENCRYPTION_128">
            <summary>
                Type of encryption
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STANDARD_ENCRYPTION_40">
            <summary>
                Type of encryption
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STRENGTH128BITS">
            <summary>
                @deprecated As of iText 2.0.7, use {@link #STANDARD_ENCRYPTION_128} instead. Scheduled for removal at or after
                2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STRENGTH40BITS">
            <summary>
                Strength of the encryption (kept for historical reasons)
            </summary>
            <summary>
                @deprecated As of iText 2.0.7, use {@link #STANDARD_ENCRYPTION_40} instead. Scheduled for removal at or after 2.2.0
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_2">
            <summary>
                [C2] PdfVersion interface
            </summary>
            <summary>
                possible PDF version (header)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_3">
            <summary>
                possible PDF version (header)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_4">
            <summary>
                possible PDF version (header)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_5">
            <summary>
                possible PDF version (header)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_6">
            <summary>
                possible PDF version (header)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_7">
            <summary>
                possible PDF version (header)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ENCRYPTION_MASK">
            <summary>
                types of encryption
            </summary>
            <summary>
                Mask to separate the encryption type from the encryption mode.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageClose">
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageOpen">
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfVersion12">
            <summary>
                possible PDF version (catalog)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfVersion13">
            <summary>
                possible PDF version (catalog)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfVersion14">
            <summary>
                possible PDF version (catalog)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfVersion15">
            <summary>
                possible PDF version (catalog)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfVersion16">
            <summary>
                possible PDF version (catalog)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfVersion17">
            <summary>
                possible PDF version (catalog)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DidPrint">
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DidSave">
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DocumentClose">
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.WillPrint">
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.WillSave">
            <summary>
                [C6] Actions (open and additional)
            </summary>
            <summary>
                action value
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter._images">
            <summary>
                This is the list with all the images in the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter._pdfxConformance">
            <summary>
                [C10] PDFX Conformance
            </summary>
            <summary>
                Stores the PDF/X level.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter._pageEvent">
            <summary>
                The  PdfPageEvent  for this document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter._rgbTransparencyBlending">
            <summary>
                Holds value of property RGBTranparency.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter._spaceCharRatio">
            <summary>
                [U6] space char ratio
            </summary>
            <summary>
                The ratio between the extra word spacing and the extra character spacing.
                Extra word spacing will grow  ratio  times more than extra character spacing.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter._userProperties">
            <summary>
                [F12] tagged PDF
            </summary>
            <summary>
                A flag indicating the presence of structure elements that contain user properties attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.Body">
            <summary>
                body of the PDF document
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ColorNumber">
            <summary>
                The color number counter for the colors in the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.compressionLevel">
            <summary>
                The compression level of the content streams.
                @since   2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.Crypto">
            <summary>
                [F1] PdfEncryptionSettings interface
            </summary>
            <summary>
                Contains the business logic for cryptography.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.currentPageNumber">
            <summary>
                The current page number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.directContent">
            <summary>
                The direct content in this document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.directContentUnder">
            <summary>
                You should see Direct Content as a canvas on which you can draw
                graphics and text. One canvas goes on top of the page (getDirectContent),
                the other goes underneath (getDirectContentUnder).
                You can always the same object throughout your document,
                even if you have moved to a new page. Whatever you add on
                the canvas will be displayed on top or under the current page.
            </summary>
            <summary>
                The direct content under in this document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DocumentColors">
            <summary>
                The colors of this document
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DocumentFonts">
            <summary>
                The fonts of this document
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DocumentOcGorder">
            <summary>
                [F13] Optional Content Groups
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DocumentPatterns">
            <summary>
                The patterns of this document
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.extraCatalog">
            <summary>
                Holds value of property extraCatalog.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.FontNumber">
            <summary>
                [F3] adding fonts
            </summary>
            <summary>
                The font number counter for the fonts in the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.FormXObjects">
            <summary>
                The form XObjects in this document. The key is the xref and the value
                is Object[]{PdfName, template}.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.FormXObjectsCounter">
            <summary>
                [F4] adding (and releasing) form XObjects
            </summary>
            <summary>
                The name counter for the form XObjects name.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.fullCompression">
            <summary>
                Holds value of property fullCompression.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.group">
            <summary>
                A group attributes dictionary specifying the attributes
                of the page�s page group for use in the transparent
                imaging model
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ImageDictionary">
            <summary>
                Dictionary, containing all the images of the PDF document
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.Jbig2Globals">
            <summary>
                A Hashtable with Stream objects containing JBIG2 Globals
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageReferences">
            <summary>
                The PdfIndirectReference to the pages.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PatternColorspaceRgb">
            <summary>
                [M2] spot patterns
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PatternNumber">
            <summary>
                [F7] document patterns
            </summary>
            <summary>
                The patten number counter for the colors in the document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.Pdf">
            <summary>
                the PdfDocument instance
            </summary>
            <summary>
                the pdfdocument object.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pdf_version">
            <summary>
                Stores the version information for the header and the catalog.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.Prevxref">
            <summary>
                A number refering to the previous Cross-Reference Table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.Root">
            <summary>
                The root of the page tree.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.tabs">
            <summary>
                The page root keeps the complete page tree of the document.
                There's an entry in the Catalog that refers to the root
                of the page tree, the page tree contains the references
                to pages and other page trees.
            </summary>
            <summary>
                The value of the Tabs entry in the page dictionary.
                @since   2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.xmpMetadata">
            <summary>
                XMP Metadata for the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.#ctor">
            <summary>
                Constructs a  PdfWriter .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CurrentPageHeight">
            <summary>
                This is the current height of the document.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Collection">
            <summary>
                [C7] portable collections
            </summary>
            <summary>
                Sets the Collection dictionary.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CompressionLevel">
            <summary>
                Sets the compression level to be used for streams written by this writer.
                @since   2.1.3
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CropBoxSize">
            <summary>
                Sets the crop box. The crop box should not be rotated even if the
                page is rotated. This change only takes effect in the next
                page.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CurrentDocumentSize">
            <summary>
                Gets the current document size. This size only includes
                the data already writen to the output stream, it does not
                include templates or fonts. It is usefull if used with
                freeReader()  when concatenating many documents
                and an idea of the current size is needed.
            </summary>
            <returns>the approximate size without fonts or templates</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DefaultColorspace">
            <summary>
                [M1] Color settings
            </summary>
            <summary>
                Gets the default colorspaces.
            </summary>
            <returns>the default colorspaces</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DirectContent">
            <summary>
                the PdfDirectContentByte instances
            </summary>
            <summary>
                Use this method to get the direct content for this document.
                There is only one direct content, multiple calls to this method
                will allways retrieve the same object.
            </summary>
            <returns>the direct content</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DirectContentUnder">
            <summary>
                Use this method to get the direct content under for this document.
                There is only one direct content, multiple calls to this method
                will allways retrieve the same object.
            </summary>
            <returns>the direct content</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.ExtraCatalog">
            <summary>
                Sets extra keys to the catalog.
            </summary>
            <returns>the catalog to change</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.FullCompression">
            <summary>
                [F2] compression
            </summary>
            <summary>
                Gets the 1.5 compression status.
            </summary>
            <returns> true  if the 1.5 compression is on</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Group">
            <summary>
                [U5] Transparency groups
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Info">
            <summary>
                Use this method to get the info dictionary if you want to
                change it directly (add keys and values to the info dictionary).
            </summary>
            <returns>the info dictionary</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.OcProperties">
            <summary>
                Gets the <B>Optional Content Properties Dictionary</B>. Each call fills the dictionary with the current layer
                state. It's advisable to only call this method right before close and do any modifications
                at that time.
            </summary>
            <returns>the Optional Content Properties Dictionary</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Outlines">
            <summary>
                Sets the bookmarks. The list structure is defined in
                {@link SimpleBookmark}.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageEmpty">
            <summary>
                If you use SetPageEmpty(false), invoking NewPage() after a blank page will add a newPage.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageEvent">
            <summary>
                Page events are specific for iText, not for PDF.
                Upon specific events (for instance when a page starts
                or ends), the corresponing method in the page event
                implementation that is added to the writer is invoked.
            </summary>
            <summary>
                Gets the  PdfPageEvent  for this document or  null
                if none is set.
                if none is set
            </summary>
            <returns>the  PdfPageEvent  for this document or  null </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageLabels">
            <summary>
                Use this method to add page labels
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageNumber">
            <summary>
                Gets the pagenumber of this document.
                This number can be different from the real pagenumber,
                if you have (re)set the page number previously.
            </summary>
            <returns>a page number</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageSize">
            <summary>
                Gives the size of the media box.
            </summary>
            <returns>a Rectangle</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageXmpMetadata">
            <summary>
                Use this method to set the XMP Metadata for each page.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfIndirectReference">
            <summary>
                Gets a  PdfIndirectReference  for an object that
                will be created in the future.
            </summary>
            <returns>the  PdfIndirectReference </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RgbTransparencyBlending">
            <summary>
                Sets the transparency blending colorspace to RGB. The default blending colorspace is
                CMYK and will result in faded colors in the screen and in printing. Calling this method
                will return the RGB colors to what is expected. The RGB blending will be applied to all subsequent pages
                until other value is set.
                Note that this is a generic solution that may not work in all cases.
                to use the default blending colorspace
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RootOutline">
            <summary>
                Use this method to get the root outline
                and construct bookmarks.
            </summary>
            <returns>the root outline</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.SpaceCharRatio">
            <summary>
                Sets the ratio between the extra word spacing and the extra character spacing
                when the text is fully justified.
                Extra word spacing will grow  spaceCharRatio  times more than extra character spacing.
                If the ratio is  PdfWriter.NO_SPACE_CHAR_RATIO  then the extra character spacing
                will be zero.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.StrictImageSequence">
            <summary>
                Sets the image sequence to follow the text in strict order.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.StructureTreeRoot">
            <summary>
                Gets the structure tree root. If the document is not marked for tagging it will return  null .
            </summary>
            <returns>the structure tree root</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Tabs">
            <summary>
                Sets the value for the Tabs entry in the page tree.
                Since the Adobe Extensions Level 3, it can also be PdfName.A
                or PdfName.W
                @since	2.1.5
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Thumbnail">
            <summary>
                Sets the the thumbnail image for the current page.
                @throws PdfException on error
                @throws DocumentException or error
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.UserProperties">
            <summary>
                Sets the flag indicating the presence of structure elements that contain user properties attributes.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Userunit">
            <summary>
                [U4] Thumbnail image
            </summary>
            <summary>
                [U8] user units
            </summary>
            <summary>
                A UserUnit is a value that defines the default user space unit.
                The minimum UserUnit is 1 (1 unit = 1/72 inch).
                The maximum UserUnit is 75,000.
                Remark that this userunit only works starting with PDF1.6!
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.XmpMetadata">
            <summary>
                [C9] Metadata
            </summary>
            <summary>
                Sets XMP Metadata.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Encryption">
            <summary>
                PDF Objects that have an impact on the PDF body
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Os">
            <summary>
                Returns the outputStreamCounter.
            </summary>
            <returns>the outputStreamCounter</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfDocument">
            <summary>
                Gets the  PdfDocument  associated with this writer.
            </summary>
            <returns>the  PdfDocument </returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.SigFlags">
            <summary>
                Set the signature flags.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            <summary>
                [C8] AcroForm
            </summary>
            <summary>
                Gets the AcroForm object.
            </summary>
            <returns>the  PdfAcroForm </returns>
            <summary>
                Adds a  PdfAnnotation  or a  PdfFormField
                to the document. Only the top parent of a  PdfFormField
                needs to be added.
            </summary>
            <param name="annot">the  PdfAnnotation  or the  PdfFormField  to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            <summary>
                Adds the  PdfAnnotation  to the calculation order
                array.
            </summary>
            <param name="annot">the  PdfAnnotation  to be added</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Additional-actions defining the actions to be taken in
                response to various trigger events affecting the document
                as a whole. The actions types allowed are:  DOCUMENT_CLOSE ,
                WILL_SAVE ,  DID_SAVE ,  WILL_PRINT
                and  DID_PRINT .
                @throws PdfException on invalid action type
            </summary>
            <param name="actionType">the action type</param>
            <param name="action">the action to execute in response to the trigger</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOpenAction(System.String)">
            <summary>
                When the document opens it will jump to the destination with
                this name.
            </summary>
            <param name="name">the name of the destination to jump to</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            <summary>
                When the document opens this  action  will be
                invoked.
            </summary>
            <param name="action">the action to be invoked</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            <summary>
                Sets the certificate encryption options for this document. An array of one or more public certificates
                must be provided together with an array of the same size for the permissions for each certificate.
                The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="certs">the public certificates to be used for the encryption</param>
            <param name="permissions">the user permissions for each of the certicates</param>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Duration">
            <summary>
                Sets the display duration for the page (for presentations)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Transition">
            <summary>
                Sets the transition for the page
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            <summary>
                User methods to change aspects of the page
            </summary>
            <summary>
                [U2] take care of empty pages
            </summary>
            <summary>
                [U3] page actions (open and close)
            </summary>
            <summary>
                Sets the open and close page additional action.
                or  PdfWriter.PAGE_CLOSE
                @throws PdfException if the action type is invalid
            </summary>
            <param name="actionType">the action type. It can be  PdfWriter.PAGE_OPEN </param>
            <param name="action">the action to perform</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RunDirection">
            <summary>
                Sets the run direction. This is only used as a placeholder
                as it does not affect anything.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfVersion">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDeveloperExtension(iTextSharp.text.pdf.PdfDeveloperExtension)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#addDeveloperExtension(com.lowagie.text.pdf.PdfDeveloperExtension)
                @since   2.1.6
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetAtLeastPdfVersion(System.Char)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetPdfVersion(iTextSharp.text.pdf.PdfName)">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.ViewerPreferences">
            <summary>
                Sets the viewer preferences as the sum of several constants.
                @see PdfViewerPreferences#setViewerPreferences
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Adds a viewer preference
                @see PdfViewerPreferences#addViewerPreference
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfxConformance">
            <summary>
                Sets the PDFX conformance level. Allowed values are PDFX1A2001 and PDFX32002. It
                must be called before opening the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.IsPdfX">
            <summary>
                @see com.lowagie.text.pdf.interfaces.PdfXConformance#isPdfX()
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectImageSimple(iTextSharp.text.Image)">
            <summary>
                Adds an image to the document but not to the page resources. It is used with
                templates and  Document.Add(Image) .
                @throws PdfException on error
                @throws DocumentException on error
            </summary>
            <param name="image">the  Image  to add</param>
            <returns>the name of the image added</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectImageSimple(iTextSharp.text.Image,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Adds an image to the document but not to the page resources. It is used with
                templates and  Document.Add(Image) .
                a  PdfIndirectReference  or a  PRIndirectReference .
                @throws PdfException on error
                @throws DocumentException on error
            </summary>
            <param name="image">the  Image  to add</param>
            <param name="fixedRef">the reference to used. It may be  null ,</param>
            <returns>the name of the image added</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddFileAttachment(System.String,System.Byte[],System.String,System.String)">
            <summary>
                Adds a file attachment at the document level.
                the file will be read from the disk
                fileStore  is not  null
                @throws IOException on error
            </summary>
            <param name="description">the file description</param>
            <param name="fileStore">an array with the file. If it's  null </param>
            <param name="file">the path to the file. It will only be used if</param>
            <param name="fileDisplay">the actual file name stored in the pdf</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddFileAttachment(System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            <summary>
                Adds a file attachment at the document level.
            </summary>
            <param name="description">the file description</param>
            <param name="fs">the file specification</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddFileAttachment(iTextSharp.text.pdf.PdfFileSpecification)">
            <summary>
                Adds a file attachment at the document level.
            </summary>
            <param name="fs">the file specification</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(iTextSharp.text.pdf.PdfAction)">
            <summary>
                Use this method to add a JavaScript action at the document level.
                When the document opens, all this JavaScript runs.
            </summary>
            <param name="js">The JavaScript action</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.Boolean)">
            <summary>
                [C4] Page labels
            </summary>
            <summary>
                [C5] named objects: named destinations, javascript, embedded files
            </summary>
            <summary>
                Adds a JavaScript action at the document level. When the document
                opens all this JavaScript runs.
                Acrobat JavaScript engine does not support unicode,
                so this may or may not work for you
            </summary>
            <param name="code">the JavaScript code</param>
            <param name="unicode">select JavaScript unicode. Note that the internal</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String)">
            <summary>
                Adds a JavaScript action at the document level. When the document
                opens all this JavaScript runs.
            </summary>
            <param name="code">the JavaScript code</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,iTextSharp.text.pdf.PdfAction)">
            <summary>
                Use this method to add a JavaScript action at the document level.
                When the document opens, all this JavaScript runs.
            </summary>
            <param name="name">The name of the JS Action in the name tree</param>
            <param name="js">The JavaScript action</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.String,System.Boolean)">
            <summary>
                Use this method to add a JavaScript action at the document level.
                When the document opens, all this JavaScript runs.
                Acrobat JavaScript engine does not support unicode,
                so this may or may not work for you
            </summary>
            <param name="name">The name of the JS Action in the name tree</param>
            <param name="code">the JavaScript code</param>
            <param name="unicode">select JavaScript unicode. Note that the internal</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.String)">
            <summary>
                Use this method to adds a JavaScript action at the document level.
                When the document opens, all this JavaScript runs.
            </summary>
            <param name="name">The name of the JS Action in the name tree</param>
            <param name="code">the JavaScript code</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddOcgRadioGroup(System.Collections.Generic.IList{iTextSharp.text.pdf.PdfLayer})">
            <summary>
                Sets a collection of optional content groups whose states are intended to follow
                a "radio button" paradigm. That is, the state of at most one optional
                content group in the array should be ON at a time: if one group is turned
                ON, all others must be turned OFF.
            </summary>
            <param name="group">the radio group</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject)">
            <summary>
                Adds an object to the PDF body.
                @throws IOException
            </summary>
            <param name="objecta"></param>
            <returns>a PdfIndirectObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Boolean)">
            <summary>
                Adds an object to the PDF body.
                @throws IOException
            </summary>
            <param name="objecta"></param>
            <param name="inObjStm"></param>
            <returns>a PdfIndirectObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Adds an object to the PDF body.
                @throws IOException
            </summary>
            <param name="objecta"></param>
            <param name="refa"></param>
            <returns>a PdfIndirectObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference,System.Boolean)">
            <summary>
                Adds an object to the PDF body.
                @throws IOException
            </summary>
            <param name="objecta"></param>
            <param name="refa"></param>
            <param name="inObjStm"></param>
            <returns>a PdfIndirectObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Int32)">
            <summary>
                Adds an object to the PDF body.
                @throws IOException
            </summary>
            <param name="objecta"></param>
            <param name="refNumber"></param>
            <returns>a PdfIndirectObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Int32,System.Boolean)">
            <summary>
                Adds an object to the PDF body.
                @throws IOException
            </summary>
            <param name="objecta"></param>
            <param name="refNumber"></param>
            <param name="inObjStm"></param>
            <returns>a PdfIndirectObject</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ClearTextWrap">
            <summary>
                [M3] Images
            </summary>
            <summary>
                Clears text wrapping around images (if applicable).
                Method suggested by Pelikan Stephan
                @throws DocumentException
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.Close">
            <summary>
                Signals that the  Document  was closed and that no other
                Elements  will be added.
                The pages-tree is built and written to the outputstream.
                A Catalog is constructed, as well as an Info-object,
                the referencetable is composed and everything is written
                to the outputstream embedded in a Trailer.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.CreateXmpMetadata">
            <summary>
                Creates XMP Metadata based on the metadata in the PdfDocument.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.Table,System.Single)">
            <summary>
                Checks if a  Table  fits the current page of the  PdfDocument .
            </summary>
            <param name="table">the table that has to be checked</param>
            <param name="margin">a certain margin</param>
            <returns> true  if the  Table  fits the page,  false  otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.Table)">
            <summary>
                [M4] Old table functionality; do we still need it?
            </summary>
            <summary>
                Checks if a  Table  fits the current page of the  PdfDocument .
            </summary>
            <param name="table">the table that has to be checked</param>
            <returns> true  if the  Table  fits the page,  false  otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FreeReader(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Writes the reader to the document and frees the memory used by it.
                The main use is when concatenating multiple documents to keep the
                memory usage restricted to the current appending document.
                @throws IOException on error
            </summary>
            <param name="reader">the  PdfReader  to free</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetBoxSize(System.String)">
            <summary>
                Gives the size of a trim, art, crop or bleed box, or null if not defined.
            </summary>
            <param name="boxName">crop, trim, art or bleed</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            <summary>
                [F5] adding pages imported form other PDF documents
            </summary>
            <summary>
                Gets a page from other PDF document. The page can be used as
                any other PdfTemplate. Note that calling this method more than
                once with the same parameters will retrieve the same object.
            </summary>
            <param name="reader">the PDF document where the page is</param>
            <param name="pageNumber">the page number. The first page is 1</param>
            <returns>the template representing the imported page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetPageReference(System.Int32)">
            <summary>
                Use this method to get a reference to a page existing or not.
                If the page does not exist yet the reference will be created
                in advance. If on closing the document, a page number greater
                than the total number of pages was requested, an exception
                is thrown.
            </summary>
            <param name="page">the page number. The first page is 1</param>
            <returns>the reference to the page</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetVerticalPosition(System.Boolean)">
            <summary>
                Use this method to get the current vertical page position.
                for elements that do not terminate the lines they've started because those lines will get
                terminated.
            </summary>
            <param name="ensureNewLine">Tells whether a new line shall be enforced. This may cause side effects</param>
            <returns>The current vertical page position.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.IsTagged">
            <summary>
                Check if the document is marked for tagging.
            </summary>
            <returns> true  if the document is marked for tagging</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.LockLayer(iTextSharp.text.pdf.PdfLayer)">
            <summary>
                Use this method to lock an optional content group.
                The state of a locked group cannot be changed through the user interface
                of a viewer application. Producers can use this entry to prevent the visibility
                of content that depends on these groups from being changed by users.
                @since   2.1.2
            </summary>
            <param name="layer">the layer that needs to be added to the array of locked OCGs</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.Open">
            <summary>
                page events
            </summary>
            <summary>
                Open en Close method + method that create the PDF
            </summary>
            <summary>
                Signals that the  Document  has been opened and that
                Elements  can be added.
                When this method is called, the PDF-document header is
                written to the outputstream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ReleaseTemplate(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
                Releases the memory used by a template by writing it to the output. The template
                can still be added to any content but changes to the template itself won't have
                any effect.
                @throws IOException on error
            </summary>
            <param name="tp">the template to release</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ReorderPages(System.Int32[])">
            <summary>
                Use this method to reorder the pages in the document.
                A  null  argument value only returns the number of pages to process.
                It is advisable to issue a  Document.newPage()  before using this method.
                same size as the number of pages.
                @throws DocumentException if all the pages are not present in the array
            </summary>
            <param name="order">an array with the new page sequence. It must have the</param>
            <returns>the total number of pages</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetBoxSize(System.String,iTextSharp.text.Rectangle)">
            <summary>
                [U1] page size
            </summary>
            <summary>
                Sets the page box sizes. Allowed names are: "crop", "trim", "art" and "bleed".
            </summary>
            <param name="boxName">the box size</param>
            <param name="size">the size</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetDefaultColorspace(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            <summary>
                Miscellaneous topics
            </summary>
            <summary>
                Sets the default colorspace that will be applied to all the document.
                The colorspace is only applied if another colorspace with the same name
                is not present in the content.
                The colorspace is applied immediately when creating templates and at the page
                end for the main document content.
                or  PdfName.DEFAULTCMYK
            </summary>
            <param name="key">the name of the colorspace. It can be  PdfName.DEFAULTGRAY ,  PdfName.DEFAULTRGB </param>
            <param name="cs">the colorspace. A  null  or  PdfNull  removes any colorspace with the same name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if the document is already open
            </summary>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="strength128Bits"> true  for 128 bit key length,  false  for 40 bit key length</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                @throws DocumentException if the document is already open
            </summary>
            <param name="strength"> true  for 128 bit key length,  false  for 40 bit key length</param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Int32,System.String,System.String,System.Int32)">
            <summary>
                Sets the encryption options for this document. The userPassword and the
                ownerPassword can be null or have zero length. In this case the ownerPassword
                is replaced by a random string. The open permissions for the document can be
                AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
                AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
                The permissions can be combined by ORing them.
                Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
                @throws DocumentException if the document is already open
            </summary>
            <param name="encryptionType">
                the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128
                or ENCRYPTION_AES128.
            </param>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetFullCompression">
            <summary>
                Sets the document's compression to the new 1.5 mode with object streams and xref
                streams. It can be set at any time but once set it can't be unset.
                If set before opening the document it will also set the pdf version to 1.5.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetLinearPageMode">
            <summary>
                PdfPages
            </summary>
            <summary>
                Use this method to make sure the page tree has a lineair structure
                (every leave is attached directly to the root).
                Use this method to allow page reordering with method reorderPages.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(System.String,System.String,System.String,System.String,iTextSharp.text.pdf.IccProfile)">
            <summary>
                Sets the values of the output intent dictionary. Null values are allowed to
                suppress any key.
                @throws IOException on error
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
                [C11] Output intents
            </summary>
            <summary>
                Sets the values of the output intent dictionary. Null values are allowed to
                suppress any key.
                Prefer the  ICC_Profile -based version of this method.
                @since 1.x
                @throws IOException
            </summary>
            <param name="outputConditionIdentifier">a value</param>
            <param name="outputCondition">a value, "PDFA/A" to force GTS_PDFA1, otherwise cued by pdfxConformance.</param>
            <param name="registryName">a value</param>
            <param name="info">a value</param>
            <param name="destOutputProfile">a value</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(iTextSharp.text.pdf.PdfReader,System.Boolean)">
            <summary>
                Copies the output intent dictionary from other document to this one.
                dictionary,  false  to insert the dictionary if it exists
                @throws IOException on error
                otherwise
            </summary>
            <param name="reader">the other document</param>
            <param name="checkExistence"> true  to just check for the existence of a valid output intent</param>
            <returns> true  if the output intent dictionary exists,  false </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetTagged">
            <summary>
                [F12] tagged PDF
            </summary>
            <summary>
                Mark this document for tagging. It must be called before open.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.Add(iTextSharp.text.pdf.PdfPage,iTextSharp.text.pdf.PdfContents)">
            <summary>
                Adds some  PdfContents  to this Writer.
                The document has to be open before you can begin to add content
                to the body of the document.
                @throws PdfException on error
            </summary>
            <param name="page">the  PdfPage  to add</param>
            <param name="contents">the  PdfContents  of the page</param>
            <returns>a  PdfIndirectReference </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.Add(iTextSharp.text.pdf.PdfImage,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Writes a  PdfImage  to the outputstream.
                @throws PdfException when a document isn't open yet, or has been closed
            </summary>
            <param name="pdfImage">the image to be added</param>
            <param name="fixedRef"></param>
            <returns>a  PdfIndirectReference  to the encapsulated image</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectTemplateSimple(iTextSharp.text.pdf.PdfTemplate,iTextSharp.text.pdf.PdfName)">
            <summary>
                Adds a template to the document but not to the page resources.
            </summary>
            <param name="template">the template to add</param>
            <param name="forcedName">the template name, rather than a generated one. Can be null</param>
            <returns>the  PdfName  for this template</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddLocalDestinations(System.util.collections.OrderedTree)">
            <summary>
                A PDF file has 4 parts: a header, a body, a cross-reference table, and a trailer.
                The body contains all the PDF objects that make up the PDF document.
                Each element gets a reference (a set of numbers) and the byte position of
                every object is stored in the cross-reference table.
                Use these methods only if you know what you're doing.
            </summary>
            <summary>
                Adds the local destinations to the body of the document.
                @throws IOException on error
            </summary>
            <param name="dest">the  Hashtable  containing the destinations</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimple(iTextSharp.text.pdf.BaseFont)">
            <summary>
                Adds a  BaseFont  to the document but not to the page resources.
                It is used for templates.
                and position 1 is an  PdfIndirectReference
            </summary>
            <param name="bf">the  BaseFont  to add</param>
            <returns>an  Object[]  where position 0 is a  PdfName </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimple(iTextSharp.text.pdf.PdfSpotColor)">
            <summary>
                Adds a  SpotColor  to the document but not to the page resources.
                and position 1 is an  PdfIndirectReference
            </summary>
            <param name="spc">the  SpotColor  to add</param>
            <returns>an  Object[]  where position 0 is a  PdfName </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimpleExtGState(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                [F10] extended graphics state (for instance for transparency)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimpleProperty(System.Object,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                [F11] adding properties (OCG, marked content)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimpleShading(iTextSharp.text.pdf.PdfShading)">
            <summary>
                [F9] document shadings
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimpleShadingPattern(iTextSharp.text.pdf.PdfShadingPattern)">
            <summary>
                [F8] shading patterns
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetColorspaceName">
            <summary>
                [F6] spot colors
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetImageReference(iTextSharp.text.pdf.PdfName)">
            <summary>
                return the  PdfIndirectReference  to the image with a given name.
            </summary>
            <param name="name">the name of the image</param>
            <returns>a  PdfIndirectReference </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetPdfVersion">
            <summary>
                Returns the version information.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ResetContent">
            <summary>
                Resets all the direct contents to empty.
                This happens when a new page is started.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetReferenceJbig2Globals(System.Byte[])">
            <summary>
                Gets an indirect reference to a JBIG2 Globals stream.
                Adds the stream if it hasn't already been added to the writer.
                @since  2.1.5
            </summary>
            <param name="content">a byte array that may already been added to the writer inside a stream object.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.WriteOutlines(iTextSharp.text.pdf.PdfDictionary,System.Boolean)">
            <summary>
                [C1] Outlines (bookmarks)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.createXmpMetadataBytes">
            <summary>
                The Catalog is also called the root object of the document.
                Whereas the Cross-Reference maps the objects number with the
                byte offset so that the viewer can find the objects, the
                Catalog tells the viewer the numbers of the objects needed
                to render the document.
            </summary>
            <summary>
                Root data for the PDF document (used when composing the Catalog)
            </summary>
            <summary>
            </summary>
            <returns>an XmpMetadata byte array</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter.PdfBody">
            <summary>
                This class generates the structure of a PDF document.
                This class covers the third section of Chapter 5 in the 'Portable Document Format
                Reference Manual version 1.3' (page 55-60). It contains the body of a PDF document
                (section 5.14) and it can also generate a Cross-reference Table (section 5.15).
                @see      PdfWriter
                @see      PdfObject
                @see      PdfIndirectObject
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.Objsinstream">
            <summary>
                inner classes
            </summary>
            <summary>
                PdfCrossReference  is an entry in the PDF Cross-Reference table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody._xrefs">
            <summary>
                membervariables
            </summary>
            <summary>
                array containing the cross-reference table of the normal objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.#ctor(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Constructs a new  PdfBody .
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.Offset">
            <summary>
                the current byteposition in the body.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.Add(iTextSharp.text.pdf.PdfObject,System.Boolean)">
            <summary>
                Adds a  PdfObject  to the body.
                This methods creates a  PdfIndirectObject  with a
                certain number, containing the given  PdfObject .
                It also adds a  PdfCrossReference  for this object
                to an  ArrayList  that will be used to build the
                Cross-reference Table.
                @throws IOException
            </summary>
            <returns>a  PdfIndirectObject </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.Add(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference,System.Boolean)">
            <summary>
                Gets a PdfIndirectReference for an object that will be created in the future.
            </summary>
            <returns>a PdfIndirectReference</returns>
            <summary>
                Adds a  PdfObject  to the body given an already existing
                PdfIndirectReference.
                This methods creates a  PdfIndirectObject  with the number given by
                ref , containing the given  PdfObject .
                It also adds a  PdfCrossReference  for this object
                to an  ArrayList  that will be used to build the
                Cross-reference Table.
                @throws IOException
            </summary>
            <returns>a  PdfIndirectObject </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.addToObjStm(iTextSharp.text.pdf.PdfObject,System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                methods
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference._generation">
            <summary>
                generation of the object.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference._offset">
            <summary>
                Byte offset in the PDF file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference._type">
            <summary>
                membervariables
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a cross-reference element for a PdfIndirectObject.
            </summary>
            <param name="refnum"></param>
            <param name="offset">byte offset of the object</param>
            <param name="generation">generationnumber of the object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructs a cross-reference element for a PdfIndirectObject.
            </summary>
            <param name="refnum"></param>
            <param name="offset">byte offset of the object</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.Equals(System.Object)">
            <summary>
                @see java.lang.Object#equals(java.lang.Object)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.Int32,System.IO.Stream)">
            <summary>
                Writes PDF syntax to the Stream
                @throws IOException
            </summary>
            <param name="midSize"></param>
            <param name="os"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter.PdfTrailer">
            <summary>
                PdfTrailer  is the PDF Trailer object.
                This object is described in the 'Portable Document Format Reference Manual version 1.3'
                section 5.16 (page 59-60).
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfTrailer.Offset">
            <summary>
                membervariables
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfTrailer.#ctor(System.Int32,System.Int32,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfObject,System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a PDF-Trailer.
            </summary>
            <param name="size">the number of entries in the  PdfCrossReferenceTable </param>
            <param name="offset">offset of the  PdfCrossReferenceTable </param>
            <param name="root">an indirect reference to the root of the PDF document</param>
            <param name="info">an indirect reference to the info object of the PDF document</param>
            <param name="encryption"></param>
            <param name="fileId"></param>
            <param name="prevxref"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfTrailer.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            <summary>
                Returns the PDF representation of this  PdfObject .
                @throws IOException
            </summary>
            <param name="writer"></param>
            <param name="os"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfXConformanceException">
            <summary>
                @author  psoares
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfXConformanceException.#ctor">
            <summary>
                Creates a new instance of PdfXConformanceException.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfXConformanceException.#ctor(System.String)">
            <summary>
                Creates a new instance of PdfXConformanceException.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.Pfm2Afm">
            <summary>
                Converts a PFM file into an AFM file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2Afm._win2PsStd">
            <summary>
                Translate table from 1004 to psstd.  1004 is an extension of the
                Windows translate table used in PM.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2Afm._winChars">
            <summary>
                Windows character names.  Give a name to the used locations
                for when the all flag is specified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2Afm._capheight">
            <summary>
                Some metrics from the PostScript extension
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2Afm._winClass">
            <summary>
                Character class.  This is a minor attempt to overcome the problem that
                in the pfm file, all unused characters are given the width of space.
                Note that this array isn't used in iText.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2Afm.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.IO.Stream)">
            <summary>
                Creates a new instance of Pfm2afm
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2Afm.Convert(iTextSharp.text.pdf.RandomAccessFileOrArray,System.IO.Stream)">
            <summary>
                Converts a PFM file into an AFM file.
                @throws IOException on error
            </summary>
            <param name="inp">the PFM file</param>
            <param name="outp">the AFM file</param>
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2Afm.openpfm">
            <summary>
                public static void Main(String[] args) {
                try {
                RandomAccessFileOrArray inp = new RandomAccessFileOrArray(args[0]);
                Stream outp = new FileOutputStream(args[1]);
                Convert(inp, outp);
                inp.Close();
                outp.Close();
                }
                catch (Exception e) {
                e.PrintStackTrace();
                }
                }
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2Afm.outchar(System.Int32,System.Int32,System.String)">
            <summary>
                Output a character entry
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PrAcroForm">
            <summary>
                This class captures an AcroForm on input. Basically, it extends Dictionary
                by indexing the fields of an AcroForm
                @author Mark Thompson
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PrAcroForm.#ctor(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Constructor
            </summary>
            <param name="reader">reader of the input file</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PrAcroForm.Size">
            <summary>
                Number of fields found
            </summary>
            <returns>size</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PrAcroForm.GetRefByName(System.String)">
            <summary>
                Given the title (/T) of a reference, return the associated reference
            </summary>
            <param name="name">a string containing the path</param>
            <returns>a reference to the field, or null</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PrAcroForm.ReadAcroForm(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                Read, and comprehend the acroform
            </summary>
            <param name="root">the docment root</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PrAcroForm.IterateFields(iTextSharp.text.pdf.PdfArray,iTextSharp.text.pdf.PrIndirectReference,System.String)">
            <summary>
                After reading, we index all of the fields. Recursive.
            </summary>
            <param name="fieldlist">An array of fields</param>
            <param name="fieldDict">the last field dictionary we encountered (recursively)</param>
            <param name="title">the pathname of the field, up to this point or null</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PrAcroForm.MergeAttrib(iTextSharp.text.pdf.PdfDictionary,iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                merge field attributes from two dictionaries
            </summary>
            <param name="parent">one dictionary</param>
            <param name="child">the other dictionary</param>
            <returns>a merged dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.PrAcroForm.PushAttrib(iTextSharp.text.pdf.PdfDictionary)">
            <summary>
                stack a level of dictionary. Merge in a dictionary from this level
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PrAcroForm.FieldInformation">
            <summary>
                This class holds the information for a single field
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PrIndirectReference.#ctor(iTextSharp.text.pdf.PdfReader,System.Int32,System.Int32)">
            <summary>
                membervariables
            </summary>
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  PdfIndirectReference .
            </summary>
            <param name="reader">a  PdfReader </param>
            <param name="number">the object number.</param>
            <param name="generation">the generation number.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PrIndirectReference.#ctor(iTextSharp.text.pdf.PdfReader,System.Int32)">
            <summary>
                Constructs a  PdfIndirectReference .
            </summary>
            <param name="reader">a  PdfReader </param>
            <param name="number">the object number.</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PrIndirectReference.Reader">
            <summary>
                methods
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PrStream">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PrStream.objNum">
            <summary>
                added by ujihara for decryption
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PrStream.#ctor(iTextSharp.text.pdf.PdfReader,System.Byte[],System.Int32)">
            <summary>
                Creates a new PDF stream object that will replace a stream
                in a existing PDF file.
                @since   2.1.3 (replacing the existing constructor without param compressionLevel)
            </summary>
            <param name="reader">the reader that holds the existing PDF</param>
            <param name="conts">the new content</param>
            <param name="compressionLevel">the compression level for the content</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PrStream.SetData(System.Byte[],System.Boolean)">
            <summary>
                Sets the data associated with the stream, either compressed or
                uncompressed. Note that the data will never be compressed if
                Document.compress is set to false.
                @since   iText 2.1.1
            </summary>
            <param name="data">raw data, decrypted and uncompressed.</param>
            <param name="compress">true if you want the stream to be compresssed.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PrStream.SetData(System.Byte[],System.Boolean,System.Int32)">
            <summary>
                Sets the data associated with the stream, either compressed or
                uncompressed. Note that the data will never be compressed if
                Document.compress is set to false.
                @since   iText 2.1.3
            </summary>
            <param name="data">raw data, decrypted and uncompressed.</param>
            <param name="compress">true if you want the stream to be compresssed.</param>
            <param name="compressionLevel">a value between -1 and 9 (ignored if compress == false)</param>
        </member>
        <member name="M:iTextSharp.text.pdf.PrStream.SetData(System.Byte[])">
            <summary>
                Sets the data associated with the stream
            </summary>
            <param name="data">raw data, decrypted and uncompressed.</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PrTokeniser">
            <summary>
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.PushbuttonField">
            <summary>
                Creates a pushbutton field. It supports all the text and icon alignments.
                The icon may be an image or a template.
                Example usage:
                Document document = new Document(PageSize.A4, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.GetInstance(document, new FileOutputStream("output.pdf"));
                document.Open();
                PdfContentByte cb = writer.GetDirectContent();
                Image img = Image.GetInstance("image.png");
                PushbuttonField bt = new PushbuttonField(writer, new Rectangle(100, 100, 200, 200), "Button1");
                bt.SetText("My Caption");
                bt.SetFontSize(0);
                bt.SetImage(img);
                bt.SetLayout(PushbuttonField.LAYOUT_ICON_TOP_LABEL_BOTTOM);
                bt.SetBackgroundColor(Color.cyan);
                bt.SetBorderStyle(PdfBorderDictionary.STYLE_SOLID);
                bt.SetBorderColor(Color.red);
                bt.SetBorderWidth(3);
                PdfFormField ff = bt.GetField();
                PdfAction ac = PdfAction.CreateSubmitForm("http://www.submit-site.com", null, 0);
                ff.SetAction(ac);
                writer.AddAnnotation(ff);
                document.Close();
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_LEFT_LABEL_RIGHT">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_ONLY">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_TOP_LABEL_BOTTOM">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_LEFT_ICON_RIGHT">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_ONLY">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_OVER_ICON">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_TOP_ICON_BOTTOM">
            <summary>
                A layout option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_ALWAYS">
            <summary>
                An icon scaling option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_BIG">
            <summary>
                An icon scaling option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_SMALL">
            <summary>
                An icon scaling option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_NEVER">
            <summary>
                An icon scaling option
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._iconFitToBounds">
            <summary>
                Holds value of property iconFitToBounds.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._iconHorizontalAdjustment">
            <summary>
                Holds value of property iconHorizontalAdjustment.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._iconReference">
            <summary>
                Holds value of property iconReference.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._iconVerticalAdjustment">
            <summary>
                Holds value of property iconVerticalAdjustment.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._image">
            <summary>
                Holds value of property image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._layout">
            <summary>
                Holds value of property layout.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._proportionalIcon">
            <summary>
                Holds value of property proportionalIcon.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._scaleIcon">
            <summary>
                Holds value of property scaleIcon.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField._template">
            <summary>
                Holds value of property template.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PushbuttonField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            <summary>
                Creates a new instance of PushbuttonField
                will be included in the field allowing it to be used as a kid field.
            </summary>
            <param name="writer">the document  PdfWriter </param>
            <param name="box">the field location and dimensions</param>
            <param name="fieldName">the field name. If  null  only the widget keys</param>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Field">
            <summary>
                Gets the pushbutton field.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>the pushbutton field</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconFitToBounds">
            <summary>
                If  true  the icon will be scaled to fit fully within the bounds of the annotation,
                if  false  the border width will be taken into account. The default
                is  false .
                if  false  the border width will be taken into account
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconHorizontalAdjustment">
            <summary>
                A number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon.
                A value of 0 positions the icon at the left of the annotation rectangle.
                A value of 0.5 centers it within the rectangle. The default is 0.5.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconReference">
            <summary>
                Sets the reference to an existing icon.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconVerticalAdjustment">
            <summary>
                A number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon.
                A value of 0 positions the icon at the bottom of the annotation rectangle.
                A value of 0.5 centers it within the rectangle. The default is 0.5.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Image">
            <summary>
                Sets the icon as an image.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Layout">
            <summary>
                Sets the icon and label layout. Possible values are  LAYOUT_LABEL_ONLY ,
                LAYOUT_ICON_ONLY ,  LAYOUT_ICON_TOP_LABEL_BOTTOM ,
                LAYOUT_LABEL_TOP_ICON_BOTTOM ,  LAYOUT_ICON_LEFT_LABEL_RIGHT ,
                LAYOUT_LABEL_LEFT_ICON_RIGHT  and  LAYOUT_LABEL_OVER_ICON .
                The default is  LAYOUT_LABEL_ONLY .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.ProportionalIcon">
            <summary>
                Sets the way the icon is scaled. If  true  the icon is scaled proportionally,
                if  false  the scaling is done anamorphicaly.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.ScaleIcon">
            <summary>
                Sets the way the icon will be scaled. Possible values are
                SCALE_ICON_ALWAYS ,  SCALE_ICON_NEVER ,
                SCALE_ICON_IS_TOO_BIG  and  SCALE_ICON_IS_TOO_SMALL .
                The default is  SCALE_ICON_ALWAYS .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Template">
            <summary>
                Sets the icon as a template.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.PushbuttonField.GetAppearance">
            <summary>
                Gets the button appearance.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>the button appearance</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.RadioCheckField">
            <summary>
                Creates a radio or a check field.
                Example usage:
                Document document = new Document(PageSize.A4, 50, 50, 50, 50);
                PdfWriter writer = PdfWriter.GetInstance(document, new FileOutputStream("output.pdf"));
                document.Open();
                PdfContentByte cb = writer.GetDirectContent();
                RadioCheckField bt = new RadioCheckField(writer, new Rectangle(100, 100, 200, 200), "radio", "v1");
                bt.SetCheckType(RadioCheckField.TYPE_CIRCLE);
                bt.SetBackgroundColor(Color.CYAN);
                bt.SetBorderStyle(PdfBorderDictionary.STYLE_SOLID);
                bt.SetBorderColor(Color.red);
                bt.SetTextColor(Color.yellow);
                bt.SetBorderWidth(BaseField.BORDER_WIDTH_THICK);
                bt.SetChecked(false);
                PdfFormField f1 = bt.GetRadioField();
                bt.SetOnValue("v2");
                bt.SetChecked(true);
                bt.SetBox(new Rectangle(100, 300, 200, 400));
                PdfFormField f2 = bt.GetRadioField();
                bt.SetChecked(false);
                PdfFormField top = bt.GetRadioGroup(true, false);
                bt.SetOnValue("v3");
                bt.SetBox(new Rectangle(100, 500, 200, 600));
                PdfFormField f3 = bt.GetRadioField();
                top.AddKid(f1);
                top.AddKid(f2);
                top.AddKid(f3);
                writer.AddAnnotation(top);
                bt = new RadioCheckField(writer, new Rectangle(300, 300, 400, 400), "check1", "Yes");
                bt.SetCheckType(RadioCheckField.TYPE_CHECK);
                bt.SetBorderWidth(BaseField.BORDER_WIDTH_THIN);
                bt.SetBorderColor(Color.black);
                bt.SetBackgroundColor(Color.white);
                PdfFormField ck = bt.GetCheckField();
                writer.AddAnnotation(ck);
                document.Close();
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CHECK">
            <summary>
                A field with the symbol check
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CIRCLE">
            <summary>
                A field with the symbol circle
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CROSS">
            <summary>
                A field with the symbol cross
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_DIAMOND">
            <summary>
                A field with the symbol diamond
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_SQUARE">
            <summary>
                A field with the symbol square
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_STAR">
            <summary>
                A field with the symbol star
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField._checkType">
            <summary>
                Holds value of property checkType.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField._onValue">
            <summary>
                Holds value of property onValue.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField._vchecked">
            <summary>
                Holds value of property checked.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,System.String)">
            <summary>
                Creates a new instance of RadioCheckField
            </summary>
            <param name="writer">the document  PdfWriter </param>
            <param name="box">the field location and dimensions</param>
            <param name="fieldName">the field name. It must not be  null </param>
            <param name="onValue">the value when the field is checked</param>
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.Checked">
            <summary>
                Sets the state of the field to checked or unchecked.
                and  false  for unchecked
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.CheckField">
            <summary>
                Gets the check field.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>the check field</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.CheckType">
            <summary>
                Sets the checked symbol. It can be
                TYPE_CHECK ,
                TYPE_CIRCLE ,
                TYPE_CROSS ,
                TYPE_DIAMOND ,
                TYPE_SQUARE  and
                TYPE_STAR .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.OnValue">
            <summary>
                Sets the value when the field is checked.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.RadioField">
            <summary>
                Gets the radio field. It's only composed of the widget keys and must be used
                with {@link #getRadioGroup(bool,bool)}.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>the radio field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetAppearance(System.Boolean,System.Boolean)">
            <summary>
                Gets the field appearance.
                for a check field
                otherwise
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <param name="isRadio"> true  for a radio field and  false </param>
            <param name="on"> true  for the checked state,  false </param>
            <returns>the appearance</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetAppearanceRadioCircle(System.Boolean)">
            <summary>
                Gets the special field appearance for the radio circle.
                otherwise
            </summary>
            <param name="on"> true  for the checked state,  false </param>
            <returns>the appearance</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetRadioGroup(System.Boolean,System.Boolean)">
            <summary>
                Gets a radio group. It's composed of the field specific keys, without the widget
                ones. This field is to be used as a field aggregator with {@link PdfFormField#addKid(PdfFormField) AddKid()}.
                times; clicking the currently selected button has no effect.
                If  false , clicking
                the selected button deselects it, leaving no button selected.
                use the same value for the on state will turn on and off in unison; that is if
                one is checked, they are all checked. If  false , the buttons are mutually exclusive
                (the same behavior as HTML radio buttons)
            </summary>
            <param name="noToggleToOff">if  true , exactly one radio button must be selected at all</param>
            <param name="radiosInUnison">if  true , a group of radio buttons within a radio button field that</param>
            <returns>the radio group</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetField(System.Boolean)">
            <summary>
                Gets a radio or check field.
                a check field
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <param name="isRadio"> true  to get a radio field,  false  to get</param>
            <returns>the field</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.RandomAccessFileOrArray">
            <summary>
                An implementation of a RandomAccessFile for input only
                that accepts a file or a byte array as data source.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.RandomAccessFileOrArray.StartOffset">
            <summary>
                Holds value of property startOffset.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadCharLe">
            <summary>
                Reads a Unicode character from this stream in little-endian order.
                This method reads two
                bytes from the stream, starting at the current stream pointer.
                This method blocks until the two bytes are read, the end of the
                stream is detected, or an exception is thrown.
                @exception  EOFException  if this stream reaches the end before reading
                two bytes.
                @exception  IOException   if an I/O error occurs.
            </summary>
            <returns>the next two bytes of this stream as a Unicode character.</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadIntLe">
            <summary>
                Reads a signed 32-bit integer from this stream in little-endian order.
                This method reads 4
                bytes from the stream, starting at the current stream pointer.
                This method blocks until the four bytes are read, the end of the
                stream is detected, or an exception is thrown.
                int .
                @exception  EOFException  if this stream reaches the end before reading
                four bytes.
                @exception  IOException   if an I/O error occurs.
            </summary>
            <returns>the next four bytes of this stream, interpreted as an</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadShortLe">
            <summary>
                Reads a signed 16-bit number from this stream in little-endian order.
                The method reads two
                bytes from this stream, starting at the current stream pointer.
                If the two bytes read, in order, are
                b1  and  b2 , where each of the two values is
                between  0  and  255 , inclusive, then the
                result is equal to:
                (short)((b2 &lt;&lt; 8) | b1)
                This method blocks until the two bytes are read, the end of the
                stream is detected, or an exception is thrown.
                16-bit number.
                @exception  EOFException  if this stream reaches the end before reading
                two bytes.
                @exception  IOException   if an I/O error occurs.
            </summary>
            <returns>the next two bytes of this stream, interpreted as a signed</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadUnsignedInt">
            <summary>
                Reads an unsigned 32-bit integer from this stream. This method reads 4
                bytes from the stream, starting at the current stream pointer.
                This method blocks until the four bytes are read, the end of the
                stream is detected, or an exception is thrown.
                long .
                @exception  EOFException  if this stream reaches the end before reading
                four bytes.
                @exception  IOException   if an I/O error occurs.
            </summary>
            <returns>the next four bytes of this stream, interpreted as a</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadUnsignedShortLe">
            <summary>
                Reads an unsigned 16-bit number from this stream in little-endian order.
                This method reads
                two bytes from the stream, starting at the current stream pointer.
                This method blocks until the two bytes are read, the end of the
                stream is detected, or an exception is thrown.
                unsigned 16-bit integer.
                @exception  EOFException  if this stream reaches the end before reading
                two bytes.
                @exception  IOException   if an I/O error occurs.
            </summary>
            <returns>the next two bytes of this stream, interpreted as an</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.SequenceList">
            <summary>
                This class expands a string into a list of numbers. The main use is to select a
                range of pages.
                The general systax is:
                [!][o][odd][e][even]start-end
                You can have multiple ranges separated by commas ','. The '!' modifier removes the
                range from what is already selected. The range changes are incremental, that is,
                numbers are added or deleted as the range appears. The start or the end, but not both, can be ommited.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.SequenceList.Expand(System.String,System.Int32)">
            <summary>
                Generates a list of numbers from a string.
            </summary>
            <param name="ranges">the comma separated ranges</param>
            <param name="maxNumber">the maximum number in the range</param>
            <returns>a list with the numbers as  Integer </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.ShadingColor">
            <summary>
                Implements a shading pattern as a  Color .
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.SimpleBookmark">
            <summary>
                Bookmark processing in a simple way. It has some limitations, mainly the only
                action types supported are GoTo, GoToR, URI and Launch.
                The list structure is composed by a number of Hashtable, keyed by strings, one Hashtable
                for each bookmark.
                The element values are all strings with the exception of the key "Kids" that has
                another list for the child bookmarks.
                All the bookmarks have a "Title" with the
                bookmark title and optionally a "Style" that can be "bold", "italic" or a
                combination of both. They can also have a "Color" key with a value of three
                floats separated by spaces. The key "Open" can have the values "true" or "false" and
                signals the open status of the children. It's "true" by default.
                The actions and the parameters can be:
                "Action" = "GoTo" - "Page" | "Named"
                "Page" = "3 XYZ 70 400 null" - page number followed by a destination (/XYZ is also accepted)
                "Named" = "named_destination"
                "Action" = "GoToR" - "Page" | "Named" | "NamedN", "File", ["NewWindow"]
                "Page" = "3 XYZ 70 400 null" - page number followed by a destination (/XYZ is also accepted)
                "Named" = "named_destination_as_a_string"
                "NamedN" = "named_destination_as_a_name"
                "File" - "the_file_to_open"
                "NewWindow" - "true" or "false"
                "Action" = "URI" - "URI"
                "URI" = "http://sf.net" - URI to jump to
                "Action" = "Launch" - "File"
                "File" - "the_file_to_open_or_execute"
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.#ctor">
            <summary>
                Creates a new instance of SimpleBookmark
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.EliminatePages(System.Collections.Generic.IList{System.util.INullValueDictionary{System.String,System.Object}},System.Int32[])">
            <summary>
                Removes the bookmark entries for a number of page ranges. The page ranges
                consists of a number of pairs with the start/end page range. The page numbers
                are inclusive.
            </summary>
            <param name="list">the bookmarks</param>
            <param name="pageRange">the page ranges, always in pairs.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXml(System.Collections.Generic.IList{System.util.INullValueDictionary{System.String,System.Object}},System.IO.Stream,System.String,System.Boolean)">
            <summary>
                Exports the bookmarks to XML. The DTD for this XML is:
                &lt;?xml version='1.0' encoding='UTF-8'?&gt;
                &lt;!ELEMENT Title (#PCDATA|Title)*&gt;
                &lt;!ATTLIST Title
                Action CDATA #IMPLIED
                Open CDATA #IMPLIED
                Page CDATA #IMPLIED
                URI CDATA #IMPLIED
                File CDATA #IMPLIED
                Named CDATA #IMPLIED
                NamedN CDATA #IMPLIED
                NewWindow CDATA #IMPLIED
                Style CDATA #IMPLIED
                Color CDATA #IMPLIED
                &gt;
                &lt;!ELEMENT Bookmark (Title)*&gt;
                whatever the encoding
                @throws IOException on error
            </summary>
            <param name="list">the bookmarks</param>
            <param name="outp">the export destination. The stream is not closed</param>
            <param name="encoding">the encoding according to IANA conventions</param>
            <param name="onlyAscii">codes above 127 will always be escaped with &amp;#nn; if  true ,</param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXml(System.Collections.Generic.IList{System.util.INullValueDictionary{System.String,System.Object}},System.IO.TextWriter,System.String,System.Boolean)">
            <summary>
                Exports the bookmarks to XML.
                whatever the encoding
                @throws IOException on error
            </summary>
            <param name="list">the bookmarks</param>
            <param name="wrt">the export destination. The writer is not closed</param>
            <param name="encoding">the encoding according to IANA conventions</param>
            <param name="onlyAscii">codes above 127 will always be escaped with &amp;#nn; if  true ,</param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXmlNode(System.Collections.Generic.IList{System.util.INullValueDictionary{System.String,System.Object}},System.IO.TextWriter,System.Int32,System.Boolean)">
            <summary>
                Exports the bookmarks to XML. Only of use if the generation is to be include in
                some other XML document.
                whatever the encoding
                @throws IOException on error
            </summary>
            <param name="list">the bookmarks</param>
            <param name="outp">the export destination. The writer is not closed</param>
            <param name="indent">the indentation level. Pretty printing significant only</param>
            <param name="onlyAscii">codes above 127 will always be escaped with &amp;#nn; if  true ,</param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.GetBookmark(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Gets a  List  with the bookmarks. It returns  null  if
                the document doesn't have any bookmarks.
                document doesn't have any
            </summary>
            <param name="reader">the document</param>
            <returns>a  List  with the bookmarks or  null  if the</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ImportFromXml(System.IO.Stream)">
            <summary>
                Import the bookmarks from XML.
                @throws IOException on error
            </summary>
            <param name="inp">the XML source. The stream is not closed</param>
            <returns>the bookmarks</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ImportFromXml(System.IO.TextReader)">
            <summary>
                Import the bookmarks from XML.
                @throws IOException on error
            </summary>
            <param name="inp">the XML source. The reader is not closed</param>
            <returns>the bookmarks</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ShiftPageNumbers(System.Collections.Generic.IList{System.util.INullValueDictionary{System.String,System.Object}},System.Int32,System.Int32[])">
            <summary>
                For the pages in range add the  pageShift  to the page number.
                The page ranges
                consists of a number of pairs with the start/end page range. The page numbers
                are inclusive.
                to include all the pages
            </summary>
            <param name="list">the bookmarks</param>
            <param name="pageShift">the number to add to the pages in range</param>
            <param name="pageRange">the page ranges, always in pairs. It can be  null </param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.getNumber(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Gets number of indirect. If type of directed indirect is PAGES, it refers PAGE object through KIDS.
                (Contributed by Kazuya Ujihara)
                2004-06-13
            </summary>
            <param name="indirect"></param>
        </member>
        <member name="T:iTextSharp.text.pdf.SimpleNamedDestination">
            <summary>
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ExportToXml(System.util.INullValueDictionary{System.String,System.String},System.IO.Stream,System.String,System.Boolean)">
            <summary>
                Exports the destinations to XML. The DTD for this XML is:
                &lt;?xml version='1.0' encoding='UTF-8'?&gt;
                &lt;!ELEMENT Name (#PCDATA)&gt;
                &lt;!ATTLIST Name
                Page CDATA #IMPLIED
                &gt;
                &lt;!ELEMENT Destination (Name)*&gt;
                whatever the encoding
                @throws IOException on error
            </summary>
            <param name="names">the names</param>
            <param name="outp">the export destination. The stream is not closed</param>
            <param name="encoding">the encoding according to IANA conventions</param>
            <param name="onlyAscii">codes above 127 will always be escaped with &amp;#nn; if  true ,</param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ExportToXml(System.util.INullValueDictionary{System.String,System.String},System.IO.TextWriter,System.String,System.Boolean)">
            <summary>
                Exports the bookmarks to XML.
                whatever the encoding
                @throws IOException on error
            </summary>
            <param name="names">the names</param>
            <param name="wrt">the export destination. The writer is not closed</param>
            <param name="encoding">the encoding according to IANA conventions</param>
            <param name="onlyAscii">codes above 127 will always be escaped with &amp;#nn; if  true ,</param>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ImportFromXml(System.IO.Stream)">
            <summary>
                Import the names from XML.
                @throws IOException on error
            </summary>
            <param name="inp">the XML source. The stream is not closed</param>
            <returns>the names</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ImportFromXml(System.IO.TextReader)">
            <summary>
                Import the names from XML.
                @throws IOException on error
            </summary>
            <param name="inp">the XML source. The reader is not closed</param>
            <returns>the names</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.SpotColor">
            <summary>
                @author  psoares
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.StampContent">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.StampContent.#ctor(iTextSharp.text.pdf.PdfStamperImp,iTextSharp.text.pdf.PdfStamperImp.PageStamp)">
            <summary>
                Creates a new instance of StampContent
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.StampContent.Duplicate">
            <summary>
                Gets a duplicate of this  PdfContentByte . All
                the members are copied by reference but the buffer stays different.
            </summary>
            <returns>a copy of this  PdfContentByte </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.TextField">
            <summary>
                Supports text, combo and list fields generating the correct appearances.
                All the option in the Acrobat GUI are supported in an easy to use API.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TextField._choiceExports">
            <summary>
                Holds value of property choiceExports.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TextField._choices">
            <summary>
                Holds value of property choices.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TextField._choiceSelection">
            <summary>
                Holds value of property choiceSelection.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TextField._defaultText">
            <summary>
                Holds value of property defaultText.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TextField._extensionFont">
            <summary>
                Holds value of property extensionFont.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TextField._substitutionFonts">
            <summary>
                Holds value of property substitutionFonts.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            <summary>
                Creates a new  TextField .
                will be included in the field allowing it to be used as a kid field.
            </summary>
            <param name="writer">the document  PdfWriter </param>
            <param name="box">the field location and dimensions</param>
            <param name="fieldName">the field name. If  null  only the widget keys</param>
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ChoiceExports">
            <summary>
                Sets the export values in list/combo fields. If this array
                is  null  then the choice values will also be used
                as the export values.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.Choices">
            <summary>
                Sets the choices to be presented to the user in list/combo
                fields.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ChoiceSelection">
            <summary>
                Sets the zero based index of the selected item.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.DefaultText">
            <summary>
                Sets the default text. It is only meaningful for text fields.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ExtensionFont">
            <summary>
                Sets the extensionFont. This font will be searched before the
                substitution fonts. It may be  null .
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.SubstitutionFonts">
            <summary>
                Sets a list of substitution fonts. The list is composed of  BaseFont  and can also be  null . The fonts in this
                list will be used if the original
                font doesn't contain the needed glyphs.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.ObfuscatePassword(System.String)">
            <summary>
                Obfuscates a password  String .
                Every character is replaced by an asterisk (*).
                @since   2.1.5
            </summary>
            <param name="text"></param>
            <returns>String</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetAppearance">
            <summary>
                Get the  PdfAppearance  of a text or combo field
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>A  PdfAppearance </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetComboField">
            <summary>
                Gets a new combo field.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>a new combo field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetListField">
            <summary>
                Gets a new list field.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>a new list field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetTextField">
            <summary>
                Gets a new text field.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>a new text field</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.SetExtraMargin(System.Single,System.Single)">
            <summary>
                Sets extra margins in text fields to better mimic the Acrobat layout.
            </summary>
            <param name="extraMarginLeft">the extra marging left</param>
            <param name="extraMarginTop">the extra margin top</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetListAppearance">
            <summary>
                Get the  PdfAppearance  of a list field
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>A  PdfAppearance </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont">
            <summary>
                Reads a Truetype font
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.CodePages">
            <summary>
                The code pages possible for a True Type font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.allNameEntries">
            <summary>
                All the names auf the Names-Table
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Cmap10">
            <summary>
                The map containing the code information for the table 'cmap', encoding 1.0.
                The key is the code and the value is an  int[2]  where position 0
                is the glyph number and position 1 is the glyph width normalized to 1000
                units.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Cmap31">
            <summary>
                The map containing the code information for the table 'cmap', encoding 3.1
                in Unicode.
                The key is the code and the value is an  int [2] where position 0
                is the glyph number and position 1 is the glyph width normalized to 1000
                units.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.CmapExt">
            <summary>
                By James for unicode Ext.B
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.DirectoryOffset">
            <summary>
                The offset from the start of the file to the table directory.
                It is 0 for TTF and may vary for TTC depending on the chosen font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FamilyName">
            <summary>
                The family name of the font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FileName">
            <summary>
                The file name.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontName">
            <summary>
                The font name.
                This name is usually extracted from the table 'name' with
                the 'Name ID' 6.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FullName">
            <summary>
                The full name of the font
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.GlyphWidths">
            <summary>
                The width of the glyphs. This is essentially the content of table
                'hmtx' normalized to 1000 units.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Head">
            <summary>
                The content of table 'head'.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Hhea">
            <summary>
                The content of table 'hhea'.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.IsFixedPitch">
            <summary>
                true  if all the glyphs have the same width.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.ItalicAngle">
            <summary>
                The italic angle. It is usually extracted from the 'post' table or in it's
                absence with the code:
                -Math.Atan2(hhea.caretSlopeRun, hhea.caretSlopeRise) * 180 / Math.PI
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Kerning">
            <summary>
                The map containing the kerning information. It represents the content of
                table 'kern'. The key is an  Integer  where the top 16 bits
                are the glyph number for the first character and the lower 16 bits are the
                glyph number for the second character. The value is the amount of kerning in
                normalized 1000 units as an  Integer . This value is usually negative.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Os2">
            <summary>
                The content of table 'OS/2'.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Rf">
            <summary>
                The file in use.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Style">
            <summary>
                The style modifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.Tables">
            <summary>
                Contains the location of the several tables. The key is the name of
                the table and the value is an  int[2]  where position 0
                is the offset from the start of the file and position 1 is the length
                of the table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.TtcIndex">
            <summary>
                The index for the TTC font. It is an empty  string  for a
                TTF file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
                Creates a new TrueType font.
                '.ttc' but can have modifiers after the name
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
            <param name="ttFile">the location of the font on file. The file must end in '.ttf' or</param>
            <param name="enc">the encoding to be applied to this font</param>
            <param name="emb">true if the font is to be embedded in the PDF</param>
            <param name="ttfAfm">the font as a  byte  array</param>
            <param name="justNames"></param>
            <param name="forceRead"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.#ctor">
            <summary>
                This constructor is present to allow extending the class.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.AllNameEntries">
            <summary>
                Gets all the entries of the Names-Table. If it is a True Type font
                each array element will have {Name ID, Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.CodePagesSupported">
            <summary>
                Gets the code pages supported by the font.
            </summary>
            <returns>the code pages supported by the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.FamilyFontName">
            <summary>
                Gets the family name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the family name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.FullFontName">
            <summary>
                Gets the full name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.PostscriptFontName">
            <summary>
                Gets the postscript font name.
            </summary>
            <returns>the postscript font name</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.BaseFont">
            <summary>
                Gets the Postscript font name.
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
            <returns>the Postscript font name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontDescriptor(System.Int32,System.Single)">
            <summary>
                Gets the font parameter identified by  key . Valid values
                for  key  are  ASCENT ,  CAPHEIGHT ,  DESCENT
                and  ITALICANGLE .
            </summary>
            <param name="key">the parameter to be extracted</param>
            <param name="fontSize">the font size in points</param>
            <returns>the parameter in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFullFontStream">
            <summary>
                Returns a PdfStream object with the full font program.
                @since   2.1.3
            </summary>
            <returns>a PdfStream with the font program</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetKerning(System.Int32,System.Int32)">
            <summary>
                Gets the kerning between two Unicode chars.
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <returns>the kerning to be applied</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetMetricsTt(System.Int32)">
            <summary>
                Gets the glyph index and metrics for a character.
            </summary>
            <param name="c">the character</param>
            <returns>an  int  array with {glyph index, width}</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.HasKernPairs">
            <summary>
                Checks if the font has any kerning pairs.
            </summary>
            <returns> true  if the font has any kerning pairs</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.SetKerning(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the kerning between two Unicode chars.
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <param name="kern">the kerning to apply in normalized 1000 units</param>
            <returns> true  if the kerning was applied,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.FillTables">
            <summary>
                Reads the tables 'head', 'hhea', 'OS/2' and 'post' filling several variables.
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetAllNames">
            <summary>
                Extracts all the names of the names-Table
                @throws DocumentException on error
                @throws IOException on error
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetNames(System.Int32)">
            <summary>
                Extracts the names of the font in all the languages available.
                @throws DocumentException on error
                @throws IOException on error
            </summary>
            <param name="id">the name id to retrieve</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetRawWidth(System.Int32,System.String)">
            <summary>
                Gets the width from the font according to the unicode char  c .
                If the  name  is null it's a symbolic font.
            </summary>
            <param name="c">the unicode char</param>
            <param name="name">the glyph name</param>
            <returns>the width of the char</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.Process(System.Byte[],System.Boolean)">
            <summary>
                Reads the font data.
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
            <param name="ttfAfm">the font as a  byte  array, possibly  null </param>
            <param name="preload"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadCMaps">
            <summary>
                Reads the several maps from the table 'cmap'. The maps of interest are 1.0 for symbolic
                fonts and 3.1 for all others. A symbolic font is defined as having the map 3.0.
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat0">
            <summary>
                The information in the maps of the table 'cmap' is coded in several formats.
                Format 0 is the Apple standard character to glyph index mapping table.
                @throws IOException the font file could not be read
            </summary>
            <returns>a  Hashtable  representing this map</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat4">
            <summary>
                The information in the maps of the table 'cmap' is coded in several formats.
                Format 4 is the Microsoft standard character to glyph index mapping table.
                @throws IOException the font file could not be read
            </summary>
            <returns>a  Hashtable  representing this map</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat6">
            <summary>
                The information in the maps of the table 'cmap' is coded in several formats.
                Format 6 is a trimmed table mapping. It is similar to format 0 but can have
                less than 256 entries.
                @throws IOException the font file could not be read
            </summary>
            <returns>a  Hashtable  representing this map</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadKerning">
            <summary>
                Reads the kerning information from the 'kern' table.
                @throws IOException the font file could not be read
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            <summary>
                Outputs to the writer the font dictionaries and streams.
                @throws IOException on error
                @throws DocumentException error in generating the object
            </summary>
            <param name="writer">the writer for this document</param>
            <param name="piref">the font indirect reference</param>
            <param name="parms">several parameters that depend on the font type</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadCffFont">
            <summary>
                If this font file is using the Compact Font File Format, then this method
                will return the raw bytes needed for the font stream. If this method is
                ever made public: make sure to add a test if (cff == true).
                @since   2.1.3
            </summary>
            <returns>a byte array</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetTtcName(System.String)">
            <summary>
                Gets the name from a composed TTC file name.
                If I have for input "myfont.ttc,2" the return will
                be "myfont.ttc".
            </summary>
            <param name="name">the full name</param>
            <returns>the simple file name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.String,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Generates the font dictionary for this font.
                @throws DocumentException if there is an error
            </summary>
            <param name="subsetPrefix">the subset prefx</param>
            <param name="firstChar">the first valid character</param>
            <param name="lastChar">the last valid character</param>
            <param name="shortTag">a 256 bytes long  byte  array where each unused byte is represented by 0</param>
            <param name="fontDescriptor">the indirect reference to a PdfDictionary containing the font descriptor or  null </param>
            <returns>the PdfDictionary containing the font dictionary</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontDescriptor(iTextSharp.text.pdf.PdfIndirectReference,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Generates the font descriptor for this font.
                @throws DocumentException if there is an error
            </summary>
            <param name="subsetPrefix">the subset prefix</param>
            <param name="fontStream">the indirect reference to a PdfStream containing the font or  null </param>
            <param name="cidset"></param>
            <returns>the PdfDictionary containing the font descriptor or  null </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetGlyphWidth(System.Int32)">
            <summary>
                Gets a glyph width.
            </summary>
            <param name="glyph">the glyph to get the width of</param>
            <returns>the width of the glyph in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadGlyphWidths">
            <summary>
                Reads the glyphs widths. The widths are extracted from the table 'hmtx'.
                The glyphs are normalized to 1000 units.
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadStandardString(System.Int32)">
            <summary>
                Reads a  string  from the font file as bytes using the Cp1252
                encoding.
                @throws IOException the font file could not be read
            </summary>
            <param name="length">the length of bytes to read</param>
            <returns>the  string  read</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadUnicodeString(System.Int32)">
            <summary>
                Reads a Unicode  string  from the font file. Each character is
                represented by two bytes.
                characters
                @throws IOException the font file could not be read
            </summary>
            <param name="length">the length of bytes to read. The  string  will have  length /2</param>
            <returns>the  string  read</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.FontHeader">
            <summary>
                The components of table 'head'.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.Flags">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.MacStyle">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.UnitsPerEm">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.XMax">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.XMin">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.YMax">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.YMin">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader">
            <summary>
                The components of table 'hhea'.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.AdvanceWidthMax">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.Ascender">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.CaretSlopeRise">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.CaretSlopeRun">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.Descender">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.LineGap">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.MinLeftSideBearing">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.MinRightSideBearing">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.NumberOfHMetrics">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.XMaxExtent">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics">
            <summary>
                The components of table 'OS/2'.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.AchVendId">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.FsSelection">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.FsType">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.Panose">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.SCapHeight">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.SFamilyClass">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.STypoAscender">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.STypoDescender">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.STypoLineGap">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UlCodePageRange1">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UlCodePageRange2">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UsFirstCharIndex">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UsLastCharIndex">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UsWeightClass">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UsWidthClass">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UsWinAscent">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.UsWinDescent">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.XAvgCharWidth">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YStrikeoutPosition">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YStrikeoutSize">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSubscriptXOffset">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSubscriptXSize">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSubscriptYOffset">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSubscriptYSize">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSuperscriptXOffset">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSuperscriptXSize">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSuperscriptYOffset">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.YSuperscriptYSize">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFontSubSet">
            <summary>
                Subsets a True Type font by removing the unneeded glyphs from
                the font.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.FileName">
            <summary>
                The file name.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.Rf">
            <summary>
                The file in use.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.TableDirectory">
            <summary>
                Contains the location of the several tables. The key is the name of
                the table and the value is an  int[3]  where position 0
                is the checksum, position 1 is the offset from the start of the file
                and position 2 is the length of the table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.#ctor(System.String,iTextSharp.text.pdf.RandomAccessFileOrArray,System.util.INullValueDictionary{System.Int32,System.Int32[]},System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Creates a new TrueTypeFontSubSet
            </summary>
            <param name="directoryOffset">The offset from the start of the file to the table directory</param>
            <param name="fileName">the file name of the font</param>
            <param name="rf"></param>
            <param name="glyphsUsed">the glyphs used</param>
            <param name="includeCmap"> true  if the table cmap is to be included in the generated font</param>
            <param name="includeExtras"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.Process">
            <summary>
                Does the actual work of subsetting the font.
                @throws IOException on error
                @throws DocumentException on error
            </summary>
            <returns>the subset font</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.ReadStandardString(System.Int32)">
            <summary>
                Reads a  string  from the font file as bytes using the Cp1252
                encoding.
                @throws IOException the font file could not be read
            </summary>
            <param name="length">the length of bytes to read</param>
            <returns>the  string  read</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFontUnicode">
            <summary>
                Represents a True Type font with Unicode encoding. All the character
                in the font can be used directly by using the encoding Identity-H or
                Identity-V. This is the only way to represent some character sets such
                as Thai.
                @author  Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontUnicode._vertical">
            <summary>
                true  if the encoding is vertical.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Boolean)">
            <summary>
                Creates a new TrueType font addressed by Unicode characters. The font
                will always be embedded.
                The modifiers after the name are ignored.
                @throws DocumentException the font is invalid
                @throws IOException the font file could not be read
            </summary>
            <param name="ttFile">the location of the font on file. The file must end in '.ttf'.</param>
            <param name="enc">the encoding to be applied to this font</param>
            <param name="emb">true if the font is to be embedded in the PDF</param>
            <param name="ttfAfm">the font as a  byte  array</param>
            <param name="forceRead"></param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.Compare(System.Int32[],System.Int32[])">
            <summary>
                The method used to sort the metrics array.
            </summary>
            <param name="o1">the first element</param>
            <param name="o2">the second element</param>
            <returns>the comparisation</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.CharExists(System.Int32)">
            <summary>
                Checks if a character exists in this font.
                false  otherwise
            </summary>
            <param name="c">the character to check</param>
            <returns> true  if the character has a glyph,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetFullFontStream">
            <summary>
                Returns a PdfStream object with the full font program.
                @since   2.1.3
            </summary>
            <returns>a PdfStream with the font program</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetMetricsTt(System.Int32)">
            <summary>
                Gets the glyph index and metrics for a character.
            </summary>
            <param name="c">the character</param>
            <returns>an  int  array with {glyph index, width}</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetWidth(System.Int32)">
            <summary>
                Gets the width of a  char  in normalized 1000 units.
            </summary>
            <param name="char1">the unicode  char  to get the width of</param>
            <returns>the width in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetWidth(System.String)">
            <summary>
                Gets the width of a  string  in normalized 1000 units.
            </summary>
            <param name="text">the  string  to get the witdth of</param>
            <returns>the width in normalized 1000 units</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.SetCharAdvance(System.Int32,System.Int32)">
            <summary>
                Sets the character advance.
                false  otherwise
            </summary>
            <param name="c">the character</param>
            <param name="advance">the character advance normalized to 1000 units</param>
            <returns> true  if the advance was set,</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.ToHex(System.Int32)">
            <summary>
                Gets an hex string in the format "&lt;HHHH&gt;".
            </summary>
            <param name="n">the number</param>
            <returns>the hex string</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.ConvertToBytes(System.String)">
            <summary>
                A forbidden operation. Will throw a null pointer exception.
            </summary>
            <param name="text">the text</param>
            <returns>always  null </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            <summary>
                Outputs to the writer the font dictionaries and streams.
                @throws IOException on error
                @throws DocumentException error in generating the object
            </summary>
            <param name="writer">the writer for this document</param>
            <param name="piref">the font indirect reference</param>
            <param name="parms">several parameters that depend on the font type</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.getCidFontType2(iTextSharp.text.pdf.PdfIndirectReference,System.String,System.Object[])">
            <summary>
                Generates the CIDFontTyte2 dictionary.
            </summary>
            <param name="fontDescriptor">the indirect reference to the font descriptor</param>
            <param name="subsetPrefix">the subset prefix</param>
            <param name="metrics">the horizontal width metrics</param>
            <returns>a stream</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.getFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Generates the font dictionary.
            </summary>
            <param name="descendant">the descendant dictionary</param>
            <param name="subsetPrefix">the subset prefix</param>
            <param name="toUnicode">the ToUnicode stream</param>
            <returns>the stream</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.getToUnicode(System.Object[])">
            <summary>
                Creates a ToUnicode CMap to allow copy and paste from Acrobat.
                contains the Unicode code
                @throws DocumentException on error
            </summary>
            <param name="metrics">metrics[0] contains the glyph index and metrics[2]</param>
            <returns>the stream representing this CMap or  null </returns>
        </member>
        <member name="T:iTextSharp.text.pdf.TsaClientBouncyCastle">
            <summary>
                Time Stamp Authority Client interface implementation using Bouncy Castle
                org.bouncycastle.tsp package.
                Created by Aiken Sam, 2006-11-15, refactored by Martin Brunecky, 07/15/2007
                for ease of subclassing.
                @since	2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TsaClientBouncyCastle.TokSzEstimate">
            <summary>
                Estimate of the received time stamp token
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TsaClientBouncyCastle.TsaPassword">
            <summary>
                TSA password
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TsaClientBouncyCastle.TsaUrl">
            <summary>
                URL of the Time Stamp Authority
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TsaClientBouncyCastle.TsaUsername">
            <summary>
                TSA Username
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.#ctor(System.String)">
            <summary>
                Creates an instance of a TSAClient that will use BouncyCastle.
            </summary>
            <param name="url">String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates an instance of a TSAClient that will use BouncyCastle.
            </summary>
            <param name="url">String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")</param>
            <param name="username">String - user(account) name</param>
            <param name="password">String - password</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
                Constructor.
                Note the token size estimate is updated by each call, as the token
                size is not likely to change (as long as we call the same TSA using
                the same imprint length).
            </summary>
            <param name="url">String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")</param>
            <param name="username">String - user(account) name</param>
            <param name="password">String - password</param>
            <param name="tokSzEstimate">int - estimated size of received time stamp token (DER encoded)</param>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.GetTimeStampToken(iTextSharp.text.pdf.PdfPkcs7,System.Byte[])">
            <summary>
                Get RFC 3161 timeStampToken.
                Method may return null indicating that timestamp should be skipped.
                @throws Exception - TSA request failed
                @see com.lowagie.text.pdf.TSAClient#getTimeStampToken(com.lowagie.text.pdf.PdfPKCS7, byte[])
            </summary>
            <param name="caller">PdfPKCS7 - calling PdfPKCS7 instance (in case caller needs it)</param>
            <param name="imprint">byte[] - data imprint to be time-stamped</param>
            <returns>byte[] - encoded, TSA signed data of the timeStampToken</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.GetTokenSizeEstimate">
            <summary>
                Get the token size estimate.
                Returned value reflects the result of the last succesfull call, padded
            </summary>
            <returns>an estimate of the token size</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.GetTimeStampToken(System.Byte[])">
            <summary>
                Get timestamp token - Bouncy Castle request encoding / decoding layer
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.TsaClientBouncyCastle.GetTsaResponse(System.Byte[])">
            <summary>
                Get timestamp token - communications layer
            </summary>
            <returns>- byte[] - TSA response, raw bytes (RFC 3161 encoded)</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.Type1Font">
            <summary>
                Reads a Type1 font
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._pfbTypes">
            <summary>
                Types of records in a PFB file. ASCII is 1 and BINARY is 2.
                They have to appear in the PFB file in this sequence.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._builtinFont">
            <summary>
                true  if this font is one of the 14 built in fonts.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._charMetrics">
            <summary>
                Represents the section CharMetrics in the AFM file. Each
                value of this array contains a  Object[4]  with an
                Integer, Integer, String and int[]. This is the code, width, name and char bbox.
                The key is the name of the char and also an Integer with the char number.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._fileName">
            <summary>
                The file in use.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._kernPairs">
            <summary>
                Represents the section KernPairs in the AFM file. The key is
                the name of the first character and the value is a  Object[]
                with 2 elements for each kern pair. Position 0 is the name of
                the second character and position 1 is the kerning distance. This is
                repeated for all the pairs.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._ascender">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._capHeight">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._characterSet">
            <summary>
                The character set of the font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._descender">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._encodingScheme">
            <summary>
                The font's encoding name. This encoding is 'StandardEncoding' or
                'AdobeStandardEncoding' for a font that can be totally encoded
                according to the characters names. For all other names the
                font is treated as symbolic.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._familyName">
            <summary>
                The family name of the font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._fontName">
            <summary>
                The Postscript font name.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._fullName">
            <summary>
                The full name of the font.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._isFixedPitch">
            <summary>
                true  if all the characters have the same
                width.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._italicAngle">
            <summary>
                The italic angle of the font, usually 0.0 or negative.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._llx">
            <summary>
                The llx of the FontBox.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._lly">
            <summary>
                The lly of the FontBox.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._stdHw">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._stdVw">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._underlinePosition">
            <summary>
                The underline position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._underlineThickness">
            <summary>
                The underline thickness.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._urx">
            <summary>
                The lurx of the FontBox.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._ury">
            <summary>
                The ury of the FontBox.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._weight">
            <summary>
                The weight of the font: normal, bold, etc.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font._xHeight">
            <summary>
                A variable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Pfb">
            <summary>
                The PFB file if the input was made with a  byte  array.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
                Creates a new Type1 font.
                @throws DocumentException the AFM file is invalid
                @throws IOException the AFM file could not be read
            </summary>
            <param name="ttfAfm">the AFM file if the input is made with a  byte  array</param>
            <param name="pfb">the PFB file if the input is made with a  byte  array</param>
            <param name="afmFile">
                the name of one of the 14 built-in fonts or the location of an AFM file. The file must end in
                '.afm'
            </param>
            <param name="enc">the encoding to be applied to this font</param>
            <param name="emb">true if the font is to be embedded in the PDF</param>
            <param name="forceRead"></param>
        </member>
        <member name="P:iTextSharp.text.pdf.Type1Font.AllNameEntries">
            <summary>
                Gets all the entries of the names-table. If it is a True Type font
                each array element will have {Name ID, Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"4", "", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Type1Font.FamilyFontName">
            <summary>
                Gets the family name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the family name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Type1Font.FullFontName">
            <summary>
                Gets the full name of the font. If it is a True Type font
                each array element will have {Platform ID, Platform Encoding ID,
                Language ID, font name}. The interpretation of this values can be
                found in the Open Type specification, chapter 2, in the 'name' table.
                For the other fonts the array has a single element with {"", "", "",
                font name}.
            </summary>
            <returns>the full name of the font</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.Type1Font.PostscriptFontName">
            <summary>
                Gets the postscript font name.
            </summary>
            <returns>the postscript font name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontDescriptor(iTextSharp.text.pdf.PdfIndirectReference)">
            <summary>
                Generates the font descriptor for this font or  null  if it is
                one of the 14 built in fonts.
            </summary>
            <param name="fontStream">the indirect reference to a PdfStream containing the font or  null </param>
            <returns>the PdfDictionary containing the font descriptor or  null </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontDescriptor(System.Int32,System.Single)">
            <summary>
                Gets the font parameter identified by  key . Valid values
                for  key  are  ASCENT ,  CAPHEIGHT ,  DESCENT ,
                ITALICANGLE ,  BBOXLLX ,  BBOXLLY ,  BBOXURX
                and  BBOXURY .
            </summary>
            <param name="key">the parameter to be extracted</param>
            <param name="fontSize">the font size in points</param>
            <returns>the parameter in points</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFullFontStream">
            <summary>
                If the embedded flag is  false  or if the font is
                one of the 14 built in types, it returns  null ,
                otherwise the font is read and output in a PdfStream object.
                @throws DocumentException if there is an error reading the font
            </summary>
            <returns>the PdfStream containing the font or  null </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetKerning(System.Int32,System.Int32)">
            <summary>
                Gets the kerning between two Unicode characters. The characters
                are converted to names and this names are used to find the kerning
                pairs in the  Hashtable   KernPairs .
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <returns>the kerning to be applied</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.HasKernPairs">
            <summary>
                Checks if the font has any kerning pairs.
            </summary>
            <returns> true  if the font has any kerning pairs</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.Process(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            <summary>
                Reads the font metrics
                @throws DocumentException the AFM file is invalid
                @throws IOException the AFM file could not be read
            </summary>
            <param name="rf">the AFM file</param>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.SetKerning(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the kerning between two Unicode chars.
            </summary>
            <param name="char1">the first char</param>
            <param name="char2">the second char</param>
            <param name="kern">the kerning to apply in normalized 1000 units</param>
            <returns> true  if the kerning was applied,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetRawWidth(System.Int32,System.String)">
            <summary>
                Gets the width from the font according to the  name  or,
                if the  name  is null, meaning it is a symbolic font,
                the char  c .
            </summary>
            <param name="c">the char if the font is symbolic</param>
            <param name="name">the glyph name</param>
            <returns>the width of the char</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            <summary>
                Outputs to the writer the font dictionaries and streams.
                @throws IOException on error
                @throws DocumentException error in generating the object
            </summary>
            <param name="writer">the writer for this document</param>
            <param name="piref">the font indirect reference</param>
            <param name="parms">several parameters that depend on the font type</param>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.getFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Generates the font dictionary for this font.
            </summary>
            <param name="firstChar">the first valid character</param>
            <param name="lastChar">the last valid character</param>
            <param name="shortTag">a 256 bytes long  byte  array where each unused byte is represented by 0</param>
            <param name="fontDescriptor">the indirect reference to a PdfDictionary containing the font descriptor or  null </param>
            <returns>the PdfDictionary containing the font dictionary</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.Type3Font">
            <summary>
                A class to support Type3 fonts.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.Type3Font.#ctor(iTextSharp.text.pdf.PdfWriter,System.Char[],System.Boolean)">
            <summary>
                Creates a Type3 font.
                and only images as masks can be used
            </summary>
            <param name="writer">the writer</param>
            <param name="chars">an array of chars corresponding to the glyphs used (not used, prisent for compability only)</param>
            <param name="colorized">if  true  the font may specify color, if  false  no color commands are allowed</param>
        </member>
        <member name="M:iTextSharp.text.pdf.Type3Font.#ctor(iTextSharp.text.pdf.PdfWriter,System.Boolean)">
            <summary>
                Creates a Type3 font. This implementation assumes that the /FontMatrix is
                [0.001 0 0 0.001 0 0] or a 1000-unit glyph coordinate system.
                An example:
                Document document = new Document(PageSize.A4);
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("type3.pdf"));
                document.open();
                Type3Font t3 = new Type3Font(writer, false);
                PdfContentByte g = t3.defineGlyph('a', 1000, 0, 0, 750, 750);
                g.rectangle(0, 0, 750, 750);
                g.fill();
                g = t3.defineGlyph('b', 1000, 0, 0, 750, 750);
                g.moveTo(0, 0);
                g.lineTo(375, 750);
                g.lineTo(750, 0);
                g.fill();
                Font f = new Font(t3, 12);
                document.add(new Paragraph("ababab", f));
                document.close();
                and only images as masks can be used
            </summary>
            <param name="writer">the writer</param>
            <param name="colorized">if  true  the font may specify color, if  false  no color commands are allowed</param>
        </member>
        <member name="M:iTextSharp.text.pdf.Type3Font.DefineGlyph(System.Char,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Defines a glyph. If the character was already defined it will return the same content
                true  the value is ignored
                true  the value is ignored
                true  the value is ignored
                true  the value is ignored
            </summary>
            <param name="c">the character to match this glyph.</param>
            <param name="wx">the advance this character will have</param>
            <param name="llx">the X lower left corner of the glyph bounding box. If the  colorize  option is</param>
            <param name="lly">the Y lower left corner of the glyph bounding box. If the  colorize  option is</param>
            <param name="urx">the X upper right corner of the glyph bounding box. If the  colorize  option is</param>
            <param name="ury">the Y upper right corner of the glyph bounding box. If the  colorize  option is</param>
            <returns>a content where the glyph can be defined</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.Type3Font.GetFullFontStream">
            <summary>
                Always returns null, because you can't get the FontStream of a Type3 font.
                @since   2.1.3
            </summary>
            <returns>null</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.Type3Glyph">
            <summary>
                The content where Type3 glyphs are written to.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.VerticalText">
            <summary>
                Writes text vertically. Note that the naming is done according
                to horizontal text although it referrs to vertical text.
                A line with the alignment Element.LEFT_ALIGN will actually
                be top aligned.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.NoMoreColumn">
            <summary>
                Signals that there is no more column.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.NoMoreText">
            <summary>
                Signals that there are no more text available.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.alignment">
            <summary>
                The column Element. Default is left Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.Chunks">
            <summary>
                The chunks that form the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.CurrentChunkMarker">
            <summary>
                Marks the chunks to be eliminated when the line is written.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.CurrentStandbyChunk">
            <summary>
                The chunk created by the splitting.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.height">
            <summary>
                The height of the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.leading">
            <summary>
                The leading
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.maxLines">
            <summary>
                The maximum number of vertical lines.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.SplittedChunkText">
            <summary>
                The chunk created by the splitting.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.StartX">
            <summary>
                The X coordinate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.StartY">
            <summary>
                The Y coordinate.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.Text">
            <summary>
                The  PdfContent  where the text will be written to.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.#ctor(iTextSharp.text.pdf.PdfContentByte)">
            <summary>
                Creates new VerticalText
                be a template.
            </summary>
            <param name="text">the place where the text will be written to. Can</param>
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Alignment">
            <summary>
                Gets the Element.
            </summary>
            <returns>the alignment</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Height">
            <summary>
                Gets the height of the line
            </summary>
            <returns>the height</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Leading">
            <summary>
                Gets the separation between the vertical lines.
            </summary>
            <returns>the vertical line separation</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.MaxLines">
            <summary>
                Gets the maximum number of available lines. This value will change
                after each call to  go() .
            </summary>
            <returns>Value of property maxLines.</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.OriginX">
            <summary>
                Gets the X coordinate where the next line will be writen. This value will change
                after each call to  go() .
            </summary>
            <returns>the X coordinate</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.OriginY">
            <summary>
                Gets the Y coordinate where the next line will be writen.
            </summary>
            <returns>the Y coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.AddText(iTextSharp.text.Phrase)">
            <summary>
                Adds a  Phrase  to the current text array.
            </summary>
            <param name="phrase">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.AddText(iTextSharp.text.Chunk)">
            <summary>
                Adds a  Chunk  to the current text array.
            </summary>
            <param name="chunk">the text</param>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.Go">
            <summary>
                Outputs the lines to the document. It is equivalent to  go(false) .
                and/or  NO_MORE_COLUMN
                @throws DocumentException on error
            </summary>
            <returns>returns the result of the operation. It can be  NO_MORE_TEXT </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.Go(System.Boolean)">
            <summary>
                Outputs the lines to the document. The output can be simulated.
                and/or  NO_MORE_COLUMN
                @throws DocumentException on error
            </summary>
            <param name="simulate"> true  to simulate the writting to the document</param>
            <returns>returns the result of the operation. It can be  NO_MORE_TEXT </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.SetOrigin(System.Single,System.Single)">
            <summary>
                Sets the new text origin.
            </summary>
            <param name="startX">the X coordinate</param>
            <param name="startY">the Y coordinate</param>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.SetVerticalLayout(System.Single,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Sets the layout.
            </summary>
            <param name="startX">the top right X line position</param>
            <param name="startY">the top right Y line position</param>
            <param name="height">the height of the lines</param>
            <param name="maxLines">the maximum number of lines</param>
            <param name="leading">the separation between the lines</param>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.CreateLine(System.Single)">
            <summary>
                Creates a line from the chunk array.
            </summary>
            <param name="width">the width of the line</param>
            <returns>the line or null if no more chunks</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.ShortenChunkArray">
            <summary>
                Normalizes the list of chunks when the line is accepted.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm">
            <summary>
                Processes XFA forms.
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.#ctor">
            <summary>
                An empty constructor to build on.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.#ctor(iTextSharp.text.pdf.PdfReader)">
            <summary>
                A constructor from a  PdfReader . It basically does everything
                from finding the XFA stream to the XML parsing.
                @throws java.io.IOException on error
                @throws javax.xml.parsers.ParserConfigurationException on error
                @throws org.xml.sax.SAXException on error
            </summary>
            <param name="reader">the reader</param>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.AcroFieldsSom">
            <summary>
                Gets the class that contains the "classic" fields processing.
            </summary>
            <returns>the class that contains the "classic" fields processing</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Changed">
            <summary>
                Checks if this XFA form was changed.
            </summary>
            <returns> true  if this XFA form was changed</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.DatasetsNode">
            <summary>
                Gets the  Node  that corresponds to the datasets part.
            </summary>
            <returns>the  Node  that corresponds to the datasets part</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.DatasetsSom">
            <summary>
                Gets the class that contains the datasets processing section of the XFA.
            </summary>
            <returns>the class that contains the datasets processing section of the XFA</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.DomDocument">
            <summary>
                Gets the top level DOM document.
            </summary>
            <returns>the top level DOM document</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Reader">
            <summary>
                Sets the  PdfReader  to be used by this instance.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.TemplateSom">
            <summary>
                Gets the class that contains the template processing section of the XFA.
            </summary>
            <returns>the class that contains the template processing section of the XFA</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.XfaPresent">
            <summary>
                Returns  true  if it is a XFA form.
            </summary>
            <returns> true  if it is a XFA form</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.GetNodeText(System.Xml.XmlNode)">
            <summary>
                Gets all the text contained in the child nodes of this node.
            </summary>
            <param name="n">the  Node </param>
            <returns>the text found or "" if no text was found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.GetXfaObject(iTextSharp.text.pdf.PdfReader)">
            <summary>
                Return the XFA Object, could be an array, could be a Stream.
                Returns null f no XFA Object is present.
                @since    2.1.3
            </summary>
            <param name="reader">a PdfReader instance</param>
            <returns>the XFA object</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SerializeDoc(System.Xml.XmlNode)">
            <summary>
                Serializes a XML document to a byte array.
                @throws java.io.IOException on error
            </summary>
            <param name="n">the XML document</param>
            <returns>the serialized XML document</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SetXfa(iTextSharp.text.pdf.XfaForm,iTextSharp.text.pdf.PdfReader,iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Sets the XFA key from a byte array. The old XFA is erased.
                @throws java.io.IOException on error
            </summary>
            <param name="form">the data</param>
            <param name="reader">the reader</param>
            <param name="writer">the writer</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.FindDatasetsName(System.String)">
            <summary>
                Finds the complete SOM name contained in the datasets section from a
                possibly partial name.
            </summary>
            <param name="name">the complete or partial name</param>
            <returns>the complete name or  null  if not found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.FindDatasetsNode(System.String)">
            <summary>
                Finds the  Node  contained in the datasets section from a
                possibly partial name.
            </summary>
            <param name="name">the complete or partial name</param>
            <returns>the  Node  or  null  if not found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.FindFieldName(System.String,iTextSharp.text.pdf.AcroFields)">
            <summary>
                Finds the complete field name contained in the "classic" forms from a partial
                name.
            </summary>
            <param name="name">the complete or partial name</param>
            <param name="af">the fields</param>
            <returns>the complete name or  null  if not found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SetNodeText(System.Xml.XmlNode,System.String)">
            <summary>
                Sets the text of this node. All the child's node are deleted and a new
                child text node is created.
            </summary>
            <param name="n">the  Node  to add the text to</param>
            <param name="text">the text to add</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SetXfa(iTextSharp.text.pdf.PdfWriter)">
            <summary>
                Sets the XFA key from the instance data. The old XFA is erased.
                @throws java.io.IOException on error
            </summary>
            <param name="writer">the writer</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.extractNodes">
            <summary>
                Extracts the nodes from the domDocument.
                @since    2.1.5
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.AcroFieldsSearch">
            <summary>
                A class to process "classic" fields.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.AcroFieldsSearch.#ctor(System.Collections.Generic.ICollection{System.String})">
            <summary>
                Creates a new instance from a Collection with the full names.
            </summary>
            <param name="items">the Collection</param>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.AcroFieldsSearch.AcroShort2LongName">
            <summary>
                Gets the mapping from short names to long names. A long
                name may contain the #subform name part.
            </summary>
            <returns>the mapping from short names to long names</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.InverseStore">
            <summary>
                A structure to store each part of a SOM name and link it to the next part
                beginning from the lower hierarchie.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.InverseStore.DefaultName">
            <summary>
                Gets the full name by traversing the hiearchie using only the
                index 0.
            </summary>
            <returns>the full name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.InverseStore.IsSimilar(System.String)">
            <summary>
                Search the current node for a similar name. A similar name starts
                with the same name but has a differnt index. For example, "detail[3]"
                is similar to "detail[9]". The main use is to discard names that
                correspond to out of bounds records.
            </summary>
            <param name="name">the name to search</param>
            <returns> true  if a similitude was found</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Stack2`1">
            <summary>
                Another stack implementation. The main use is to facilitate
                the porting to other languages.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2`1.Empty">
            <summary>
                Tests if this stack is empty.
            </summary>
            <returns> true  if and only if this stack contains no items;  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2`1.Peek">
            <summary>
                Looks at the object at the top of this stack without removing it from the stack.
            </summary>
            <returns>the object at the top of this stack</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2`1.Pop">
            <summary>
                Removes the object at the top of this stack and returns that object as the value of this function.
            </summary>
            <returns>the object at the top of this stack</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2`1.Push(`0)">
            <summary>
                Pushes an item onto the top of this stack.
            </summary>
            <param name="item">the item to be pushed onto this stack</param>
            <returns>the  item  argument</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Xml2Som">
            <summary>
                A class for some basic SOM processing.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.Anform">
            <summary>
                A temporary store for the repetition count.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.inverseSearch">
            <summary>
                The data to do a search from the bottom hierarchie.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.name2Node">
            <summary>
                The mapping of full names to nodes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.order">
            <summary>
                The order the names appear in the XML, depth first.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.Stack">
            <summary>
                A stack to be used when parsing.
            </summary>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearch">
            <summary>
                Gets the data to do a search from the bottom hierarchie.
            </summary>
            <returns>the data to do a search from the bottom hierarchie</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2Som.Name2Node">
            <summary>
                Gets the mapping of full names to nodes.
            </summary>
            <returns>the mapping of full names to nodes</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2Som.Order">
            <summary>
                Gets the order the names appear in the XML, depth first.
            </summary>
            <returns>the order the names appear in the XML, depth first</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.EscapeSom(System.String)">
            <summary>
                Escapes a SOM string fragment replacing "." with "\.".
            </summary>
            <param name="s">the unescaped string</param>
            <returns>the escaped string</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.GetShortName(System.String)">
            <summary>
                Gets the name with the  #subform  removed.
            </summary>
            <param name="s">the long name</param>
            <returns>the short name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearchAdd(System.util.INullValueDictionary{System.String,iTextSharp.text.pdf.XfaForm.InverseStore},iTextSharp.text.pdf.XfaForm.Stack2{System.String},System.String)">
            <summary>
                Adds a SOM name to the search node chain.
            </summary>
            <param name="inverseSearch">the start point</param>
            <param name="stack">the stack with the separeted SOM parts</param>
            <param name="unstack">the full name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.SplitParts(System.String)">
            <summary>
                Splits a SOM name in the individual parts.
            </summary>
            <param name="name">the full SOM name</param>
            <returns>the split name</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.UnescapeSom(System.String)">
            <summary>
                Unescapes a SOM string fragment replacing "\." with ".".
            </summary>
            <param name="s">the escaped string</param>
            <returns>the unescaped string</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearchAdd(System.String)">
            <summary>
                Adds a SOM name to the search node chain.
            </summary>
            <param name="unstack">the SOM name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearchGlobal(System.Collections.Generic.List{System.String})">
            <summary>
                Searchs the SOM hiearchie from the bottom.
            </summary>
            <param name="parts">the SOM parts</param>
            <returns>the full name or  null  if not found</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.PrintStack">
            <summary>
                Outputs the stack as the sequence of elements separated
                by '.'.
            </summary>
            <returns>the stack as the sequence of elements separated by '.'</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Xml2SomDatasets">
            <summary>
                Processes the datasets section in the XFA form.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomDatasets.#ctor(System.Xml.XmlNode)">
            <summary>
                Creates a new instance from the datasets node. This expects
                not the datasets but the data node that comes below.
            </summary>
            <param name="n">the datasets node</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomDatasets.InsertNode(System.Xml.XmlNode,System.String)">
            <summary>
                Inserts a new  Node  that will match the short name.
            </summary>
            <param name="n">the datasets top  Node </param>
            <param name="shortName">the short name</param>
            <returns>the new  Node  of the inserted name</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate">
            <summary>
                Processes the template section in the XFA form.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate.#ctor(System.Xml.XmlNode)">
            <summary>
                Creates a new instance from the datasets node.
            </summary>
            <param name="n">the template node</param>
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate.DynamicForm">
            <summary>
                true  if it's a dynamic form;  false
                if it's a static form.
                if it's a static form
            </summary>
            <returns> true  if it's a dynamic form;  false </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate.GetFieldType(System.String)">
            <summary>
                Gets the field type as described in the  template  section of the XFA.
            </summary>
            <param name="s">the exact template name</param>
            <returns>the field type or  null  if not found</returns>
        </member>
        <member name="T:iTextSharp.text.pdf.XfdfReader">
            <summary>
                Reads a XFDF.
                @author Leonard Rosenthol (leonardr@pdfsages.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfdfReader._foundRoot">
            <summary>
                stuff used during parsing to handle state
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfdfReader.fields">
            <summary>
                storage for the field list and their values
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfdfReader.fileSpec">
            <summary>
                storage for the path to referenced PDF, if any
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.XfdfReader.ListFields">
            <summary>
                Storage for field values if there's more than one value for a field.
                @since    2.1.4
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.#ctor(System.String)">
            <summary>
                Reads an XFDF form.
                @throws IOException on error
            </summary>
            <param name="filename">the file name of the form</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.#ctor(System.Byte[])">
            <summary>
                Reads an XFDF form.
                @throws IOException on error
            </summary>
            <param name="xfdfIn">the byte array with the form</param>
        </member>
        <member name="P:iTextSharp.text.pdf.XfdfReader.Fields">
            <summary>
                Gets all the fields. The map is keyed by the fully qualified
                field name and the value is a merged  PdfDictionary
                with the field content.
            </summary>
            <returns>all the fields</returns>
        </member>
        <member name="P:iTextSharp.text.pdf.XfdfReader.FileSpec">
            <summary>
                Gets the PDF file specification contained in the FDF.
            </summary>
            <returns>the PDF file specification contained in the FDF</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.EndDocument">
            <summary>
                Called after the document is parsed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.EndElement(System.String)">
            <summary>
                Called when an end tag is found.
            </summary>
            <param name="tag">the tag name</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.StartDocument">
            <summary>
                Called when the document starts to be parsed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.StartElement(System.String,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Called when a start tag is found.
            </summary>
            <param name="tag">the tag name</param>
            <param name="h">the tag's attributes</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.Text(System.String)">
            <summary>
                Called when a text element is found.
            </summary>
            <param name="str">the text element, probably a fragment.</param>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetField(System.String)">
            <summary>
                Gets the field value.
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field's value</returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetFieldValue(System.String)">
            <summary>
                Gets the field value or  null  if the field does not
                exist or has no value defined.
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field value or  null </returns>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetListValues(System.String)">
            <summary>
                Gets the field values for a list or  null  if the field does not
                exist or has no value defined.
                @since   2.1.4
            </summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field values or  null </returns>
        </member>
        <member name="T:iTextSharp.text.Phrase">
            <summary>
                A Phrase is a series of Chunks.
            </summary>
            <remarks>
                A Phrase has a main Font, but some chunks
                within the phrase can have a Font that differs from the
                main Font. All the Chunks in a Phrase
                have the same leading.
            </remarks>
            <example>
                // When no parameters are passed, the default leading = 16
                Phrase phrase0 = new Phrase();
                Phrase phrase1 = new Phrase("this is a phrase");
                // In this example the leading is passed as a parameter
                Phrase phrase2 = new Phrase(16, "this is a phrase with leading 16");
                // When a Font is passed (explicitely or embedded in a chunk), the default leading = 1.5 * size of the font
                Phrase phrase3 = new Phrase("this is a phrase with a red, normal font Courier, size 12",
                FontFactory.GetFont(FontFactory.COURIER, 12, Font.NORMAL, new Color(255, 0, 0)));
                Phrase phrase4 = new Phrase(new Chunk("this is a phrase"));
                Phrase phrase5 = new Phrase(18, new Chunk("this is a phrase", FontFactory.GetFont(FontFactory.HELVETICA, 16,
                Font.BOLD, new Color(255, 0, 0)));
            </example>
        </member>
        <member name="F:iTextSharp.text.Phrase.font">
            <summary>
                membervariables
            </summary>
            <summary> This is the font of this phrase. </summary>
        </member>
        <member name="F:iTextSharp.text.Phrase.hyphenation">
            <summary>
                Null, unless the Phrase has to be hyphenated.
                @since   2.1.2
            </summary>
        </member>
        <member name="F:iTextSharp.text.Phrase.leading">
            <summary>This is the leading of this phrase.</summary>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Phrase without specifying a leading.
            </summary>
            <overloads>
                Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(iTextSharp.text.Phrase)">
            <summary>
                Copy constructor for  Phrase .
            </summary>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single)">
            <summary>
                Constructs a Phrase with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(iTextSharp.text.Chunk)">
            <summary>
                Constructs a Phrase with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
                Constructs a Phrase with a certain Chunk and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.String)">
            <summary>
                Constructs a Phrase with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
                Constructs a Phrase with a certain string and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single,System.String)">
            <summary>
                Constructs a Phrase with a certain leading and a certain string.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Boolean)">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Constructs a Phrase that can be used in the static GetInstance() method.
            </summary>
            <param name="dummy">parameter</param>
        </member>
        <member name="P:iTextSharp.text.Phrase.Content">
            <summary>
                Returns the content as a String object.
                This method differs from toString because toString will return an ArrayList with the toString value of the Chunks
                in this Phrase.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Phrase.Font">
            <summary>
                Gets the font of the first Chunk that appears in this Phrase.
            </summary>
            <value>a Font</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Hyphenation">
            <summary>
                Setter/getter for the hyphenation.
                @since   2.1.2
            </summary>
        </member>
        <member name="P:iTextSharp.text.Phrase.Leading">
            <summary>
                Gets/sets the leading of this phrase.
            </summary>
            <value>the linespacing</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Phrase.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                <see cref="T:iTextSharp.text.IElementListener" />.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.Add(iTextSharp.text.IElement)">
            <summary>
                overriding some of the ArrayList-methods
            </summary>
            <summary>
                Adds a Chunk, Anchor or another Phrase
                to this Phrase.
            </summary>
            <param name="o">an object of type Chunk, Anchor or Phrase</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.String)">
            <summary>
                Gets a special kind of Phrase that changes some characters into corresponding symbols.
            </summary>
            <param name="str"></param>
            <returns>a newly constructed Phrase</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.Int32,System.String)">
            <summary>
                Gets a special kind of Phrase that changes some characters into corresponding symbols.
            </summary>
            <param name="leading"></param>
            <param name="str"></param>
            <returns>a newly constructed Phrase</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.Int32,System.String,iTextSharp.text.Font)">
            <summary>
                Gets a special kind of Phrase that changes some characters into corresponding symbols.
            </summary>
            <param name="leading"></param>
            <param name="str"></param>
            <param name="font"></param>
            <returns>a newly constructed Phrase</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsTag(System.String)">
            <summary>
                Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.Add(System.Int32,System.Object)">
            <summary>
                Adds a Chunk, an Anchor or another Phrase
                to this Phrase.
            </summary>
            <param name="index">index at which the specified element is to be inserted</param>
            <param name="o">an object of type Chunk, Anchor, or Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Adds a collection of Chunks
                to this Phrase.
            </summary>
            <param name="collection">a collection of Chunks, Anchors and Phrases.</param>
            <returns>true if the action succeeded, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddSpecial(iTextSharp.text.IElement)">
            <summary>
                Adds a Object to the Paragraph.
            </summary>
            <param name="obj">the object to add.</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsEmpty">
            <summary>
                Checks is this Phrase contains no or 1 empty Chunk.
            </summary>
            <returns>
                false if the Phrase
                contains more than one or more non-emptyChunks.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddChunk(iTextSharp.text.Chunk)">
            <summary>
                Adds a Chunk.
            </summary>
            <remarks>
                This method is a hack to solve a problem I had with phrases that were split between chunks
                in the wrong place.
            </remarks>
            <param name="chunk">a Chunk</param>
            <returns>a bool</returns>
        </member>
        <member name="T:iTextSharp.text.Rectangle">
            <summary>
                A Rectangle is the representation of a geometric figure.
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Table" />
            <seealso cref="T:iTextSharp.text.Cell" />
            <seealso cref="T:iTextSharp.text.HeaderFooter" />
        </member>
        <member name="F:iTextSharp.text.Rectangle.BOTTOM_BORDER">
            <summary>
                static membervariables (concerning the presence of borders)
            </summary>
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.BOX">
            <summary> This represents a type of border. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.LEFT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.NO_BORDER">
            <summary> This represents a rectangle without borders. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.RIGHT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.TOP_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.UNDEFINED">
            <summary> This is the value that will be used as <VAR>undefined</VAR>. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.backgroundColor">
            <summary>
                membervariables
            </summary>
            <summary> This is the color of the background of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.border">
            <summary> This represents the status of the 4 sides of the rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColor">
            <summary> This is the color of the border of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorBottom">
            <summary>
                The color of the bottom border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorLeft">
            <summary>
                The color of the left border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorRight">
            <summary>
                The color of the right border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorTop">
            <summary>
                The color of the top border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidth">
            <summary> This is the width of the border around this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthBottom">
            <summary>
                The width of the bottom border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthLeft">
            <summary>
                The width of the left border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthRight">
            <summary>
                The width of the right border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthTop">
            <summary>
                The width of the top border of this rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.Llx">
            <summary> the lower left x-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.Lly">
            <summary> the lower left y-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.rotation">
            <summary> This is the rotation value of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.Urx">
            <summary> the upper right x-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.Ury">
            <summary> the upper right y-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.useVariableBorders">
            <summary>
                Whether variable width borders are used.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Rectangle-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(System.Single,System.Single)">
            <summary>
                Constructs a Rectangle-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(iTextSharp.text.Rectangle)">
            <summary>
                Constructs a Rectangle-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BackgroundColor">
            <summary>
                Gets the backgroundcolor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Border">
            <summary>
                Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BorderColor">
            <summary>
                Gets the color of the border.
            </summary>
            <returns>a value</returns>
            <summary>
                Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BorderWidth">
            <summary>
                Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Bottom">
            <summary>
                Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.GrayFill">
            <summary>
                Get/set the grayscale of the rectangle.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Height">
            <summary>
                Returns the height of the rectangle.
            </summary>
            <value>a height</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Left">
            <summary>
                Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Right">
            <summary>
                methods to get the membervariables
            </summary>
            <summary>
                Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Rotation">
            <summary>
                Returns the rotation
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Top">
            <summary>
                Get/set the upper right y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.UseVariableBorders">
            <summary>
                Sets a parameter indicating if the rectangle has variable borders
                indication if the rectangle has variable borders
            </summary>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Width">
            <summary>
                Returns the width of the rectangle.
            </summary>
            <value>a width</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Rectangle.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.ToString">
            <summary>
                Updates the border flag for a side based on the specified width. A width
                of 0 will disable the border on that side. Any other width enables it.
                width of border
                border side constant
            </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.DisableBorderSide(System.Int32)">
            <summary>
                Disables the border on the specified side.
                the side to disable. One of  LEFT, RIGHT, TOP, BOTTOM
            </summary>
            <param name="side"></param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.EnableBorderSide(System.Int32)">
            <summary>
                methods to set the membervariables
            </summary>
            <summary>
                Enables the border on the specified side.
                the side to enable. One of  LEFT, RIGHT, TOP, BOTTOM
            </summary>
            <param name="side"></param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetBottom(System.Single)">
            <summary>
                Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetLeft(System.Single)">
            <summary>
                Returns the lower left x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetRectangle(System.Single,System.Single)">
            <summary>
                Gets a Rectangle that is altered to fit on the page.
            </summary>
            <param name="top">the top position</param>
            <param name="bottom">the bottom position</param>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetRight(System.Single)">
            <summary>
                Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetTop(System.Single)">
            <summary>
                Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.HasBorder(System.Int32)">
            <summary>
                Indicates if the table has a some type of border.
            </summary>
            <param name="type">the type of border</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.HasBorders">
            <summary>
                Indicates if the table has borders.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.Normalize">
            <summary>
                Switches lowerleft with upperright
            </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.Rotate">
            <summary>
                implementation of the Element interface
            </summary>
            <summary>
                methods
            </summary>
            <summary>
                Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            </summary>
            <returns>a Rectangle</returns>
        </member>
        <member name="T:iTextSharp.text.RectangleReadOnly">
            <summary>
                A RectangleReadOnly is the representation of a geometric figure.
                It's the same as a Rectangle but immutable.
            </summary>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Table" />
            <seealso cref="T:iTextSharp.text.Cell" />
            <seealso cref="T:iTextSharp.text.HeaderFooter" />
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a RectangleReadOnly-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.#ctor(System.Single,System.Single)">
            <summary>
                Constructs a RectangleReadOnly-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.#ctor(iTextSharp.text.Rectangle)">
            <summary>
                Constructs a RectangleReadOnly-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.BackgroundColor">
            <summary>
                Gets the backgroundcolor.
            </summary>
            <returns>a value</returns>
            <summary>
                Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Border">
            <summary>
                Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.BorderColor">
            <summary>
                Gets the color of the border.
            </summary>
            <returns>a value</returns>
            <summary>
                Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.BorderWidth">
            <summary>
                Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Bottom">
            <summary>
                Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.GrayFill">
            <summary>
                Get/set the grayscale of the rectangle.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Left">
            <summary>
                Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Right">
            <summary>
                methods to get the membervariables
            </summary>
            <summary>
                Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Top">
            <summary>
                Get/set the upper right y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.UseVariableBorders">
            <summary>
                Sets a parameter indicating if the rectangle has variable borders
                indication if the rectangle has variable borders
            </summary>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.CloneNonPositionParameters(iTextSharp.text.Rectangle)">
            <summary>
                Copies all of the parameters from a  Rectangle  object
                except the position.
                Rectangle  to copy from
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.DisableBorderSide(System.Int32)">
            <summary>
                Disables the border on the specified side.
                the side to disable. One of  LEFT, RIGHT, TOP, BOTTOM
            </summary>
            <param name="side"></param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.EnableBorderSide(System.Int32)">
            <summary>
                methods to set the membervariables
            </summary>
            <summary>
                Enables the border on the specified side.
                the side to enable. One of  LEFT, RIGHT, TOP, BOTTOM
            </summary>
            <param name="side"></param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.Normalize">
            <summary>
                Switches lowerleft with upperright
            </summary>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.ToString">
            <summary>
                Copies all of the parameters from a  Rectangle  object
                except the position.
                Rectangle  to copy from
            </summary>
        </member>
        <member name="T:iTextSharp.text.RomanList">
            <summary>
                A special-version of  LIST  which use roman-letters.
                @see com.lowagie.text.List
                @version 2003-06-22
                @author Michael Niedermair
            </summary>
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor">
            <summary>
                Initialization
            </summary>
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor(System.Int32)">
            <summary>
                Initialization
            </summary>
            <param name="symbolIndent">indent</param>
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor(System.Boolean,System.Int32)">
            <summary>
                Initialization
            </summary>
            <param name="romanlower">roman-char in lowercase</param>
            <param name="symbolIndent">indent</param>
        </member>
        <member name="M:iTextSharp.text.RomanList.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an  Object  to the  List .
            </summary>
            <param name="o">the object to add.</param>
            <returns>true if adding the object succeeded</returns>
        </member>
        <member name="T:iTextSharp.text.Row">
            <summary>
                A Row is part of a Table
                and contains some Cells.
            </summary>
            <remarks>
                All Rows are constructed by a Table-object.
                You don't have to construct any Row yourself.
                In fact you can't construct a Row outside the package.
                Since a Cell can span several rows and/or columns
                a row can contain reserved space without any content.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Cell" />
            <seealso cref="T:iTextSharp.text.Table" />
        </member>
        <member name="F:iTextSharp.text.Row.Cell">
            <summary>
                membervariables
            </summary>
            <summary> id of the Cell element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.Null">
            <summary> id of a null element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.Table">
            <summary> id of the Table element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.Cells">
            <summary> This is the array of Objects (Cell or Table). </summary>
        </member>
        <member name="F:iTextSharp.text.Row.columns">
            <summary> This is the number of columns in the Row. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.CurrentColumn">
            <summary> This is a valid position the Row. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.horizontalAlignment">
            <summary> This is the horizontal alignment. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.Reserved">
            <summary> This is the array that keeps track of reserved cells. </summary>
        </member>
        <member name="M:iTextSharp.text.Row.#ctor(System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Row with a certain number of columns.
            </summary>
            <param name="columns">a number of columns</param>
        </member>
        <member name="P:iTextSharp.text.Row.Columns">
            <summary>
                Gets the number of columns.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Row.HorizontalAlignment">
            <summary>
                Gets the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Row.Chunks">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Row.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Row.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Row.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Row.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to a
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetCell(System.Int32)">
            <summary>
                Gets a Cell or Table from a certain column.
            </summary>
            <param name="column">the column the Cell/Table is in.</param>
            <returns>
                the Cell,Table or Object if the column was
                reserved or null if empty.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsEmpty">
            <summary>
                Checks if the row is empty.
            </summary>
            <returns>true if none of the columns is reserved.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.AddElement(System.Object)">
            <summary>
                Adds a Cell to the Row.
            </summary>
            <param name="element">the element to add (currently only Cells and Tables supported)</param>
            <returns>
                the column position the Cell was added,
                or -1 if the element couldn't be added.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.AddElement(System.Object,System.Int32)">
            <summary>
                methods
            </summary>
            <summary>
                Adds an element to the Row at the position given.
            </summary>
            <param name="element">the element to add. (currently only Cells and Tables supported</param>
            <param name="column">the position where to add the cell</param>
            <returns>
                the column position the Cell was added,
                or -1 if the Cell couldn't be added.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.DeleteColumn(System.Int32)">
            <summary>
                Deletes a certain column has been deleted.
            </summary>
            <param name="column">the number of the column to delete</param>
        </member>
        <member name="M:iTextSharp.text.Row.IsReserved(System.Int32)">
            <summary>
                Returns true/false when this position in the Row has been reserved, either filled or through a colspan of an
                Element.
            </summary>
            <param name="column">the column.</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.Reserve(System.Int32)">
            <summary>
                Reserves a Cell in the Row.
            </summary>
            <param name="column">the column that has to be reserved.</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.Reserve(System.Int32,System.Int32)">
            <summary>
                Reserves a Cell in the Row.
            </summary>
            <param name="column">the column that has to be reserved.</param>
            <param name="size">the number of columns</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.SetElement(System.Object,System.Int32)">
            <summary>
                Puts Cell to the Row at the position given, doesn't reserve colspan.
            </summary>
            <param name="aElement">the cell to add.</param>
            <param name="column">the position where to add the cell.</param>
        </member>
        <member name="M:iTextSharp.text.Row.getElementId(System.Int32)">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Returns the type-id of the element in a Row.
            </summary>
            <param name="column">the column of which you'd like to know the type</param>
            <returns>the element id</returns>
        </member>
        <member name="M:iTextSharp.text.Row.getObjectId(System.Object)">
            <summary>
                Returns the type-id of an Object.
            </summary>
            <param name="element"></param>
            <returns>the object of which you'd like to know the type-id, -1 if invalid</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.direct.RtfDirectContent">
            <summary>
                The RtfDirectContent makes it possible to directly add RTF code into
                an RTF document. This can be used to directly add RTF fragments that
                have been created with other RTF editors. One important aspect is that
                font and color numbers will not be modified. This means that the
                fonts and colors visible in the final document might not be equivalent
                with those set on the direct content.
                For convenience the RtfDirectContent provides a DIRECT_SOFT_LINEBREAK
                constant that makes it possible to easily add soft line-breaks anywhere in
                the RTF document.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.direct.RtfDirectContent.DirectSoftLinebreak">
            <summary>
                Add the DIRECT_SOFT_LINEBREAK to the Document to insert
                a soft line-break at that position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.direct.RtfDirectContent._directContent">
            <summary>
                The direct content to add.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.direct.RtfDirectContent.#ctor(System.String)">
            <summary>
                Constructs a new RtfDirectContent with the content to add.
            </summary>
            <param name="directContent">The content to add.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.direct.RtfDirectContent.WriteContent(System.IO.Stream)">
            <summary>
                Writes the element content to the given output stream.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.IRtfDataCache">
            <summary>
                The RtfDataCache interface must be implemented by classes wishing to
                act as caches for the rtf document data.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.IRtfDataCache.GetOutputStream">
            <summary>
                Get the OutputStream that the RtfDocument can write to.
            </summary>
            <returns>The OutputStream the RtfDocument can use.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.IRtfDataCache.WriteTo(System.IO.Stream)">
            <summary>
                Write the content of the cache into the OutputStream.
                @throws IOException If an error occurs reading/writing.
            </summary>
            <param name="target">The OutputStream to write the content into.</param>
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfDataCache">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_MEMORY_EFFICIENT">
            <summary>
                Constant for caching efficently into memory.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_MEMORY">
            <summary>
                Constant for caching into memory.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_DISK">
            <summary>
                Constant for caching to the disk.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.#ctor(System.Int32)">
            <summary>
                Creates a new buffer with the given initial size.
            </summary>
            <param name="bufferSize">desired initial size in bytes</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Append(System.Byte[])">
            <summary>
                Appends the given array to this buffer without copying (if possible).
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Append(System.Byte[][])">
            <summary>
                Appends all arrays to this buffer without copying (if possible).
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Reset">
            <summary>
                Resets this buffer.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Size">
            <summary>
                Returns the number of bytes that have been written to this buffer so far.
            </summary>
            <returns>number of bytes written to this buffer</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.ToArray">
            <summary>
                Allocates a new array and copies all data that has been written to this buffer to the newly allocated array.
            </summary>
            <returns>a new byte array</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.ToArrayArray">
            <summary>
                Returns the internal list of byte array buffers without copying the buffer contents.
            </summary>
            <returns>an byte aray of buffers</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Write(System.IO.Stream)">
            <summary>
                Writes all bytes available in the given inputstream to this buffer.
                @throws IOException
            </summary>
            <param name="inp"></param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.WriteTo(System.IO.Stream)">
            <summary>
                Writes all data that has been written to this buffer to the given output stream.
                @throws IOException
            </summary>
            <param name="outp"></param>
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfDiskCache">
            <summary>
                The RtfFileCache is a RtfDataCache that uses a temporary file
                to store the rtf document data. Not so fast, but doesn't use any
                memory (just disk space).
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDiskCache._data">
            <summary>
                The BufferedOutputStream that stores the cache data.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDiskCache._tempFile">
            <summary>
                The temporary file to store the data in.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.#ctor">
            <summary>
                Constructs a RtfFileCache. Creates the temp file.
                @throws IOException If the temporary file could not be created.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.GetOutputStream">
            <summary>
                Gets the BufferedOutputStream to write to.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.WriteTo(System.IO.Stream)">
            <summary>
                Writes the content of the temporary file into the Stream.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache">
            <summary>
                The RtfEfficientMemoryCache is an RtfDataCache that keeps the whole rtf document
                data in memory.
                More efficient than {@link RtfMemoryCache}.
                @author Thomas Bickel (tmb99@inode.at)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache._bab">
            <summary>
                The buffer for the rtf document data.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.#ctor">
            <summary>
                Constructs a RtfMemoryCache.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.GetOutputStream">
            <summary>
                Gets the OutputStream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.WriteTo(System.IO.Stream)">
            <summary>
                Writes the content of the buffer into the OutputStream.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfMemoryCache">
            <summary>
                The RtfMemoryCache is an RtfDataCache that keeps the whole rtf document
                data in memory. Fast but memory intensive.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfMemoryCache._data">
            <summary>
                The buffer for the rtf document data.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.#ctor">
            <summary>
                Constructs a RtfMemoryCache.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.GetOutputStream">
            <summary>
                Gets the MemoryStream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.WriteTo(System.IO.Stream)">
            <summary>
                Writes the content of the MemoryStream into the Stream.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfNilOutputStream">
            <summary>
                The RtfNilOutputStream is a dummy output stream that sends all
                bytes to the big byte bucket in the sky. It is used to improve
                speed in those situations where processing is required, but
                the results are not needed.
                @author Thomas Bickel (tmb99@inode.at)
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfNilOutputStream.GetSize">
            <summary>
                Returns the number of bytes that have been written to this buffer so far.
            </summary>
            <returns>number of bytes written to this buffer</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfCodePage">
            <summary>
                The RtfCodePage class allows different code pages to be used in the rtf document.
                Currently always ansi / ansicpg1252
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfCodePage._ansi">
            <summary>
                Constant for ansi encoded rtf documents
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfCodePage._ansiCodepage">
            <summary>
                Constant for the ansi codepage
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Construct an RtfCodePage
            </summary>
            <param name="doc">The RtfDocument this RtfCodePage belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the selected codepage
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocument">
            <summary>
                The RtfDocument stores all document related data and also the main data stream.
                INTERNAL CLASS - NOT TO BE USED DIRECTLY
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Todd Bush (Todd.Bush@canopysystems.com) [Tab support]
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._rtfDocument">
            <summary>
                Constant for the Rtf document start
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._documentHeader">
            <summary>
                The RtfDocumentHeader that handles all document header methods
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._documentSettings">
            <summary>
                The RtfDocumentSettings for this RtfDocument.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._mapper">
            <summary>
                The RtfMapper to use in this RtfDocument
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._previousRandomInts">
            <summary>
                Stores integers that have been generated as unique random numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._autogenerateTocEntries">
            <summary>
                Whether to automatically generate TOC entries for Chapters and Sections. Defaults to false
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._data">
            <summary>
                Stores the actual document data
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument._lastElementWritten">
            <summary>
                The last RtfBasicElement that was added directly to the RtfDocument.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.#ctor">
            <summary>
                The default constructor for a RtfDocument
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.Add(iTextSharp.text.rtf.IRtfBasicElement)">
            <summary>
                Adds an element to the rtf document
            </summary>
            <param name="element">The element to add</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.FilterSpecialChar(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>
                Writes the given string to the given {@link Stream} encoding the string characters.
                @throws IOException
            </summary>
            <param name="outp">destination Stream</param>
            <param name="str">string to write</param>
            <param name="useHex">if  true  hex encoding characters is preferred to unicode encoding if possible</param>
            <param name="softLineBreaks">if  true  return characters are written as soft line breaks</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetAutogenerateTocEntries">
            <summary>
                Get whether to autmatically generate table of contents entries
            </summary>
            <returns>Wheter to automatically generate TOC entries</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetDocumentHeader">
            <summary>
                Gets the RtfDocumentHeader of this RtfDocument
            </summary>
            <returns>The RtfDocumentHeader of this RtfDocument</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetDocumentSettings">
            <summary>
                Gets the RtfDocumentSettings that specify how the rtf document is generated.
            </summary>
            <returns>The current RtfDocumentSettings.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetLastElementWritten">
            <summary>
                Gets the last RtfBasicElement that was directly added to the RtfDocument.
            </summary>
            <returns>The last RtfBasicElement that was directly added to the RtfDocument.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetMapper">
            <summary>
                Gets the RtfMapper object of this RtfDocument
            </summary>
            <returns>The RtfMapper</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetRandomInt">
            <summary>
                Generates a random integer that is unique with respect to the document.
            </summary>
            <returns>A random int</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.Open">
            <summary>
                Opens the RtfDocument and initialises the data cache. If the data cache is
                set to CACHE_DISK, but the cache cannot be initialised then the memory cache
                is used.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.OutputDebugLinebreak(System.IO.Stream)">
            <summary>
                Helper method outputs linebreak in document if debugging is turned on.
                @throws IOException
                @since 2.1.3
            </summary>
            <param name="result">the OutputStream to write the linebreak to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.SetAutogenerateTocEntries(System.Boolean)">
            <summary>
                Whether to automagically generate table of contents entries when
                adding Chapters or Sections.
            </summary>
            <param name="autogenerate">Whether to automatically generate TOC entries</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.WriteDocument(System.IO.Stream)">
            <summary>
                Writes the document
            </summary>
            <param name="outs">The  Stream  to write the RTF document to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.subMatch(System.String,System.Int32,System.Byte[])">
            <summary>
                Returns  true  if  m.length  characters in  str , starting at offset  soff
                match the bytes in the given array  m .
            </summary>
            <param name="str">the string to search for a match</param>
            <param name="soff">the starting offset in str</param>
            <param name="m">the array to match</param>
            <returns> true  if there is match</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocumentHeader">
            <summary>
                The RtfDocumentHeader contains all classes required for the generation of
                the document header area.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Thomas Bickel (tmb99@inode.at)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._facingPages">
            <summary>
                Constant for facing pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._titlePage">
            <summary>
                Constant for the title page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._codePage">
            <summary>
                The code page to use
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._colorList">
            <summary>
                Stores all the colors used in the document
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._fontList">
            <summary>
                Stores all the fonts used in the document
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._footer">
            <summary>
                The current RtfHeaderFooterGroup for the footer
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._generator">
            <summary>
                Generator string in document
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._header">
            <summary>
                The current RtfHeaderFooterGroup for the header
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._infoGroup">
            <summary>
                The information group with author/subject/keywords/title/producer/creationdate data
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._listTable">
            <summary>
                Manages List tables
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._pageSetting">
            <summary>
                The page settings
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._protectionSetting">
            <summary>
                The protection settings
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader._stylesheetList">
            <summary>
                Stores all paragraph styles used in the document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfDocumentHeader for a RtfDocument
            </summary>
            <param name="doc">The RtfDocument this RtfDocumentHeader belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.AddInfoElement(iTextSharp.text.rtf.document.RtfInfoElement)">
            <summary>
                Adds an RtfInfoElement to the list of RtfInfoElements
            </summary>
            <param name="rtfInfoElement">The RtfInfoElement to add</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.FreeListNumber(iTextSharp.text.rtf.list.RtfList)">
            <summary>
                Removes a RtfList from the list table
            </summary>
            <param name="list">The RtfList to remove</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetColorNumber(iTextSharp.text.rtf.style.RtfColor)">
            <summary>
                Gets the number of the specified RtfColor
            </summary>
            <param name="color">The RtfColor for which to get the number</param>
            <returns>The number of the color</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
            <summary>
                Gets the number of the specified RtfFont
            </summary>
            <param name="font">The RtfFont for which to get the number</param>
            <returns>The number of the font</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetListNumber(iTextSharp.text.rtf.list.RtfList)">
            <summary>
                Gets the number of the specified RtfList
            </summary>
            <param name="list">The RtfList for which to get the number</param>
            <returns>The number of the list</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetListTable">
            <summary>
                Get the  RtfListTable  object.
                @since 2.1.3
            </summary>
            <returns>the ListTable object.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetPageSetting">
            <summary>
                Gets the RtfPageSetting object of this RtfDocument
            </summary>
            <returns>The RtfPageSetting object</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetRtfParagraphStyle(System.String)">
            <summary>
                Gets the RtfParagraphStyle with the given style name.
            </summary>
            <param name="styleName">The style name of the RtfParagraphStyle to get.</param>
            <returns>The RtfParagraphStyle with the given style name or null.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.RegisterParagraphStyle(iTextSharp.text.rtf.style.RtfParagraphStyle)">
            <summary>
                Registers the RtfParagraphStyle for further use in the document.
            </summary>
            <param name="rtfParagraphStyle">The RtfParagraphStyle to register.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.SetFooter(iTextSharp.text.HeaderFooter)">
            <summary>
                Sets the current footer to use
            </summary>
            <param name="footer">The HeaderFooter to use as footer</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.SetHeader(iTextSharp.text.HeaderFooter)">
            <summary>
                Sets the current header to use
            </summary>
            <param name="header">The HeaderFooter to use as header</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.WriteContent(System.IO.Stream)">
            <summary>
                Write the contents of the document header area.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.WriteSectionDefinition(System.IO.Stream)">
            <summary>
                Writes the section definition data
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.Init">
            <summary>
                Initialises the RtfDocumentHeader.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.convertHeaderFooter(iTextSharp.text.HeaderFooter,System.Int32)">
            <summary>
                Converts a HeaderFooter into a RtfHeaderFooterGroup. Depending on which class
                the HeaderFooter is, the correct RtfHeaderFooterGroup is created.
                @see com.lowagie.text.rtf.headerfooter.RtfHeaderFooter
                @see com.lowagie.text.rtf.headerfooter.RtfHeaderFooterGroup
            </summary>
            <param name="hf">The HeaderFooter to convert.</param>
            <param name="type">Whether the conversion is being done on a footer or header</param>
            <returns>The converted RtfHeaderFooterGroup.</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocumentSettings">
            <summary>
                The RtfDocumentSettings contains output specific settings. These settings modify
                how the actual document is then generated and some settings may mean that some
                RTF readers can't read the document or render it wrongly.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Thomas Bickel (tmb99@inode.at)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._document">
            <summary>
                The RtfDocument this RtfDocumentSettings belongs to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._alwaysGenerateSoftLinebreaks">
            <summary>
                Whether to always generate soft linebreaks for \n in Chunks.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._alwaysUseUnicode">
            <summary>
                Whether to always translate characters past 'z' into unicode representations.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._dataCacheStyle">
            <summary>
                How to cache the document during generation. Defaults to RtfDataCache.CACHE_MEMORY;
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._imagePdfConformance">
            <summary>
                Whether images should be written in order to mimick the PDF output.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._imageWrittenAsBinary">
            <summary>
                Images are written as binary data and not hex encoded.
                @since 2.1.1
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._outputDebugLineBreaks">
            <summary>
                Whether to output the line breaks that make the rtf document source more readable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._outputTableRowDefinitionAfter">
            <summary>
                Whether to also output the table row definition after the cell content.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._protectionHash">
            <summary>
                Document protection level password hash.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._protectionLevel">
            <summary>
                Document protection level
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._readOnlyRecommended">
            <summary>
                Document read password hash
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <summary>
                private String writereservhash = null; //\*\writereservhash - not implemented
            </summary>
            <summary>
                Document recommended to be opened in read only mode.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings._writeImageScalingInformation">
            <summary>
                Whether to write image scaling information. This is required for Word 2000, 97 and Word for Mac
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a new RtfDocumentSettings object.
            </summary>
            <param name="document">The RtfDocument this RtfDocumentSettings belong to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetDataCacheStyle">
            <summary>
                Gets the current data cache style.
            </summary>
            <returns>The current data cache style.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionHashBytes">
            <summary>
                Obtain the password has as a byte array.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns>The bytes of the password hash as a byte array (byte[])</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionLevel">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns>RTF document protection level</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionLevelBytes">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns>RTF document protection level as a byte array (byte[])</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionLevelRaw">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns>RTF document protection level</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetReadOnlyRecommended">
            <summary>
                Get the RTF flag that recommends if the the document should be opened in read only mode.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns>true if flag is set, false if it is not set</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsAlwaysGenerateSoftLinebreaks">
            <summary>
                Gets whether all linebreaks inside Chunks are generated as soft linebreaks.
            </summary>
            <returns> True  if soft linebreaks are generated,  false  for hard linebreaks.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsAlwaysUseUnicode">
            <summary>
                Gets whether all characters bigger than 'z' are represented as unicode.
            </summary>
            <returns> True  if unicode representation is used,  false  otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsDocumentProtected">
            <summary>
                Determine if document has protection enabled.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns>true if protection is enabled, false if it is not enabled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsImagePdfConformance">
            <summary>
                Gets the current setting on image PDF conformance.
            </summary>
            <returns>The current image PDF conformance.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsImageWrittenAsBinary">
            <summary>
                Gets whether images are written as binary data or are hex encoded. Defaults to  true .
                @since 2.1.1
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
            <returns> True  if images are written as binary data,  false  if hex encoded.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsOutputDebugLineBreaks">
            <summary>
                Gets whether to output the line breaks for increased rtf document readability.
            </summary>
            <returns>Whether to output line breaks.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsOutputTableRowDefinitionAfter">
            <summary>
                Gets whether the table row definition should also be written after the cell content.
            </summary>
            <returns>Returns the outputTableRowDefinitionAfter.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsWriteImageScalingInformation">
            <summary>
                Gets whether to write scaling information for images.
            </summary>
            <returns>Whether to write scaling information for images.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.RegisterParagraphStyle(iTextSharp.text.rtf.style.RtfParagraphStyle)">
            <summary>
                Registers the RtfParagraphStyle for further use in the document. This does not need to be
                done for the default styles in the RtfParagraphStyle object. Those are added automatically.
            </summary>
            <param name="rtfParagraphStyle">The RtfParagraphStyle to register.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetAlwaysGenerateSoftLinebreaks(System.Boolean)">
            <summary>
                Sets whether to always generate soft linebreaks.
            </summary>
            <param name="alwaysGenerateSoftLinebreaks">Whether to always generate soft linebreaks.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetAlwaysUseUnicode(System.Boolean)">
            <summary>
                Sets whether to represent all characters bigger than 'z' as unicode.
            </summary>
            <param name="alwaysUseUnicode"> True  to use unicode representation,  false  otherwise.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetDataCacheStyle(System.Int32)">
            <summary>
                Sets the data cache style. This controls where the document is cached during
                generation. Two cache styles are supported:
                RtfDataCache.CACHE_MEMORY: The document is cached in memory. This is fast,
                but places a limit on how big the document can get before causing
                OutOfMemoryExceptions.
                RtfDataCache.CACHE_DISK: The document is cached on disk. This is slower
                than the CACHE_MEMORY setting, but the document size is now only constrained
                by the amount of free disk space.
                in RtfDataCache.
                @see com.lowagie.text.rtf.document.output.output.RtfDataCache.
            </summary>
            <param name="dataCacheStyle">The data cache style to set. Valid constants can be found</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetImagePdfConformance(System.Boolean)">
            <summary>
                Sets the image PDF conformance setting. By default images will be added
                as if they were displayed with 72dpi. Set this to  false
                if images should be generated with the Word default DPI setting.
                for the default Word display.
            </summary>
            <param name="imagePdfConformance"> True  if PDF equivalence is desired,  false </param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetImageWrittenAsBinary(System.Boolean)">
            <summary>
                Set whether images are written as binary data or are hex encoded.
                @since 2.1.1
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
            <param name="imageWrittenAsBinary"> True  to write images as binary data,  false  for hex encoding.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetNewPassword(System.String,System.String)">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="oldPwd">Old password - clear text</param>
            <param name="newPwd">New password - clear text</param>
            <returns>true if password set, false if password not set</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForMsWord2000And97">
            <summary>
                Set the options required for RTF documents to display correctly in MS Word 2000
                and MS Word 97.
                Sets  outputTableRowDefinitionAfter = true  and  writeImageScalingInformation = true .
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForMsWordForMac">
            <summary>
                Set the options required for RTF documents to display correctly in MS Word for Mac.
                Sets  writeImageScalingInformation = true .
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForMsWordXp">
            <summary>
                Set the options required for RTF documents to display correctly in MS Word XP (2002).
                Sets  writeImageScalingInformation = false .
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForOpenOfficeOrg">
            <summary>
                Set the options required for RTF documents to display correctly in OpenOffice.Org
                Writer.
                Sets  outputTableRowDefinitionAfter = false .
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOutputDebugLineBreaks(System.Boolean)">
            <summary>
                Sets whether to output the line breaks for increased rtf document readability.
                Some line breaks may be added where the rtf specification demands it.
            </summary>
            <param name="outputDebugLineBreaks">The outputDebugLineBreaks to set.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOutputTableRowDefinitionAfter(System.Boolean)">
            <summary>
                Sets whether the table row definition should also be written after the cell content.
                This is recommended to be set to  true  if you need Word2000 compatiblity and
                false  if the document should be opened in OpenOffice.org Writer.
            </summary>
            <param name="outputTableRowDefinitionAfter">The outputTableRowDefinitionAfter to set.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetPasswordHash(System.String)">
            <summary>
                This function is not intended for general use. Please see 'public bool SetProtection(int level, String pwd)'
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="pwd">Password HASH to set the document password hash to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetProtection(System.Int32,System.String)">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="level">Document protecton level</param>
            <param name="pwd">Document password - clear text</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetProtectionLevel(System.Int32)">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="level">Document protection level</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetReadOnlyRecommended(System.Boolean)">
            <summary>
                Set the RTF flag that recommends the document be opened in read only mode.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="value">true if the flag is to be set, false if it is NOT to be set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetWriteImageScalingInformation(System.Boolean)">
            <summary>
                Sets whether image scaling information should be written. This needs to be set to  true
                MS Word 2000, MS Word 97 and Word for Mac.
            </summary>
            <param name="writeImageScalingInformation">Whether to write image scaling information.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.UnprotectDocument(System.String)">
            <summary>
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="pwd">Document password - clear text</param>
            <returns>true if document unprotected, false if protection is not removed.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.convertProtectionLevel">
            <summary>
                Converts protection level from internal bitmap value to protlevel output value
                0 = Revision protection
                1 = Annotation/Comment protection
                2 = Form protection
                3 = Read only protection
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <returns> </returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfGenerator">
            <summary>
                The RtfGenerator creates the (\*\generator ...} element.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfGenerator._generator">
            <summary>
                Generator group starting tag
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfGenerator.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a  RtfGenerator  belonging to a RtfDocument
            </summary>
            <param name="doc">The  RtfDocument  this  RtfGenerator  belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfGenerator.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RTF generator group.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfInfoElement">
            <summary>
                Stores one information group element. Valid elements are
                author, title, subject, keywords, producer and creationdate.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Thomas Bickel (tmb99@inode.at)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoAuthor">
            <summary>
                Constant for the author element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoCreationDate">
            <summary>
                Constant for the creationdate element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoKeywords">
            <summary>
                Constant for the keywords element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoProducer">
            <summary>
                Constant for the producer element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoSubject">
            <summary>
                Constant for the subject element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoTitle">
            <summary>
                Constant for the title element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._content">
            <summary>
                The content of this RtfInfoElement
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement._infoType">
            <summary>
                The type of this RtfInfoElement. The values from Element.INFO_ELEMENT_NAME are used.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Meta)">
            <summary>
                Constructs a RtfInfoElement based on the given Meta object
            </summary>
            <param name="doc">The RtfDocument this RtfInfoElement belongs to</param>
            <param name="meta">The Meta object this RtfInfoElement is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of one RTF information element.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.convertDate(System.String)">
            <summary>
                Converts a date from the format used by iText to the format required by
                rtf. iText: EEE MMM dd HH:mm:ss zzz yyyy - rtf: \\'yr'yyyy\\'mo'MM\\'dy'dd\\'hr'HH\\'min'mm\\'sec'ss
            </summary>
            <param name="date">The date formated by iText</param>
            <returns>The date formated for rtf</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfInfoGroup">
            <summary>
                The RtfInfoGroup stores information group elements.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Thomas Bickel (tmb99@inode.at)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup._infoGroup">
            <summary>
                Information group starting tag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup._infoPassword">
            <summary>
                Constant for the password element
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup._infoElements">
            <summary>
                The RtfInfoElements that belong to this RtfInfoGroup
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfInfoGroup belonging to a RtfDocument
            </summary>
            <param name="doc">The RtfDocument this RtfInfoGroup belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.Add(iTextSharp.text.rtf.document.RtfInfoElement)">
            <summary>
                Adds an RtfInfoElement to the RtfInfoGroup
            </summary>
            <param name="infoElement">The RtfInfoElement to add</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RTF information group and its elements.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfPageSetting">
            <summary>
                The RtfPageSetting stores the page size / page margins for a RtfDocument.
                INTERNAL CLASS - NOT TO BE USED DIRECTLY
                @version $Id: RtfPageSetting.cs,v 1.5 2008/05/16 19:30:51 psoares33 Exp $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Thomas Bickel (tmb99@inode.at)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._landscapeBytes">
            <summary>
                Constant for landscape
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginBottomBytes">
            <summary>
                Constant for the bottom margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginLeftBytes">
            <summary>
                Constant for the left margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginRightBytes">
            <summary>
                Constant for the right margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginTopBytes">
            <summary>
                Constant for the top margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._pageHeightBytes">
            <summary>
                Constant for the page width
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._pageWidthBytes">
            <summary>
                Constant for the page height
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._sectionMarginBottomBytes">
            <summary>
                Constant for the section bottom margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._sectionMarginLeftBytes">
            <summary>
                Constant for the section left margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._sectionMarginRightBytes">
            <summary>
                Constant for the section right margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._sectionMarginTopBytes">
            <summary>
                Constant for the section top margin
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._sectionPageHeightBytes">
            <summary>
                Constant for the section page height
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._sectionPageWidthBytes">
            <summary>
                Constant for the section page width
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._landscape">
            <summary>
                Whether the page is portrait or landscape
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginBottom">
            <summary>
                The bottom margin to use
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginLeft">
            <summary>
                The left margin to use
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginRight">
            <summary>
                The right margin to use
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._marginTop">
            <summary>
                The top margin to use
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._pageHeight">
            <summary>
                The page height to use
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting._pageWidth">
            <summary>
                The page width to use
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a new RtfPageSetting object belonging to a RtfDocument.
            </summary>
            <param name="doc">The RtfDocument this RtfPageSetting belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the page size / page margin definition
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginBottom">
            <summary>
                Gets the bottom margin
            </summary>
            <returns>Returns the bottom margin</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginLeft">
            <summary>
                Gets the left margin
            </summary>
            <returns>Returns the left margin</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginRight">
            <summary>
                Gets the right margin
            </summary>
            <returns>Returns the right margin</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginTop">
            <summary>
                Gets the top margin
            </summary>
            <returns>Returns the top margin</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetPageHeight">
            <summary>
                Gets the page height
            </summary>
            <returns>Returns the page height</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetPageWidth">
            <summary>
                Gets the page width
            </summary>
            <returns>Returns the page width</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginBottom(System.Int32)">
            <summary>
                Sets the bottom margin
            </summary>
            <param name="marginBottom">The bottom margin to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginLeft(System.Int32)">
            <summary>
                Sets the left margin to use
            </summary>
            <param name="marginLeft">The left margin to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginRight(System.Int32)">
            <summary>
                Sets the right margin to use
            </summary>
            <param name="marginRight">The right margin to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginTop(System.Int32)">
            <summary>
                Sets the top margin to use
            </summary>
            <param name="marginTop">The top margin to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageHeight(System.Int32)">
            <summary>
                Sets the page height to use
            </summary>
            <param name="pageHeight">The page height to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
                Set the page size to use. This method will use guessFormat to try to guess the correct
                page format. If no format could be guessed, the sizes from the pageSize are used and
                the landscape setting is determined by comparing width and height;
            </summary>
            <param name="pageSize">The pageSize to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageWidth(System.Int32)">
            <summary>
                Sets the page width to use
            </summary>
            <param name="pageWidth">The page width to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteSectionDefinition(System.IO.Stream)">
            <summary>
                Writes the definition part for a new section
            </summary>
            <returns>A byte array containing the definition for a new section</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.rectEquals(iTextSharp.text.Rectangle,iTextSharp.text.Rectangle)">
            <summary>
                This method compares to Rectangles. They are considered equal if width and height are the same
            </summary>
            <param name="rect1">The first Rectangle to compare</param>
            <param name="rect2">The second Rectangle to compare</param>
            <returns> True  if the Rectangles equal,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.guessFormat(iTextSharp.text.Rectangle,System.Boolean)">
            <summary>
                This method tries to fit the  Rectangle pageSize  to one of the predefined PageSize rectangles.
                If a match is found the pageWidth and pageHeight will be set according to values determined from files
                generated by MS Word2000 and OpenOffice 641. If no match is found the method will try to match the rotated
                Rectangle by calling itself with the parameter rotate set to true.
            </summary>
            <param name="pageSize">the page size for which to guess the correct format</param>
            <param name="rotate">Whether we should try to rotate the size befor guessing the format</param>
            <returns> True  if the format was guessed,  false/  otherwise</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfProtection">
            <summary>
                RtfProtection
                See ECMA Specification for WordprocessingML documentProtection element.
                Reference:
                Standard ECMA-376 1st Edition / December 2006
                Office Open XML File Formats
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_NONE">
            <summary>
                Default for protection level.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_REVPROT">
            <summary>
                REVPROT
                Mutually exclusive
                This document is protected for revisions. The user can edit the document,
                but revision marking cannot be disabled.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_ANNOTPROT">
            <summary>
                ANNNOTPROT
                Mutually exclusive
                This document is protected for comments (annotations).
                The user cannot edit the document but can insert comments (annotations).
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_FORMPROT">
            <summary>
                FORMPROT
                Mutually exclusive
                Document is protected for forms.
                see also \allprot (forms controlword)
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_READPROT">
            <summary>
                READPROT
                Mutually exclusive but can be combined with ANNOTPROT for backward compatibility
                Document is protected for editing, except areas marked as exceptions by \protstart and\protend
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.STYLELOCK">
            <summary>
                STYLELOCK
                The document contains styles and formatting restrictions.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.STYLELOCKENFORCED">
            <summary>
                STYLELOCKENFORCED
                The styles and formatting restrictions are being enforced.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.STYLELOCKBACKCOMP">
            <summary>
                STYLELOCKBACKCOMP
                Style lockdown backward compatibility flag, indicating we emitted protection
                keywords to get documents with styles and formatting restrictions to behave
                in a reasonable way when opened by older versions.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.AUTOFMTOVERRIDE">
            <summary>
                STYLELOCKBACKCOMP
                Allow AutoFormat to override styles and formatting restrictions.  When style
                protection is on, the user cannot add direct formatting.  This setting allows
                AutoFormat actions to apply direct formatting when needed.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection._initialCodeArray">
            <summary>
                initialCodeArray  Table from ECMA-376 Specification
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection._encryptionMatrix">
            <summary>
                encryptionMatrix  Table from ECMA-376 Specification
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtection.GenerateHash(System.String)">
            <summary>
                generateHash  generates the password hash from a clear text string.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.1.1
            </summary>
            <param name="pwd">Clear text string input</param>
            <returns>hex encoded password hash</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfProtectionSetting">
            <summary>
                The RtfProtectionSetting handles document protection elements
                @version $Id: RtfProtectionSetting.cs,v 1.2 2008/05/13 11:25:50 psoares33 Exp $
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.1.1
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._annotprot">
            <summary>
                Constant for Annotation/Comment protection controlword
                Mutually exclusive
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#FORMPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see com.lowagie.text.rtf.document.RtfProtectionSetting#REVPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#READPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._enforceprot">
            <summary>
                Constant for enforceprot controlword
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._formprot">
            <summary>
                Constant for Form protection controlword
                Mutually exclusive
                @see com.lowagie.text.rtf.document.RtfProtectionSetting#REVPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#ANNOTPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#READPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._protlevel">
            <summary>
                Constant for protlevel controlword
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._readonlyrecommended">
            <summary>
                Constant for enforceprot controlword.
                Implemented in Microsoft Word 2007.
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._readprot">
            <summary>
                Constant for read only rotection controlword
                Mutually exclusive - exception, can be combined with ANNOTPROT
                for backwards compatibility
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#FORMPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see com.lowagie.text.rtf.document.RtfProtectionSetting#REVPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#ANNOTPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting._revprot">
            <summary>
                Constant for Revision protection controlword
                Mutually exclusive
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#FORMPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#ANNOTPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @see
                com.lowagie.text.rtf.document.RtfProtectionSetting#READPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtectionSetting.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a  RtfProtectionSetting  belonging to a RtfDocument
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
            <param name="doc">The  RtfDocument  this  RtfProtectionSetting  belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtectionSetting.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RTF protection control words
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtectionSetting.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the RTF protection control words
                @since 2.1.1
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfAnchor">
            <summary>
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor._hyperlink">
            <summary>
                Constant for a hyperlink
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor._content">
            <summary>
                The RtfPhrase to display for the url
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor._url">
            <summary>
                The url of this RtfAnchor
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Anchor)">
            <summary>
                Constructs a RtfAnchor based on a RtfField
            </summary>
            <param name="doc">The RtfDocument this RtfAnchor belongs to</param>
            <param name="anchor">The Anchor this RtfAnchor is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.WriteFieldInstContent(System.IO.Stream)">
            <summary>
                Write the field instructions for this RtfAnchor. Sets the field
                type to HYPERLINK and then writes the url.
                @throws IOException
            </summary>
            <returns>The field instructions for this RtfAnchor</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.WriteFieldResultContent(System.IO.Stream)">
            <summary>
                Write the field result for this RtfAnchor. Writes the content
                of the RtfPhrase.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfField">
            <summary>
                The RtfField class is an abstract base class for all rtf field functionality.
                Subclasses only need to implement the two abstract methods writeFieldInstContent
                and writeFieldResultContent. All other field functionality is handled by the
                RtfField class.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author <a href="mailto:Dirk.Weigenand@smb-tec.com">Dirk Weigenand</a>
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.TWIPS_FACTOR">
            <summary>
                The factor to use for translating from iText to rtf measurments
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.CloseGroup">
            <summary>
                Constant for the end of an rtf group
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.CommaDelimiter">
            <summary>
                Constant for a comma delimiter in rtf
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.Delimiter">
            <summary>
                Constant for a delimiter in rtf
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.OpenGroup">
            <summary>
                Constant for the beginning of a rtf group
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldAltBytes">
            <summary>
                Constant for an alt field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldBytes">
            <summary>
                Constant for a rtf field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldDirtyBytes">
            <summary>
                Constant for a dirty field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldEditBytes">
            <summary>
                Constant for a edited field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldInstructionsBytes">
            <summary>
                Constant for the field instructions
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldLockedBytes">
            <summary>
                Constant for a locked field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldPrivateBytes">
            <summary>
                Constant for a private field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldResultBytes">
            <summary>
                Constant for the field result
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldAlt">
            <summary>
                Is it an alt field
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldDirty">
            <summary>
                Is the field dirty
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldEdit">
            <summary>
                Is the field edited
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldLocked">
            <summary>
                Is the field locked
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._fieldPrivate">
            <summary>
                Is the field private
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._font">
            <summary>
                The RtfFont of this RtfField
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._inHeader">
            <summary>
                Whether this RtfElement is in a header
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField._inTable">
            <summary>
                Whether this RtfField is in a table
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.Document">
            <summary>
                The RtfDocument this RtfField belongs to
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfField for a RtfDocument. This is not very usefull,
                since the RtfField by itself does not do anything. Use one of the
                subclasses instead.
            </summary>
            <param name="doc">The RtfDocument this RtfField belongs to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            <summary>
                Constructs a RtfField for a RtfDocument. This is not very usefull,
                since the RtfField by itself does not do anything. Use one of the
                subclasses instead.
            </summary>
            <param name="doc">The RtfDocument this RtfField belongs to.</param>
            <param name="font">The Font this RtfField should use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfField is in a header
            </summary>
            <param name="inHeader"> True  if this RtfField is in a header,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetInTable(System.Boolean)">
            <summary>
                Sets whether this RtfField is in a table
            </summary>
            <param name="inTable"> True  if this RtfField is in a table,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfElement belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteContent(System.IO.Stream)">
            <summary>
                Writes the field to the  OutputStream .
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsEmpty">
            <summary>
                An RtfField is never empty.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldAlt">
            <summary>
                Get whether this field is an alt field
            </summary>
            <returns>Returns whether this field is an alt field</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldDirty">
            <summary>
                Get whether this field is dirty
            </summary>
            <returns>Returns whether this field is dirty</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldEdit">
            <summary>
                Get whether this field is edited
            </summary>
            <returns>Returns whether this field is edited</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldLocked">
            <summary>
                Get whether this field is locked
            </summary>
            <returns>Returns the fieldLocked.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldPrivate">
            <summary>
                Get whether this field is private
            </summary>
            <returns>Returns the fieldPrivate.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsInHeader">
            <summary>
                Gets whether this  RtfField  is in a header.
            </summary>
            <returns> True  if this  RtfField  is in a header,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsInTable">
            <summary>
                Gets whether this  RtfField  is in a table.
            </summary>
            <returns> True  if this  RtfField  is in a table,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldAlt(System.Boolean)">
            <summary>
                Set whether this field is an alt field
            </summary>
            <param name="fieldAlt">The value to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldDirty(System.Boolean)">
            <summary>
                Set whether this field is dirty
            </summary>
            <param name="fieldDirty">The value to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldEdit(System.Boolean)">
            <summary>
                Set whether this field is edited.
            </summary>
            <param name="fieldEdit">The value to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldLocked(System.Boolean)">
            <summary>
                Set whether this field is locked
            </summary>
            <param name="fieldLocked">The value to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldPrivate(System.Boolean)">
            <summary>
                Set whether this field is private
            </summary>
            <param name="fieldPrivate">The value to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstContent(System.IO.Stream)">
            <summary>
                Writes the content of the field instruction area. Override this
                method in your subclasses.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultContent(System.IO.Stream)">
            <summary>
                Writes the content of the pre-calculated field result. Override this
                method in your subclasses.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.writeFieldBegin(System.IO.Stream)">
            <summary>
                Writes the field beginning. Also writes field properties.
                @throws IOException
            </summary>
            <returns>A byte array with the field beginning.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.writeFieldEnd(System.IO.Stream)">
            <summary>
                Writes the end of the field
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.writeFieldInstBegin(System.IO.Stream)">
            <summary>
                Writes the beginning of the field instruction area.
                @throws IOException
            </summary>
            <returns>The beginning of the field instruction area</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.writeFieldInstEnd(System.IO.Stream)">
            <summary>
                Writes the end of the field instruction area.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.writeFieldResultBegin(System.IO.Stream)">
            <summary>
                Writes the beginning of the field result area
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.writeFieldResultEnd(System.IO.Stream)">
            <summary>
                Writes the end of the field result area
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfPageNumber">
            <summary>
                The RtfPageNumber provides the page number field in rtf documents.
                @version $Revision: 1.4 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfPageNumber._pageNumber">
            <summary>
                Constant for the page number
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor">
            <summary>
                Constructs a RtfPageNumber. This can be added anywhere to add a page number field.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.Font)">
            <summary>
                Constructs a RtfPageNumber with a specified Font. This can be added anywhere to
                add a page number field.
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfPageNumber object.
            </summary>
            <param name="doc">The RtfDocument this RtfPageNumber belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            <summary>
                Constructs a RtfPageNumber object with a specific font.
            </summary>
            <param name="doc">The RtfDocument this RtfPageNumber belongs to</param>
            <param name="font">The Font to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.WriteFieldInstContent(System.IO.Stream)">
            <summary>
                Writes the field instruction content
                @
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.WriteFieldResultContent(System.IO.Stream)">
            <summary>
                Writes the field result content
                @
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTableOfContents">
            <summary>
                The RtfTableOfContents together with multiple RtfTOCEntry objects generates a table
                of contents. The table of contents will display no entries in the viewing program
                and the user will have to update it first. A text to inform the user of this is
                displayed instead.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTableOfContents.FieldInst">
            <summary>
                field inst content
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTableOfContents._defaultText">
            <summary>
                The default text to display
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.#ctor(System.String)">
            <summary>
                Constructs a RtfTableOfContents. The default text is the text that is displayed
                before the user updates the table of contents
            </summary>
            <param name="defaultText">The default text to display</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.WriteFieldInstContent(System.IO.Stream)">
            <summary>
                Writes the field instruction content
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.WriteFieldResultContent(System.IO.Stream)">
            <summary>
                Writes the field result content
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTocEntry">
            <summary>
                The RtfTOCEntry is used together with the RtfTableOfContents to generate a table of
                contents. Add the RtfTOCEntry in those locations in the document where table of
                contents entries should link to
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTocEntry._textHiddenOff">
            <summary>
                Constant for the end of hidden text
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTocEntry._textHiddenOn">
            <summary>
                Constant for the beginning of hidden text
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTocEntry._tocEntryNoPageNumber">
            <summary>
                Constant for a TOC entry without page numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTocEntry._tocEntryPageNumber">
            <summary>
                Constant for a TOC entry with page numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTocEntry._entry">
            <summary>
                The entry text of this RtfTOCEntry
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTocEntry._showPageNumber">
            <summary>
                Whether to show page numbers in the table of contents
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTocEntry.#ctor(System.String)">
            <summary>
                Constructs a RtfTOCEntry with a certain entry text.
            </summary>
            <param name="entry">The entry text to display</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTocEntry.SetShowPageNumber(System.Boolean)">
            <summary>
                Sets whether to display a page number in the table of contents, or not
            </summary>
            <param name="showPageNumber">Whether to display a page number or not</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTocEntry.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of the RtfTOCEntry
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTocEntry.WriteFieldInstContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTocEntry.WriteFieldResultContent(System.IO.Stream)">
            <summary>
                unused
                @see com.lowagie.text.rtf.field.RtfField#writeFieldResultContent(java.io.OutputStream)
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTotalPageNumber">
            <summary>
                The RtfTotalPageNumber provides the total number of pages field in rtf documents.
                @author Jose Hurtado (jose.hurtado@gft.com)
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTotalPageNumber._arabicTotalPages">
            <summary>
                Constant for Arabic total page numbers.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor">
            <summary>
                Constructs a RtfTotalPageNumber. This can be added anywhere to add a total number of pages field.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.Font)">
            <summary>
                Constructs a RtfTotalPageNumber with a specified Font. This can be added anywhere
                to add a total number of pages field.
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfTotalPageNumber object.
            </summary>
            <param name="doc">The RtfDocument this RtfTotalPageNumber belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            <summary>
                Constructs a RtfTotalPageNumber object with a specific font.
            </summary>
            <param name="doc">The RtfDocument this RtfTotalPageNumber belongs to</param>
            <param name="font">The Font to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.WriteFieldInstContent(System.IO.Stream)">
            <summary>
                Writes the field NUMPAGES instruction with Arabic format: "NUMPAGES \\\\* Arabic".
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.WriteFieldResultContent(System.IO.Stream)">
            <summary>
                Writes the field result content "1"
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfImage">
            <summary>
                The RtfImage contains one image. Supported image types are jpeg, png, wmf, bmp.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Paulo Soares
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PixelTwipsFactor">
            <summary>
                Constant for converting pixels to twips
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.Byte2CharLut">
            <summary>
                lookup table used for converting bytes to hex chars.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._picture">
            <summary>
                Constant for a picture
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureBinaryData">
            <summary>
                "\bin" constant
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureGroup">
            <summary>
                Constant for the shape/picture group
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureHeight">
            <summary>
                Constant for the picture height
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureJpeg">
            <summary>
                Constant for a jpeg image
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._picturePng">
            <summary>
                Constant for a png image
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureScaledHeight">
            <summary>
                Constant for the picture height scale
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureScaledWidth">
            <summary>
                Constant for the picture width scale
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureScaleX">
            <summary>
                Constant for horizontal picture scaling
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureScaleY">
            <summary>
                Constant for vertical picture scaling
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureWidth">
            <summary>
                Constant for the picture width
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._pictureWmf">
            <summary>
                Constant for a wmf image
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._height">
            <summary>
                The height of this picutre
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._imageData">
            <summary>
                Binary image data.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._imageType">
            <summary>
                The type of image this is.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._plainHeight">
            <summary>
                The intended display height of this picture
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._plainWidth">
            <summary>
                The intended display width of this picture
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._width">
            <summary>
                The width of this picture
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._alignment">
            <summary>
                The alignment of this picture
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage._topLevelElement">
            <summary>
                Whether this RtfImage is a top level element and should
                be an extra paragraph.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Image)">
            <summary>
                Constructs a RtfImage for an Image.
                @throws DocumentException If an error occured accessing the image content
            </summary>
            <param name="doc">The RtfDocument this RtfImage belongs to</param>
            <param name="image">The Image that this RtfImage wraps</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.SetAlignment(System.Int32)">
            <summary>
                Sets the alignment of this RtfImage. Uses the alignments from com.lowagie.text.Element.
            </summary>
            <param name="alignment">The alignment to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.SetTopLevelElement(System.Boolean)">
            <summary>
                Set whether this RtfImage should behave like a top level element
                and enclose itself in a paragraph.
            </summary>
            <param name="topLevelElement">Whether to behave like a top level element.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RtfImage content
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.getImageData(iTextSharp.text.Image)">
            <summary>
                Extracts the image data from the Image.
                @throws DocumentException If an error occurs accessing the image content
            </summary>
            <param name="image">The image for which to extract the content</param>
            <returns>The raw image data, not formated</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.imageDataSize">
            <summary>
                Returns the image raw data size in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.writeImageDataHexEncoded(System.IO.Stream)">
            <summary>
                Writes the image data to the given buffer as hex encoded text.
                @
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfShape">
            <summary>
                The RtfShape provides the interface for adding shapes to
                the RTF document. This will only work for Word 97+, older
                Word versions are not supported by this class.<br /><br />
                Only very simple shapes are directly supported by the RtfShape.
                For more complex shapes you will have to read the RTF
                specification (iText follows the 1.6 specification) and add
                the desired properties via the RtfShapeProperty.<br /><br />
                One thing to keep in mind is that distances are not expressed
                in the standard iText point, but in EMU where 1 inch = 914400 EMU
                or 1 cm = 360000 EMU.
                @version $Revision: 1.7 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ARC">
            <summary>
                Constant for an arc shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ARROR_THICK">
            <summary>
                Constant for a thick arrow.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ARROW">
            <summary>
                Constant for an arrow.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_BALLOON">
            <summary>
                Constant for a balloon shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_CAN">
            <summary>
                Constant for a can shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_CUBE">
            <summary>
                Constant for a cube shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_DIAMOND">
            <summary>
                Constant for a diamond.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_DONUT">
            <summary>
                Constant for a donut shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ELLIPSE">
            <summary>
                Constant for an ellipse. Use this to create circles.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_FREEFORM">
            <summary>
                Constant for a free form shape. The shape verticies must
                be specified with an array of Point objects in a
                RtfShapeProperty with the name PROPERTY_VERTICIES.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_HEXAGON">
            <summary>
                Constant for a hexagon.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_HOME_PLATE">
            <summary>
                Constant for a home plate style shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_LINE">
            <summary>
                Constant for a line shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_OCTAGON">
            <summary>
                Constant for an ocatagon.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_PARALLELOGRAM">
            <summary>
                Constant for a parallelogram.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_PICTURE_FRAME">
            <summary>
                Constant for a Picture Frame.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_RECTANGLE">
            <summary>
                Constant for a rectangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ROUND_RECTANGLE">
            <summary>
                Constant for a rounded rectangle. The roundness is
                set via a RtfShapeProperty with the name PROPERTY_ADJUST_VALUE.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_SEAL">
            <summary>
                Constant for a seal shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_STAR">
            <summary>
                Constant for a star.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_TRAPEZOID">
            <summary>
                Constant for a trapezoid.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_TRIANGLE_ISOSCELES">
            <summary>
                Constant for a isoscelle triangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_TRIANGLE_RIGHT">
            <summary>
                Constant for a right triangle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_BOTH">
            <summary>
                Text is wrapped on the left and right side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_LARGEST">
            <summary>
                Text is wrapped on the largest side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_LEFT">
            <summary>
                Text is wrapped on the left side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_NONE">
            <summary>
                Text is not wrapped around the shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_RIGHT">
            <summary>
                Text is wrapped on the right side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_THROUGH">
            <summary>
                Text is wrapped through the shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_BOTH">
            <summary>
                Text is tightly wrapped on the left and right side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_LARGEST">
            <summary>
                Text is tightly wrapped on the largest side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_LEFT">
            <summary>
                Text is tightly wrapped on the left side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_RIGHT">
            <summary>
                Text is tightly wrapped on the right side.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TOP_BOTTOM">
            <summary>
                Text is wrapped to the top and bottom.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape._position">
            <summary>
                The RtfShapePosition that defines position settings for this RtfShape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape._properties">
            <summary>
                A Hashtable with RtfShapePropertys that define further shape properties.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape._type">
            <summary>
                The shape type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape._shapeNr">
            <summary>
                The shape nr is a random unique id.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape._shapeText">
            <summary>
                Text that is contained in the shape.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape._wrapping">
            <summary>
                The wrapping mode. Defaults to SHAPE_WRAP_NONE;
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.#ctor(System.Int32,iTextSharp.text.rtf.graphic.RtfShapePosition)">
            <summary>
                Constructs a new RtfShape of a given shape at the given RtfShapePosition.
            </summary>
            <param name="type">The type of shape to create.</param>
            <param name="position">The RtfShapePosition to create this RtfShape at.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.SetProperty(iTextSharp.text.rtf.graphic.RtfShapeProperty)">
            <summary>
                Sets a property.
            </summary>
            <param name="property">The property to set for this RtfShape.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.SetShapeText(System.String)">
            <summary>
                Sets the text to display in this RtfShape.
            </summary>
            <param name="shapeText">The text to display.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.SetWrapping(System.Int32)">
            <summary>
                Set the wrapping mode.
            </summary>
            <param name="wrapping">The wrapping mode to use for this RtfShape.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RtfShape. Some settings are automatically translated into
                or require other properties and these are set first.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfShapePosition">
            <summary>
                The RtfShapePosition stores position and ordering
                information for one RtfShape.
                @version $Revision: 1.6 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_X_RELATIVE_COLUMN">
            <summary>
                Constant for horizontal positioning relative to the column.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_X_RELATIVE_MARGIN">
            <summary>
                Constant for horizontal positioning relative to the margin.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_X_RELATIVE_PAGE">
            <summary>
                Constant for horizontal positioning relative to the page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_Y_RELATIVE_MARGIN">
            <summary>
                Constant for vertical positioning relative to the margin.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_Y_RELATIVE_PAGE">
            <summary>
                Constant for vertical positioning relative to the page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_Y_RELATIVE_PARAGRAPH">
            <summary>
                Constant for vertical positioning relative to the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._bottom">
            <summary>
                The bottom coordinate of this RtfShapePosition.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._left">
            <summary>
                The left coordinate of this RtfShapePosition.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._right">
            <summary>
                The right coordinate of this RtfShapePosition.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._top">
            <summary>
                The top coordinate of this RtfShapePosition.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._ignoreXRelative">
            <summary>
                Whether to ignore the horizontal relative position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._ignoreYRelative">
            <summary>
                Whether to ignore the vertical relative position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._shapeBelowText">
            <summary>
                Whether the shape is below the text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._xRelativePos">
            <summary>
                The horizontal relative position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._yRelativePos">
            <summary>
                The vertical relative position.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition._zOrder">
            <summary>
                The z order of this RtfShapePosition.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs a new RtfShapePosition with the four bounding coordinates.
            </summary>
            <param name="top">The top coordinate.</param>
            <param name="left">The left coordinate.</param>
            <param name="right">The right coordinate.</param>
            <param name="bottom">The bottom coordinate.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.IsShapeBelowText">
            <summary>
                Gets whether the shape is below the text.
            </summary>
            <returns> True  if the shape is below,  false  if the text is below.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetShapeBelowText(System.Boolean)">
            <summary>
                Sets whether the shape is below the text.
            </summary>
            <param name="shapeBelowText"> True  if the shape is below,  false  if the text is below.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetXRelativePos(System.Int32)">
            <summary>
                Sets the relative horizontal position. Use one of the constants
                provided in this class.
            </summary>
            <param name="relativePos">The relative horizontal position to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetYRelativePos(System.Int32)">
            <summary>
                Sets the relative vertical position. Use one of the constants
                provides in this class.
            </summary>
            <param name="relativePos">The relative vertical position to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetZOrder(System.Int32)">
            <summary>
                Sets the z order to use.
            </summary>
            <param name="order">The z order to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.WriteContent(System.IO.Stream)">
            <summary>
                Write this RtfShapePosition.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetIgnoreXRelative(System.Boolean)">
            <summary>
                Set whether to ignore the horizontal relative position.
            </summary>
            <param name="ignoreXRelative"> True  to ignore the horizontal relative position,  false  otherwise.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetIgnoreYRelative(System.Boolean)">
            <summary>
                Set whether to ignore the vertical relative position.
            </summary>
            <param name="ignoreYRelative"> True  to ignore the vertical relative position,  false  otherwise.</param>
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfShapeProperty">
            <summary>
                The RtfShapeProperty stores all shape properties that are
                not handled by the RtfShape and RtfShapePosition.
                There is a huge selection of properties that can be set. For
                the most important properites there are constants for the
                property name, for all others you must find the correct
                property name in the RTF specification (version 1.6).
                The following types of property values are supported:
                long
                double
                bool
                Color
                int[]
                Point[]
                @version $Revision: 1.8 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_ADJUST_VALUE">
            <summary>
                Property for defining the first adjust handle for shapes. Used
                with the rounded rectangle. Requires a long value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_FILL_COLOR">
            <summary>
                Property for defining the fill color of the shape. Requires a
                Color value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_FLIP_H">
            <summary>
                Property for signalling a horizontal flip of the shape. Requires a
                bool value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_FLIP_V">
            <summary>
                Property for signalling a vertical flip of the shape. Requires a
                bool value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_BOTTOM">
            <summary>
                Property for defining the maximum vertical coordinate that is
                visible. Requires a long value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_LEFT">
            <summary>
                Property for defining the minimum horizontal coordinate that is
                visible. Requires a long value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_RIGHT">
            <summary>
                Property for defining the maximum horizontal coordinate that is
                visible. Requires a long value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_TOP">
            <summary>
                Property for defining the minimum vertical coordinate that is
                visible. Requires a long value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_IMAGE">
            <summary>
                Property for defining an image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_LAYOUT_IN_CELL">
            <summary>
                Property for defining that the shape is in a table cell. Requires
                a bool value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_LINE_COLOR">
            <summary>
                Property for defining the line color of the shape. Requires a
                Color value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_VERTICIES">
            <summary>
                Property for defining vertices in freeform shapes. Requires a
                Point array as the value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PropertyTypeArray">
            <summary>
                The stored value is either an int or a Point array.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PropertyTypeBoolean">
            <summary>
                The stored value is bool.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PropertyTypeColor">
            <summary>
                The stored value is a Color.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PropertyTypeDouble">
            <summary>
                The stored value is a double.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PropertyTypeImage">
            <summary>
                The stored value is an Image.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PropertyTypeLong">
            <summary>
                The stored value is a long.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty._name">
            <summary>
                The RtfShapeProperty name.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty._type">
            <summary>
                The value type.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty._value">
            <summary>
                The RtfShapeProperty value.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Int64)">
            <summary>
                Constructs a RtfShapeProperty with a long value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The long value to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Double)">
            <summary>
                Constructs a RtfShapeProperty with a double value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The double value to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Boolean)">
            <summary>
                Constructs a RtfShapeProperty with a bool value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The bool value to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a RtfShapeProperty with a Color value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The Color value to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Int32[])">
            <summary>
                Constructs a RtfShapeProperty with an int array value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The int array to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Drawing.Point[])">
            <summary>
                Constructs a RtfShapeProperty with a Point array value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The Point array to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,iTextSharp.text.Image)">
            <summary>
                Constructs a RtfShapeProperty with an Image value.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The Image to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Object)">
            <summary>
                Internaly used to create the RtfShape.
            </summary>
            <param name="name">The property name to use.</param>
            <param name="value">The property value to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.GetName">
            <summary>
                Gets the name of this RtfShapeProperty.
            </summary>
            <returns>The name of this RtfShapeProperty.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.WriteContent(System.IO.Stream)">
            <summary>
                Write this RtfShapePosition.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter">
            <summary>
                The RtfHeaderFooter represents one header or footer. This class can be used
                directly.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_ALL_PAGES">
            <summary>
                Constant for displaying the header/footer on all pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_FIRST_PAGE">
            <summary>
                Constant for displaying the header/footer on the first page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_LEFT_PAGES">
            <summary>
                Constant for displaying the header/footer on all left hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_RIGHT_PAGES">
            <summary>
                Constant for displaying the header/footer on all right hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.TYPE_FOOTER">
            <summary>
                Constant for the footer type
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.TYPE_HEADER">
            <summary>
                Constant for the header type
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._footerAll">
            <summary>
                Constant for a footer on all pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._footerFirst">
            <summary>
                Constant for a footer on the first page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._footerLeft">
            <summary>
                Constnat for a footer on the left hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._footerRight">
            <summary>
                Constant for a footer on the right hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._headerAll">
            <summary>
                Constant for a header on all pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._headerFirst">
            <summary>
                Constant for a header on the first page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._headerLeft">
            <summary>
                Constant for a header on all left hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._headerRight">
            <summary>
                Constant for a header on all right hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._content">
            <summary>
                The content of this RtfHeaderFooter
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._displayAt">
            <summary>
                The display location of this RtfHeaderFooter. DISPLAY_FIRST_PAGE,
                DISPLAY_LEFT_PAGES, DISPLAY_RIGHT_PAGES or DISPLAY_ALL_PAGES
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._document">
            <summary>
                The RtfDocument this RtfHeaderFooter belongs to
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter._type">
            <summary>
                The display type of this RtfHeaderFooter. TYPE_HEADER or TYPE_FOOTER
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.IElement)">
            <summary>
                Constructs a RtfHeaderFooter for any Element.
            </summary>
            <param name="element">The Element to display as content of this RtfHeaderFooter</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.IElement[])">
            <summary>
                Constructs a RtfHeaderFooter for an array of Elements.
            </summary>
            <param name="elements">The Elements to display as the content of this RtfHeaderFooter.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter,System.Int32,System.Int32)">
            <summary>
                Constructs a RtfHeaderFooter based on a HeaderFooter with a certain type and displayAt
                location. For internal use only.
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="headerFooter">The HeaderFooter to base this RtfHeaderFooter on</param>
            <param name="type">The type of RtfHeaderFooter</param>
            <param name="displayAt">The display location of this RtfHeaderFooter</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            <summary>
                Constructs a RtfHeaderFooter as a copy of an existing RtfHeaderFooter.
                For internal use only.
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="headerFooter">The RtfHeaderFooter to copy</param>
            <param name="displayAt">The display location of this RtfHeaderFooter</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter)">
            <summary>
                Constructs a RtfHeaderFooter for a HeaderFooter.
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="headerFooter">The HeaderFooter to base this RtfHeaderFooter on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetInHeader(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inHeader"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetInTable(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inTable"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfElement belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.WriteContent(System.IO.Stream)">
            <summary>
                Write the content of this RtfHeaderFooter.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetAlignment(System.Int32)">
            <summary>
                Set the alignment of this RtfHeaderFooter. Passes the setting
                on to the contained element.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetDisplayAt(System.Int32)">
            <summary>
                Sets the display location of this RtfHeaderFooter
            </summary>
            <param name="displayAt">The display location to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetType(System.Int32)">
            <summary>
                Sets the type of this RtfHeaderFooter
            </summary>
            <param name="type">The type to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.getContent">
            <summary>
                Gets the content of this RtfHeaderFooter
            </summary>
            <returns>The content of this RtfHeaderFooter</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup">
            <summary>
                The RtfHeaderFooterGroup holds 0 - 3 RtfHeaderFooters that create a group
                of headers or footers.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.ModeMultiple">
            <summary>
                This RtfHeaderFooterGroup contains two or three RtfHeaderFooter objects
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.ModeNone">
            <summary>
                This RtfHeaderFooterGroup contains no RtfHeaderFooter objects
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.ModeSingle">
            <summary>
                This RtfHeaderFooterGroup contains one RtfHeaderFooter object
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._document">
            <summary>
                The RtfDocument this RtfHeaderFooterGroup belongs to
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._headerAll">
            <summary>
                The RtfHeaderFooter for all pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._headerFirst">
            <summary>
                The RtfHeaderFooter for the first page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._headerLeft">
            <summary>
                The RtfHeaderFooter for the left hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._headerRight">
            <summary>
                The RtfHeaderFooter for the right hand pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._mode">
            <summary>
                The current mode of this RtfHeaderFooterGroup. Defaults to MODE_NONE
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup._type">
            <summary>
                The current type of this RtfHeaderFooterGroup. Defaults to RtfHeaderFooter.TYPE_HEADER
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor">
            <summary>
                Constructs a RtfHeaderGroup to which you add headers/footers using
                via the setHeaderFooter method.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32)">
            <summary>
                Constructs a certain type of RtfHeaderFooterGroup. RtfHeaderFooter.TYPE_HEADER
                and RtfHeaderFooter.TYPE_FOOTER are valid values for type.
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="type">The type of RtfHeaderFooterGroup to create</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup,System.Int32)">
            <summary>
                Constructs a RtfHeaderFooterGroup by copying the content of the original
                RtfHeaderFooterGroup
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="headerFooter">The RtfHeaderFooterGroup to copy</param>
            <param name="type">The type of RtfHeaderFooterGroup to create</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            <summary>
                Constructs a RtfHeaderFooterGroup for a certain RtfHeaderFooter.
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="headerFooter">The RtfHeaderFooter to display</param>
            <param name="type">The typ of RtfHeaderFooterGroup to create</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter,System.Int32)">
            <summary>
                Constructs a RtfHeaderGroup for a certain HeaderFooter
            </summary>
            <param name="doc">The RtfDocument this RtfHeaderFooter belongs to</param>
            <param name="headerFooter">The HeaderFooter to display</param>
            <param name="type">The typ of RtfHeaderFooterGroup to create</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetInHeader(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inHeader"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetInTable(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inTable"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfElement belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.WriteContent(System.IO.Stream)">
            <summary>
                Write the content of this RtfHeaderFooterGroup.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.HasFacingPages">
            <summary>
                Get whether this RtfHeaderFooterGroup has facing pages
            </summary>
            <returns>Whether this RtfHeaderFooterGroup has facing pages</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.HasTitlePage">
            <summary>
                Get whether this RtfHeaderFooterGroup has a titlepage
            </summary>
            <returns>Whether this RtfHeaderFooterGroup has a titlepage</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHasFacingPages">
            <summary>
                Set that this RtfHeaderFooterGroup should have facing pages. If only
                a header / footer for all pages exists, then it will be copied to the left
                and right pages aswell.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHasTitlePage">
            <summary>
                Set that this RtfHeaderFooterGroup should have a title page. If only
                a header / footer for all pages exists, then it will be copied to the
                first page aswell.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHeaderFooter(iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            <summary>
                Set a RtfHeaderFooter to be displayed at a certain position
            </summary>
            <param name="headerFooter">The RtfHeaderFooter to display</param>
            <param name="displayAt">The display location to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHeaderFooter(iTextSharp.text.HeaderFooter,System.Int32)">
            <summary>
                Set a HeaderFooter to be displayed at a certain position
            </summary>
            <param name="headerFooter">The HeaderFooter to set</param>
            <param name="displayAt">The display location to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetType(System.Int32)">
            <summary>
                Set the type of this RtfHeaderFooterGroup. RtfHeaderFooter.TYPE_HEADER
                or RtfHeaderFooter.TYPE_FOOTER. Also sets the type for all RtfHeaderFooters
                of this RtfHeaderFooterGroup.
            </summary>
            <param name="type">The type to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderAll">
            <summary>
                Gets the RtfHeaderFooter for all pages
            </summary>
            <returns>The RtfHeaderFooter for all pages</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderFirst">
            <summary>
                Gets the RtfHeaderFooter for the title page
            </summary>
            <returns>The RtfHeaderFooter for the title page</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderLeft">
            <summary>
                Gets the RtfHeaderFooter for all left hand pages
            </summary>
            <returns>The RtfHeaderFooter for all left hand pages</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderRight">
            <summary>
                Gets the RtfHeaderFooter for all right hand pages
            </summary>
            <returns>The RtfHeaderFooter for all right hand pages</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetMode">
            <summary>
                Gets the mode of this RtfHeaderFooterGroup
            </summary>
            <returns>The mode of this RtfHeaderFooterGroup</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.WriteContent(System.IO.Stream)">
            <summary>
                Writes the element content to the given output stream.
            </summary>
            <param name="outp">The  OutputStream  to write the content to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfElement belongs to
            </summary>
            <param name="doc">The @link{com.lowagie.text.rtf.document.RtfDocument} this  RtfElement  belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetInTable(System.Boolean)">
            <summary>
                Sets whether this IRtfBasicElement is in a table
            </summary>
            <param name="inTable">Whether this IRtfBasicElement is in a table</param>
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this IRtfBasicElement is in a header
            </summary>
            <param name="inHeader">Whether this IRtfBasicElement is in a header</param>
        </member>
        <member name="T:iTextSharp.text.rtf.IRtfExtendedElement">
            <summary>
                The RtfExtendedElement interface is to be used for elements that also
                write data into the definition part of the rtf document
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfExtendedElement.WriteDefinition(System.IO.Stream)">
            <summary>
                Write the definition part of the element
            </summary>
            <param name="outp">The  OutputStream  to write the element definition to</param>
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfList">
            <summary>
                The RtfList stores one List. It also provides the methods to write the
                list declaration and the list data.
                @version $Id: RtfList.cs,v 1.18 2008/05/16 19:31:01 psoares33 Exp $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Thomas Bickel (tmb99@inode.at)
                @author Felix Satyaputra (f_satyaputra@yahoo.co.uk)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TYPE_HYBRID">
            <summary>
                List type of listhybrid
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TYPE_NORMAL">
            <summary>
                List type of NORMAL - no control word
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TYPE_SIMPLE">
            <summary>
                List type of listsimple
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.ListId">
            <summary>
                Constant for the list id
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.ListLevelNumber">
            <summary>
                character properties
            </summary>
            <summary>
                Constant for the list level value
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.ListNumber">
            <summary>
                Constant for the list number
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.ListNumberEnd">
            <summary>
                Constant for the old list number end
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.ListText">
            <summary>
                Constant for the old list text
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.Tab">
            <summary>
                Constant for a tab character
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._list">
            <summary>
                Constant for the list
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listHybrid">
            <summary>
                Constant for the hybrid list
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listName">
            <summary>
                Constant for the name of this list
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listRestarthdn">
            <summary>
                Constant to indicate if the list restarts at each section. Word 7 compatiblity
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listSimple">
            <summary>
                Constant for the simple list
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listStyleid">
            <summary>
                Constant for the identifier of the style of this list. Mutually exclusive with \\liststylename
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listStylename">
            <summary>
                Constant for the identifier of the style of this list. Mutually exclusive with \\liststyleid
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listTemplateId">
            <summary>
                Constant for the list template id
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._items">
            <summary>
                The subitems of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listId">
            <summary>
                The list id
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listLevels">
            <summary>
                The RtfList lists managed by this RtfListTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listNumber">
            <summary>
                The list number of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._listType">
            <summary>
                This RtfList type
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._name">
            <summary>
                The name of the list if it exists
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList._parentList">
            <summary>
                The parent list if there is one.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor">
            <summary>
                Constructs an empty RtfList object.
                @since 2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs an empty RtfList object.
                @since 2.1.3
            </summary>
            <param name="doc">The RtfDocument this RtfList belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.List)">
            <summary>
                Constructs a new RtfList for the specified List.
                @since 2.1.3
            </summary>
            <param name="doc">The RtfDocument this RtfList belongs to</param>
            <param name="list">The List this RtfList is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfList is in a header. Sets the correct inTable setting for all
                child elements.
                @since 2.1.3
            </summary>
            <param name="inHeader"> True  if this RtfList is in a header,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetInTable(System.Boolean)">
            <summary>
                Sets whether this RtfList is in a table. Sets the correct inTable setting for all
                child elements.
                @since 2.1.3
            </summary>
            <param name="inTable"> True  if this RtfList is in a table,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of the RtfList
                @since 2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the definition part of this list level
                @throws IOException
                @since 2.1.3
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetId">
            <summary>
                Get the list ID number
                @since 2.1.3
            </summary>
            <returns>this list id</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListLevel(System.Int32)">
            <summary>
                @since 2.1.3
            </summary>
            <returns>the list at the index</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListNumber">
            <summary>
                Gets the id of this list
                @since 2.1.3
            </summary>
            <returns>Returns the list number.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListType">
            <summary>
                @see RtfList#LIST_TYPE_NORMAL
                @see RtfList#LIST_TYPE_SIMPLE
                @see RtfList#LIST_TYPE_HYBRID
                @since 2.1.3
            </summary>
            <returns>the listType</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetName">
            <summary>
                @since 2.1.3
            </summary>
            <returns>the name</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetParentList">
            <summary>
                @since 2.1.3
            </summary>
            <returns>the parentList</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Set the document.
                @since 2.1.3
            </summary>
            <param name="doc">The RtfDocument</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetId(System.Int32)">
            <summary>
                Set the list ID number
                @since 2.1.3
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetListNumber(System.Int32)">
            <summary>
                Sets the id of this list
                @since 2.1.3
            </summary>
            <param name="listNumber">The list number to set.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetListType(System.Int32)">
            <summary>
                @see RtfList#LIST_TYPE_NORMAL
                @see RtfList#LIST_TYPE_SIMPLE
                @see RtfList#LIST_TYPE_HYBRID
                @since 2.1.3
            </summary>
            <param name="listType">the listType to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetName(System.String)">
            <summary>
                @since 2.1.3
            </summary>
            <param name="name">the name to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetParentList(iTextSharp.text.rtf.list.RtfList)">
            <summary>
                @since 2.1.3
            </summary>
            <param name="parentList">the parentList to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.CorrectIndentation">
            <summary>
                Correct the indentation of this RtfList by adding left/first line indentation
                from the parent RtfList. Also calls correctIndentation on all child RtfLists.
                @since 2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.CreateDefaultLevels">
            <summary>
                Create a default set of listlevels
                @since 2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteListNumbers(System.IO.Stream)">
            <summary>
                Writes only the list number and list level number.
                @throws IOException On i/o errors.
                @since 2.1.3
            </summary>
            <param name="result">The  Stream  to write to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteListTextBlock(System.IO.Stream,System.Int32,iTextSharp.text.rtf.list.RtfListLevel)">
            <summary>
                @throws IOException
                @since 2.1.3
            </summary>
            <param name="result"></param>
            <param name="itemNr"></param>
            <param name="listLevel"></param>
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListItem">
            <summary>
                The RtfListItem acts as a wrapper for a ListItem.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListItem._containsInnerList">
            <summary>
                Whether this RtfListItem contains further RtfLists.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListItem._parentList">
            <summary>
                The RtfList this RtfListItem belongs to.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.ListItem)">
            <summary>
                Constructs a RtfListItem for a ListItem belonging to a RtfDocument.
            </summary>
            <param name="doc">The RtfDocument this RtfListItem belongs to.</param>
            <param name="listItem">The ListItem this RtfListItem is based on.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.GetLevel">
            <summary>
                @since 2.1.3
            </summary>
            <returns>the level</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.GetParent">
            <summary>
                Set the parent RtfList.
                @since 2.1.3
            </summary>
            <returns>The parent RtfList to use.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.InheritListSettings(System.Int32,System.Int32)">
            <summary>
                Inherit the list settings from the parent list to RtfLists that
                are contained in this RtfListItem.
            </summary>
            <param name="listNumber">The list number to inherit.</param>
            <param name="listLevel">The list level to inherit.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.IsContainsInnerList">
            <summary>
                Gets whether this RtfListItem contains further RtfLists.
            </summary>
            <returns>Whether this RtfListItem contains further RtfLists.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.SetLevel(System.Int32)">
            <summary>
                @since 2.1.3
            </summary>
            <param name="level">the level to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.SetParent(iTextSharp.text.rtf.list.RtfListLevel)">
            <summary>
                Set the parent RtfList.
            </summary>
            <param name="parentList">The parent RtfList to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of this RtfListItem.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the definition of the first element in this RtfListItem that is
                an is {@link RtfList} to the given stream.
                If this item does not contain a {@link RtfList} element nothing is written
                and the method returns  false .
                @throws IOException
                @see {@link RtfList#writeDefinition(Stream)}
            </summary>
            <param name="outp">destination stream</param>
            <returns> true  if a RtfList definition was written,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.CorrectIndentation">
            <summary>
                Correct the indentation of RtfLists in this RtfListItem by adding left/first line indentation
                from the parent RtfList. Also calls correctIndentation on all child RtfLists.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListLevel">
            <summary>
                The RtfListLevel is a listlevel object in a list.
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevel">
            <summary>
                Constant for list level
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelAlignment">
            <summary>
                Constant for list level alignment old
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelAlignmentNew">
            <summary>
                Constant for list level alignment new
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelFirstIndent">
            <summary>
                Constant for the first indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelFolow">
            <summary>
                Constant which specifies which character follows the level text
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelIndent">
            <summary>
                Constant which specifies the levelindent control word
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelLegal">
            <summary>
                Constant which specifies (1) if list numbers from previous levels should be converted
                to Arabic numbers; (0) if they should be left with the format specified by their
                own level's definition.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelNoRestart">
            <summary>
                Constant which specifies
                (1) if this level does/does not restart its count each time a super ordinate level is incremented
                (0) if this level does not restart its count each time a super ordinate level is incremented.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelNumbersBegin">
            <summary>
                Constant for the beginning of the list level numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelNumbersEnd">
            <summary>
                Constant for the end of the list level numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelNumbersNumbered">
            <summary>
                Constant for the list level numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelPicture">
            <summary>
                Constant for the levelpictureN control word
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelSpace">
            <summary>
                Constant which specifies the levelspace controlword
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelStartAt">
            <summary>
                Constant for list level start at
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelStyleBulletedBegin">
            <summary>
                Constant for the beginning of the list level bulleted style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelStyleBulletedEnd">
            <summary>
                Constant for the end of the list level bulleted style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelStyleNumberedBegin">
            <summary>
                Constant for the beginning of the list level numbered style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelStyleNumberedEnd">
            <summary>
                Constant for the end of the list level numbered style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelSymbolIndent">
            <summary>
                Constant for the symbol indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelTemplateId">
            <summary>
                Constant for list level
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelTentative">
            <summary>
                Constant for the lvltentative control word
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelText">
            <summary>
                Constant for list level text
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelType">
            <summary>
                Constant for list level style old
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listLevelTypeNew">
            <summary>
                Constant for list level style new
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._levelPicture">
            <summary>
                Which picture bullet from the \listpicture destination should be applied
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._alignment">
            <summary>
                The alignment of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._bulletCharacter">
            <summary>
                The text to use as the bullet character
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._bulletChunk">
            <summary>
                @since 2.1.4
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._firstIndent">
            <summary>
                The first indentation of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._fontBullet">
            <summary>
                The RtfFont for bulleted lists
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._fontNumber">
            <summary>
                The RtfFont for numbered lists
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._isLegal">
            <summary>
                Flag to indicate if the levellegal control word should be emitted.
                true  if any list numbers from previous levels should be converted to Arabic numbers;
                false if they should be left with the format specified by their own level definition.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._isTentative">
            <summary>
                Flag to indicate if the tentative control word should be emitted.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._leftIndent">
            <summary>
                The left indentation of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listNoRestart">
            <summary>
                Does the list restart numbering each time a super ordinate level is incremented
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listStartAt">
            <summary>
                The number to start counting at
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._listType">
            <summary>
                10  Kanji numbering without the digit character (*dbnum1)
                11  Kanji numbering with the digit character (*dbnum2)
                12  46 phonetic katakana characters in "aiueo" order (*aiueo)
                13  46 phonetic katakana characters in "iroha" order (*iroha)
                14  Double-byte character
                15  Single-byte character
                16  Kanji numbering 3 (*dbnum3)
                17  Kanji numbering 4 (*dbnum4)
                18  Circle numbering (*circlenum)
                19  Double-byte Arabic numbering
                20  46 phonetic double-byte katakana characters (*aiueo*dbchar)
                21  46 phonetic double-byte katakana characters (*iroha*dbchar)
                22  Arabic with leading zero (01, 02, 03, ..., 10, 11)
                24  Korean numbering 2 (*ganada)
                25  Korean numbering 1 (*chosung)
                26  Chinese numbering 1 (*gb1)
                27  Chinese numbering 2 (*gb2)
                28  Chinese numbering 3 (*gb3)
                29  Chinese numbering 4 (*gb4)
                30  Chinese Zodiac numbering 1 (* zodiac1)
                31  Chinese Zodiac numbering 2 (* zodiac2)
                32  Chinese Zodiac numbering 3 (* zodiac3)
                33  Taiwanese double-byte numbering 1
                34  Taiwanese double-byte numbering 2
                35  Taiwanese double-byte numbering 3
                36  Taiwanese double-byte numbering 4
                37  Chinese double-byte numbering 1
                38  Chinese double-byte numbering 2
                39  Chinese double-byte numbering 3
                40  Chinese double-byte numbering 4
                41  Korean double-byte numbering 1
                42  Korean double-byte numbering 2
                43  Korean double-byte numbering 3
                44  Korean double-byte numbering 4
                45  Hebrew non-standard decimal
                46  Arabic Alif Ba Tah
                47  Hebrew Biblical standard
                48  Arabic Abjad style
                255 No number
            </summary>
            <summary>
                Whether this RtfList is numbered
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._parent">
            <summary>
                Parent list object
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._rightIndent">
            <summary>
                The right indentation of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel._symbolIndent">
            <summary>
                The symbol indentation of this RtfList
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.listLevel">
            <summary>
                The level of this RtfListLevel
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetAlignment">
            <summary>
            </summary>
            <returns>the alignment</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetFirstIndent">
            <summary>
            </summary>
            <returns>the firstIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetFontBullet">
            <summary>
            </summary>
            <returns>the fontBullet</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetFontNumber">
            <summary>
            </summary>
            <returns>the fontNumber</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetLeftIndent">
            <summary>
            </summary>
            <returns>the leftIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetLevelFollowValue">
            <summary>
            </summary>
            <returns>the levelFollowValue</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetLevelTextNumber">
            <summary>
            </summary>
            <returns>the levelTextNumber</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListLevel">
            <summary>
                Gets the list level of this RtfList
            </summary>
            <returns>Returns the list level.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListLevelParent">
            <summary>
            </summary>
            <returns>the listLevelParent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListNoRestart">
            <summary>
            </summary>
            <returns>the listNoRestart</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListStartAt">
            <summary>
            </summary>
            <returns>the listStartAt</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListType">
            <summary>
            </summary>
            <returns>the listType</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetParent">
            <summary>
            </summary>
            <returns>the parent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetRightIndent">
            <summary>
            </summary>
            <returns>the rightIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetSymbolIndent">
            <summary>
            </summary>
            <returns>the symbolIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.IsLegal">
            <summary>
            </summary>
            <returns>the isLegal</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.IsTentative">
            <summary>
            </summary>
            <returns>the isTentative</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetAlignment(System.Int32)">
            <summary>
            </summary>
            <param name="alignment">the alignment to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetBulletCharacter(System.String)">
            <summary>
            </summary>
            <param name="bulletCharacter">the bulletCharacter to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetBulletChunk(iTextSharp.text.Chunk)">
            <summary>
                @since 2.1.4
            </summary>
            <param name="bulletCharacter"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetBulletFont(iTextSharp.text.Font)">
            <summary>
                set the bullet font
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetFirstIndent(System.Int32)">
            <summary>
            </summary>
            <param name="firstIndent">the firstIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetFontBullet(iTextSharp.text.rtf.style.RtfFont)">
            <summary>
            </summary>
            <param name="fontBullet">the fontBullet to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
            <summary>
            </summary>
            <param name="fontNumber">the fontNumber to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLeftIndent(System.Int32)">
            <summary>
            </summary>
            <param name="leftIndent">the leftIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLegal(System.Boolean)">
            <summary>
            </summary>
            <param name="isLegal">the isLegal to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLevelFollowValue(System.Int32)">
            <summary>
            </summary>
            <param name="levelFollowValue">the levelFollowValue to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLevelTextNumber(System.Int32)">
            <summary>
            </summary>
            <param name="levelTextNumber">the levelTextNumber to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListLevel(System.Int32)">
            <summary>
                Sets the list level of this RtfList.
            </summary>
            <param name="listLevel">The list level to set.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListLevelParent(iTextSharp.text.rtf.list.RtfListLevel)">
            <summary>
            </summary>
            <param name="listLevelParent">the listLevelParent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListNoRestart(System.Int32)">
            <summary>
            </summary>
            <param name="listNoRestart">the listNoRestart to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListStartAt(System.Int32)">
            <summary>
            </summary>
            <param name="listStartAt">the listStartAt to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListType(System.Int32)">
            <summary>
            </summary>
            <param name="listType">the listType to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetParent(iTextSharp.text.rtf.list.RtfList)">
            <summary>
            </summary>
            <param name="parent">the parent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetRightIndent(System.Int32)">
            <summary>
            </summary>
            <param name="rightIndent">the rightIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetSymbolIndent(System.Int32)">
            <summary>
            </summary>
            <param name="symbolIndent">the symbolIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetTentative(System.Boolean)">
            <summary>
            </summary>
            <param name="isTentative">the isTentative to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteIndentation(System.IO.Stream)">
            <summary>
                Write the indentation values for this  RtfList .
                @throws IOException On i/o errors.
            </summary>
            <param name="result">The  Stream  to write to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteListBeginning(System.IO.Stream)">
            <summary>
                Writes the initialization part of the RtfList
                @throws IOException On i/o errors.
            </summary>
            <param name="result">The  Stream  to write to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.CorrectIndentation">
            <summary>
                Correct the indentation of this level
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteListNumbers(System.IO.Stream)">
            <summary>
                Writes only the list number and list level number.
                @throws IOException On i/o errors.
            </summary>
            <param name="result">The  Stream  to write to</param>
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListTable">
            <summary>
                The RtfListTable manages all RtfLists in one RtfDocument. It also generates
                the list and list override tables in the document header.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable._listOverride">
            <summary>
                Constant for the list override
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable._listOverrideCount">
            <summary>
                Constant for the list override count
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable._listOverrideTable">
            <summary>
                Constant for the list override table
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable._listTable">
            <summary>
                Constant for the list table
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable._lists">
            <summary>
                The RtfLists managed by this RtfListTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable._picturelists">
            <summary>
                The RtfPictureList lists managed by this RtfListTable
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfListTable for a RtfDocument
            </summary>
            <param name="doc">The RtfDocument this RtfListTable belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the list and list override tables.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.FreeListNumber(iTextSharp.text.rtf.list.RtfList)">
            <summary>
                Remove a RtfList from the list of RtfLists
            </summary>
            <param name="list">The RtfList to remove.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.GetListNumber(iTextSharp.text.rtf.list.RtfList)">
            <summary>
                Gets the id of the specified RtfList. If the RtfList is not yet in the
                list of RtfLists, then it is added.
            </summary>
            <param name="list">The RtfList for which to get the id.</param>
            <returns>The id of the RtfList.</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfPictureList">
            <summary>
                The RtfPictureList2 manages the pictures for lists.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfPictureList._listLevelPicture">
            <summary>
                Constant for determining which picture bullet from the \listpicture destination that should be applied.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfPictureList.WriteContent(System.IO.Stream)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.RtfElement#writeContent(java.io.OutputStream)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfPictureList.WriteDefinition(System.IO.Stream)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.RtfExtendedElement#writeDefinition(java.io.OutputStream)
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener">
            <summary>
                RtfCtrlWordListener  interface for handling events.
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener.BeforeCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
            <returns>null or modified copy of the ctrlWordData object</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener.OnCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
            <returns>null or modified copy of the ctrlWordData object</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener.AfterCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
            <returns>null or modified copy of the ctrlWordData object</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData">
            <summary>
                The control word and parameter information as parsed by the parser.
                Contains the control word,
                Flag indicating if there is a parameter.
                The parameter value as a string.
                Flag indicating the parameter is positive or negative.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.CtrlWord">
            <summary>
                The control word found by the parser
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.HasParam">
            <summary>
                Flag indicating if this keyword has a parameter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.IsNeg">
            <summary>
                Flag indicating if parameter is positive or negative.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.Modified">
            <summary>
                Flag indicating if this object has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.NewGroup">
            <summary>
                Flag indicating a new group
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.Param">
            <summary>
                The parameter for the control word.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.IntValue">
            <summary>
                Return the parameter value as an integer (int) value.
                Returns the parameter value as an int vlaue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.LongValue">
            <summary>
                Return the parameter value as a long value
                Returns the parameter value as a long value
            </summary>
            <returns></returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler">
            <summary>
                RtfCtrlWordBase  is the base class for all
                control word handlers to extend from.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler._debug">
            <summary>
                Debug flag - internal use
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.CtrlWord">
            <summary>
                The control word for this class.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.CtrlWordData">
            <summary>
                The control word as parsed by the parser.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.CtrlWordPrefix">
            <summary>
                The prefix for all control words.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.CtrlWordSuffix">
            <summary>
                The prefix for all control words.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.CtrlWordType">
            <summary>
                Control Word type. Destination, toggle, value, etc.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.DefaultParameterValue">
            <summary>
                The default value for this control word.
                Not all control words use a default parameter value.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.GroupPrefix">
            <summary>
                String containing the value of "{" or "" (blank) depending on if this is the
                first control word in a group.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.PassDefaultParameterValue">
            <summary>
                Does this control word use the default value?
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.RtfParser">
            <summary>
                Local variable referencing the parser object.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.RtfVersionSupported">
            <summary>
                What version of the RTF spec the control word was introduced.
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.SpecialHandler">
            <summary>
                Class, property, etc.
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.#ctor(iTextSharp.text.rtf.parser.RtfParser,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.String,System.String)">
            <summary>
                Constructor:
                The parser for this control word.
                The string value of this control word.
                The default value of this control word. Not all control words have values.
                Flag indicating if this control word should use the default value.
                Indicator of the type of control word this is. DESTINATION|DESTINATION_EX|VALUE|FLAG|TOGGLE|SYMBOL
                String to prefix the ctrl word with. "\" or "\*\" are the 2 used values.
                String to add as suffix to the ctrl word. " " and "" are the 2 used values.
                If TOGGLE then the property name as String (propertyGroup.propertyName format ex. "character.bold")
                If FLAG then the property name as String (propertyGroup.propertyName format ex. "character.bold")
                If VALUE then the property name as String (propertyGroup.propertyName format ex. "character.bold")
                If SYMBOL then the character to use for substitution as String
                If DESTINATION|DESTINATION_EX then the RtfDestination class name as String
                @since 2.0.8
            </summary>
            <param name="rtfParser"></param>
            <param name="ctrlWord"></param>
            <param name="defaultParameterValue"></param>
            <param name="passDefaultParameterValue"></param>
            <param name="ctrlWordType"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="specialHandler"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.HandleControlword(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                The primary control word handler method.
                Called by the parser once it has a control word and parameter if applicable.
                The control word and associated parameter if applicable.
                true  or  false  if the control word was handled.
                @since 2.0.8
            </summary>
            <param name="ctrlWordDataIn"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.AfterControlWord">
            <summary>
                Post-processing after the control word.
                @since 2.0.8
            </summary>
            <returns> false  = stop processing,  true  = continue processing</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.BeforeControlWord">
            <summary>
                Pre-processing before the control word.
                If return value is true, no further processing will be performed on
                this control word.
                @since 2.0.8
            </summary>
            <returns> false  = stop processing,  true  = continue processing</returns>
            <summary>
                Primary purpose is for \* control word and event handling.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.OnControlWord">
            <summary>
                Handle the control word.
                @since 2.0.8
            </summary>
            <returns> true  if control word was handled,  false  if it was not handled.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.printDebug(System.String)">
            <summary>
                Debug function to print class/method
                @since 2.0.8
            </summary>
            <param name="txt">The  String  to output.</param>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap">
            <summary>
                RtfCtrlWords  handles the creation of the control word wiring.
                It is a class containing the hash map of the control words (key)
                and their associated class (value).
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap._ctrlWords">
            <summary>
                1810 control words in Spec v1.9. might be a few more for other apps that implement
            </summary>
            <summary>
                additional control words such as exchange, outlook, etc.
            </summary>
            <summary>
                1810/.9(loadfactor) = 2011.111111...
            </summary>
            <summary>
                set approximate initial size to initial count / load factor.
            </summary>
            <summary>
                Hashtable default size is 16. Load Factor .75
            </summary>
            <summary>
                Control Word Hashtable mapping object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Constructor
                @since 2.0.8
            </summary>
            <param name="rtfParser">The parser object.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap.GetCtrlWordHandler(System.String)">
            <summary>
                Get the Hashtable object containing the control words.
                Initializes the instance if this is the first instantiation
                of RtfCtrlWords class.
                @since 2.0.8
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr">
            <summary>
                RtfCtrlWordMgr  handles the dispatching of control words from
                the table of known control words.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr._listeners">
            <summary>
                The  RtfCtrlWordListener .
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.#ctor(iTextSharp.text.rtf.parser.RtfParser,iTextSharp.text.rtf.parser.PushbackStream)">
            <summary>
                // TIMING DEBUG INFO
            </summary>
            <summary>
                private long endTime = 0;
            </summary>
            <summary>
                private Date endDate = null;
            </summary>
            <summary>
                private long endFree = 0;
            </summary>
            <summary>
                private DecimalFormat df = new DecimalFormat("#,##0");
            </summary>
            <summary>
                private Date startDate = new Date();
            </summary>
            <summary>
                private long startTime = System.CurrentTimeMillis();
            </summary>
            <summary>
                private long startFree = Runtime.GetRuntime().FreeMemory();
            </summary>
            <summary>
                Constructor
            </summary>
            <param name="rtfParser">The parser object this manager works with.</param>
            <param name="reader">the PushbackReader from the tokeniser.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.AddRtfCtrlWordListener(iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener)">
            <summary>
                Adds a  RtfCtrlWordListener  to the  RtfCtrlWordMgr .
                the new RtfCtrlWordListener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.HandleKeyword(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData,System.Int32)">
            <summary>
                Internal to control word manager class.
            </summary>
            <param name="ctrlWordData">The  RtfCtrlWordData  object with control word and param</param>
            <param name="groupLevel">The current document group parsing level</param>
            <returns>errOK if ok, otherwise an error code.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.RemoveRtfCtrlWordListener(iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener)">
            <summary>
                listener methods
            </summary>
            <summary>
                Removes a  RtfCtrlWordListener  from the  RtfCtrlWordMgr .
                the RtfCtrlWordListener that has to be removed.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.dispatchKeyword(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData,System.Int32)">
            <summary>
                Dispatch the token to the correct control word handling object.
            </summary>
            <param name="ctrlWordData">The  RtfCtrlWordData  object with control word and param</param>
            <param name="groupLevel">The current document group parsing level</param>
            <returns>errOK if ok, otherwise an error code.</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType">
            <summary>
                RtfCtrlWordType  indicates the type of control word.
                RTF control words are divided up into:
                Destination, Flag, Value, Toggle, Symbol.
                Destination: The current destination for values and text to be sent.
                Flag: 0/1 value types. Represents true/false, on/off value types.
                Toggle: Flips a Flag value on/off.
                Value: an Integer value data type. (Exception: Some control words this is a long data value type)
                Symbol: Special RTF characters such as \{, \} and others.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.DESTINATION">
            <summary>
                Control word is a destination.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.DESTINATION_EX">
            <summary>
                Control word is a newer destination.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.FLAG">
            <summary>
                Control word is a flag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.SYMBOL">
            <summary>
                Control word is a special symbol.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.TOGGLE">
            <summary>
                Control word is a flag toggle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.UNIDENTIFIED">
            <summary>
                Control word is unidentified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.VALUE">
            <summary>
                Control word is a value.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener">
            <summary>
                RtfDestinationListener  interface for handling events.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.AfterCharacter(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.AfterCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.BeforeCharacter(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.BeforeCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnCharacter(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnCloseGroup">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnOpenGroup">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestination">
            <summary>
                RtfDestination  is the base class for destinations according
                to the RTF Specification. All destinations must extend from this class.
                @author Howard Shank (hgshank@yahoo.com
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination._listeners">
            <summary>
                The  RtfDestinationListener .
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.LastCtrlWord">
            <summary>
                The last control word handled by this destination
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.Modified">
            <summary>
                Is data in destination modified?
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.RtfParser">
            <summary>
                Parser object
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Constructor
            </summary>
            <param name="parser"> RtfParser  object.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.AddListener(iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
            <summary>
                Adds a  RtfDestinationListener  to the  RtfDestinationMgr .
                the new RtfDestinationListener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.CloseDestination">
            <summary>
                Clean up when destination is closed.
            </summary>
            <returns>true if handled, false if not handled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleCharacter(System.Int32)">
            <summary>
                Handle text for this destination
            </summary>
            <returns>true if handled, false if not handled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleCloseGroup">
            <summary>
                Clean up when group is closed.
            </summary>
            <returns>true if handled, false if not handled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleControlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                Handle control word for this destination
            </summary>
            <param name="ctrlWordData">The control word and parameter information object</param>
            <returns>true if handled, false if not handled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleOpenGroup">
            <summary>
                Setup when group is opened.
            </summary>
            <returns>true if handled, false if not handled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleOpeningSubGroup">
            <summary>
                Handle a new subgroup contained within this group
            </summary>
            <returns>true if handled, false if not handled</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.IsModified">
            <summary>
                Method to indicate if data in this destination has changed.
            </summary>
            <returns>true if modified, false if not modified.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.RemoveListener(iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
            <summary>
                listener methods
            </summary>
            <summary>
                Removes a  RtfDestinationListener  from the  RtfDestinationMgr .
                the RtfCtrlWordListener that has to be removed.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.SetParser(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Set the parser to use with the RtfDestination object.
            </summary>
            <param name="parser">The RtfParser object.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.SetToDefaults">
            <summary>
                Method to set this object to the default values. Must be implemented in child class.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.AfterCharacter(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.AfterCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.BeforeCharacter(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnCharacter(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnCloseGroup">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnOpenGroup">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable">
            <summary>
                RtfDestinationColorTable  handles data destined for the color table destination
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._blue">
            <summary>
                The blue component of the current color being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._colorMap">
            <summary>
                Color map object for conversions
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._colorNr">
            <summary>
                The number of the current color being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._cshade">
            <summary>
                Specifies the shade when specifying a theme color.
                RTF control word cshade
                0 - 255: 0 = full Shade(black), 255 = no shade.
                Default value: 255
                If shade is specified and is less than 255, ctint must equal 255.
                cshade/ctint are mutually exclusive
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#ctint
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#themeColor
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._ctint">
            <summary>
                Color themes - Introduced Word 2007
            </summary>
            <summary>
                Specifies the tint when specifying a theme color.
                RTF control word ctint
                0 - 255: 0 = full Tint(white), 255 = no tint.
                Default value: 255
                If tint is specified and is less than 255, cshade must equal 255.
                ctint/cshade are mutually exclusive
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#cshade
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#themeColor
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._green">
            <summary>
                The green component of the current color being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._importHeader">
            <summary>
                The RtfImportHeader to add color mappings to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._red">
            <summary>
                The red component of the current color being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable._themeColor">
            <summary>
                Specifies the use of a theme color.
                @see com.lowagie.text.rtf.parser.enumerations.RtfColorThemes
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#ctint
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#cshade
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Constructs a new RtfColorTableParser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.GetColor(System.String)">
            <summary>
                conversion functions
            </summary>
            <summary>
                Get the  Color  object that is mapped to the key.
                *@return  Color  object from the map. null if key does not exist.
            </summary>
            <param name="key">The map number.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetToDefaults">
            <summary>
                Set default values.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.processColor">
            <summary>
                Processes the color triplet parsed from the document.
                Add it to the import mapping so colors can be mapped when encountered
                in the RTF import or conversion.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.setBlue(System.Int32)">
            <summary>
                Set the blue color value.
            </summary>
            <param name="value">Value to set blue to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.setGreen(System.Int32)">
            <summary>
                Set the green color value.
            </summary>
            <param name="value">Value to set green to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.setRed(System.Int32)">
            <summary>
                Set the red color to value.
            </summary>
            <param name="value">Value to set red to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.setShade(System.Int32)">
            <summary>
                Set the shade value
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#cshade
            </summary>
            <param name="value">Value to set the shade to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.setThemeColor(System.Int32)">
            <summary>
                Set the theme color value.
                @see com.lowagie.text.rtf.parser.enumerations.RtfColorThemes
            </summary>
            <param name="value">Value to set the theme color to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.setTint(System.Int32)">
            <summary>
                Set the tint value
                @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#ctint
            </summary>
            <param name="value">Value to set the tint to</param>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument">
            <summary>
                RtfDestinationDocument  handles data destined for the document destination
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument._conversionType">
            <summary>
                Indicates the parser action. Import or Conversion.
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_UNIDENTIFIED
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_CONVERT
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FRAGMENT
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FULL
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument._doc">
            <summary>
                The iText Document object.
                @see com.lowagie.text.Document
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument._rtfDoc">
            <summary>
                The RtfDocument object.
                @see com.lowagie.text.rtf.document.RtfDocument
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument._tableLevel">
            <summary>
                Indicates the current table level being processed
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Constructs a new  RtfDestinationDocument  using
                the parameters to initialize the object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.AfterPropertyChange(System.String)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.properties.RtfPropertyListener#afterChange(java.lang.String)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.BeforePropertyChange(System.String)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.properties.RtfPropertyListener#beforeChange(java.lang.String)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.CloseDestination">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.HandleCloseGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#setDefaults()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.writeBuffer">
            <summary>
                Write the accumulated buffer to the destination.
                Used for direct content
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.writeText(System.String)">
            <summary>
                Write the string value to the destiation.
                Used for direct content
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable">
            <summary>
                RtfDestinationFontTable  handles data destined for the font table destination
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SettingAlternate">
            <summary>
                \falt
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SettingFontEmbed">
            <summary>
                \fontemb
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SettingFontFile">
            <summary>
                \ffile
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SettingFontname">
            <summary>
                \fname
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SettingNormal">
            <summary>
                state values
            </summary>
            <summary>
                Normal
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SettingPanose">
            <summary>
                \panose
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._charset">
            <summary>
                The \charset value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._cpg">
            <summary>
                The \cpg value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._falt">
            <summary>
                The \falt alternate font if primary font is not available.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._fbias">
            <summary>
                The \falt alternate font if primary font is not available.
            </summary>
            <summary>
                private String fontemb = "";
            </summary>
            <summary>
                The \falt alternate font if primary font is not available.
            </summary>
            <summary>
                private String fontType = "";
            </summary>
            <summary>
                The \falt alternate font if primary font is not available.
            </summary>
            <summary>
                private String fontFile = "";
            </summary>
            <summary>
                The \falt alternate font if primary font is not available.
            </summary>
            <summary>
                private String fontFileCpg = "";
            </summary>
            <summary>
                The \fbias value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._fontFamily">
            <summary>
                The family of the font being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._fontMap">
            <summary>
                Convert font mapping to  FontFactory  font objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._fontName">
            <summary>
                The \*\fname
            </summary>
            <summary>
                private String nontaggedname = "";
            </summary>
            <summary>
                The name of the font being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._fontNr">
            <summary>
                The number of the font being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._fprq">
            <summary>
                The \fprq
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._importHeader">
            <summary>
                The RtfImportHeader to add font mappings to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._panose">
            <summary>
                The \*\panose font matching value if primary font is not available.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._state">
            <summary>
                state flag to handle different parsing of a font element
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._themeFont">
            <summary>
                The theme (Office 2007)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable._trueType">
            <summary>
                The \fnil, \fttruetype value
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Constructs a new RtfFontTableParser.
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.CloseDestination">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.GetFont(System.String)">
            <summary>
                Get a  Font  object from the font map object
                @since 2.0.8
            </summary>
            <param name="key">The font number to get</param>
            <returns>The mapped  Font  object.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(char[])
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.HandleCloseGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.HandleControlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                (non-Javadoc)
                @see
                com.lowagie.text.rtf.parser.destinations.RtfDestination#handleControlWord(com.lowagie.text.rtf.parser.ctrlwords.RtfCtrlWordData)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetBias(System.String)">
            <summary>
                Set the font bias
                @since 2.0.8
            </summary>
            <param name="value">Bias value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetCharset(System.String)">
            <summary>
                Set the character-set to the parsed value.
                @since 2.0.8
            </summary>
            <param name="charset">The charset value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetCodePage(System.String)">
            <summary>
                Set the code page
                @since 2.0.8
            </summary>
            <param name="value">The code page value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontAlternate(System.String)">
            <summary>
                Set the alternate font name.
                @since 2.0.8
            </summary>
            <param name="fontAlternate">The falt font value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontFamily(System.String)">
            <summary>
                Set the font family to the parsed value.
                @since 2.0.8
            </summary>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontName(System.String)">
            <summary>
                Set the font name to the parsed value.
                @since 2.0.8
            </summary>
            <param name="fontName">The font name.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontNumber(System.String)">
            <summary>
                Set the font number to the parsed value.
                This is used for mapping fonts to the new font numbers
                @since 2.0.8
            </summary>
            <param name="fontNr">The font number.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetParser(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#setParser(com.lowagie.text.rtf.parser.RtfParser)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetPitch(System.String)">
            <summary>
                Set the font pitch
                @since 2.0.8
            </summary>
            <param name="value">Pitch value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetThemeFont(System.String)">
            <summary>
                Set the font theme
                @since 2.0.8
            </summary>
            <param name="themeFont">Theme value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#setDefaults()
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetTrueType(System.String)">
            <summary>
                Set the TrueTtype type
                @since 2.0.8
            </summary>
            <param name="value">The type</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.createfont(System.String)">
            <summary>
                Create a font via the  FontFactory
                @since 2.0.8
            </summary>
            <param name="fontName">The font name to create</param>
            <returns>The created  Font  object</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.importSystemFonts">
            <summary>
                Load system fonts into the static  FontFactory  object
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.init(System.Boolean)">
            <summary>
                Initialize the object.
                @since 2.0.8
            </summary>
            <param name="importFonts">true to import the fonts into the FontFactory, false do not load fonts</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.processFont">
            <summary>
                Process the font information that was parsed from the input.
                @since 2.0.8
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo">
            <summary>
                RtfDestinationInfo  handles data destined for the info destination
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.#ctor(iTextSharp.text.rtf.parser.RtfParser,System.String)">
            <summary>
                Constructs a new RtfDestinationInfo.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.CloseDestination">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(char[])
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.HandleCloseGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.HandleControlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                (non-Javadoc)
                @see
                com.lowagie.text.rtf.parser.destinations.RtfDestination#handleControlWord(com.lowagie.text.rtf.parser.ctrlwords.RtfCtrlWordData)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#setToDefaults()
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable">
            <summary>
                RtfDestinationListTable  handles data destined for the List Table destination
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable._importHeader">
            <summary>
                The RtfImportHeader to add List mappings to.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.CloseDestination">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.HandleCloseGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#setToDefaults()
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr">
            <summary>
                RtfDestinationMgr  manages destination objects for the parser
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.DESTINATION_DOCUMENT">
            <summary>
                String representation of document destination.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.DESTINATION_NULL">
            <summary>
                String representation of null destination.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr._destinationObjects">
            <summary>
                Destination objects.
                There is only one of each destination.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr._destinations">
            <summary>
                CtrlWord :: Destination map object.
                Maps control words to their destinations objects.
                Null destination is a special destination used for
                discarding unwanted data. This is primarily used when
                skipping groups, binary data or unwanted/unknown data.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr._instance">
            <summary>
                Destinations
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.#ctor">
            <summary>
                Hidden default constructor becuase
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.AddListener(System.String,iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
            <summary>
                Adds a  RtfDestinationListener  to the appropriate  RtfDestination .
                the new RtfDestinationListener.
            </summary>
            <param name="destination">the destination string for the listener</param>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.RemoveListener(System.String,iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
            <summary>
                listener methods
            </summary>
            <summary>
                Removes a  RtfDestinationListener  from the appropriate  RtfDestination .
                the RtfCtrlWordListener that has to be removed.
            </summary>
            <param name="destination">the destination string for the listener</param>
            <param name="listener"></param>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull">
            <summary>
                RtfDestinationNull  is for discarded entries. They go nowhere.
                If a control word destination is unknown or ignored, this is the destination
                that should be set.
                All methods return true indicating they were handled.
                This is a unique destination in that it is a singleton.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.#ctor">
            <summary>
                Constructs a new RtfDestinationNull.
                This constructor is hidden for internal use only.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                Constructs a new RtfDestinationNull.
                This constructor is hidden for internal use only.
            </summary>
            <param name="parser">Unused value</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.GetInstance">
            <summary>
                Get the singleton instance of RtfDestinationNull object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.CloseDestination">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.HandleCloseGroup">
            <summary>
                Interface definitions
            </summary>
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.HandleControlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                (non-Javadoc)
                @see
                com.lowagie.text.rtf.parser.destinations.RtfDestination#handleControlWord(com.lowagie.text.rtf.parser.ctrlwords.RtfCtrlWordData)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#setDefaults()
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict">
            <summary>
                RtfDestinationShppict  handles data destined for picture destinations
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.FORMAT_HEXADECIMAL">
            <summary>
                data
            </summary>
            <summary>
                binN
            </summary>
            <summary>
                0 = HEX, 1 = BINARY
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.Normal">
            <summary>
                blipupiN
            </summary>
            <summary>
                private int unitsPerInch = 0;
            </summary>
            <summary>
                bliptagN
            </summary>
            <summary>
                private String tag = "";
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.PixelTwipsFactor">
            <summary>
                private int state = NORMAL;
            </summary>
            <summary>
                Constant for converting pixels to twips
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._cropBottom">
            <summary>
                piccropbN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._cropLeft">
            <summary>
                piccroplN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._cropRight">
            <summary>
                piccroprN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._cropTop">
            <summary>
                picscaled - macpict setting
            </summary>
            <summary>
                private bool scaled = false;
            </summary>
            <summary>
                picprop
            </summary>
            <summary>
                private bool inlinePicture = false;
            </summary>
            <summary>
                defshp
            </summary>
            <summary>
                private bool wordArt = false;
            </summary>
            <summary>
                piccroptN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._dataFormat">
            <summary>
                metafileinfo
            </summary>
            <summary>
                picbmp
            </summary>
            <summary>
                private bool bitmap = false;
            </summary>
            <summary>
                picbppN - Valid 1,4,8,24
            </summary>
            <summary>
                private int bbp = 1;
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._desiredHeight">
            <summary>
                picgoalN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._desiredWidth">
            <summary>
                picwgoalN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._height">
            <summary>
                pichN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._scaleX">
            <summary>
                picscalexN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._scaleY">
            <summary>
                picscaleyN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict._width">
            <summary>
                pictsize
            </summary>
            <summary>
                picwN Ext field if the picture is a Windows metafile; picture width in pixels if the picture is a bitmap or
            </summary>
            <summary>
                from quickdraw
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.#ctor">
            <summary>
                bitapinfo
            </summary>
            <summary>
                wbmbitspixelN - number of bits per pixel - 1 monochrome, 4 16 color, 8 256 color, 24 RGB - Default 1
            </summary>
            <summary>
                private int bitsPerPixel = 1;
            </summary>
            <summary>
                wbmplanesN - number of color planes - must be 1
            </summary>
            <summary>
                private int planes = 1;
            </summary>
            <summary>
                wbmwidthbytesN - number of bytes in each raster line
            </summary>
            <summary>
                private int widthBytes = 0;
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            <summary>
                shppict - Destination
            </summary>
            <summary>
                nonshpict - Destination - SKIP THIS
            </summary>
            <summary>
                macpict - Mac QuickDraw- NOT HANDLED
            </summary>
            <summary>
                pmmetafileN - OS/2 Metafile - NOT HANDLED
            </summary>
            <summary>
                N * Meaning
            </summary>
            <summary>
                0x0004 PU_ARBITRARY
            </summary>
            <summary>
                0x0008 PU_PELS
            </summary>
            <summary>
                0x000C PU_LOMETRIC
            </summary>
            <summary>
                0x0010 PU_HIMETRIC
            </summary>
            <summary>
                0x0014 PU_LOENGLISH
            </summary>
            <summary>
                0x0018 PU_HIENGLISH
            </summary>
            <summary>
                0x001C PU_TWIPS
            </summary>
            <summary>
                private int pmmetafile = 0;
            </summary>
            <summary>
                wmetafileN Image.RIGINAL_WMF = 6;
            </summary>
            <summary>
                N * Type
            </summary>
            <summary>
                1 = MM_TEXT
            </summary>
            <summary>
                2 = M_LOMETRIC
            </summary>
            <summary>
                3 = MM_HIMETRIC
            </summary>
            <summary>
                4 = MM_LOENGLISH
            </summary>
            <summary>
                5 = MM_HIENGLISH
            </summary>
            <summary>
                6 = MM_TWIPS
            </summary>
            <summary>
                7 = MM_ISOTROPIC
            </summary>
            <summary>
                8 = MM_ANISOTROPIC
            </summary>
            <summary>
                dibitmapN - DIB - Convert to BMP?
            </summary>
            <summary>
                wbitmapN Image.ORIGINAL_BMP = 4;
            </summary>
            <summary>
                Constructs a new RtfDestinationShppict.
            </summary>
        </member>
        <member name="P:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.PictureType">
            <summary>
                picttype
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.CloseDestination">
            <summary>
                emfblip - EMF (nhanced metafile) - NOT HANDLED
            </summary>
            <summary>
                pngblip int ORIGINAL_PNG = 2;
            </summary>
            <summary>
                jpegblip Image.ORIGINAL_JPEG = 1; ORIGINAL_JPEG2000 = 8;
            </summary>
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.HandleCloseGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#setDefaults()
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable">
            <summary>
                RtfDestinationStylesheetTable  handles data destined for the
                Stylesheet Table destination
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._adustRightIndent">
            <summary>
                Automatically adjust right indentation when docunent grid is defined
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._alignment">
            <summary>
                Alignment
            </summary>
            <summary>
                Alignment - page 85
                \qc, \qj, \ql, \qr, \qd, \qkN, \qt
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._autoSpaceBetweenDbcEnglish">
            <summary>
                Asian Typography
            </summary>
            <summary>
                auto spacing betwee DBC and English
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._autoSpaceBetweenDbcNumbers">
            <summary>
                auto spacing betwee DBC and numbers
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._firstLineIndent">
            <summary>
                Indentation
            </summary>
            <summary>
                First line indentation.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._importHeader">
            <summary>
            </summary>
            <summary>
                The RtfImportHeader to add color mappings to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._justificationPercentage">
            <summary>
                Percentage of line occupied by Kashida justification (0 � low, 10 � medium, 20 � high).
                \qkN
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._leftIndent">
            <summary>
                Left indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._mirrorIndent">
            <summary>
                Mirror indents?
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._noCharacterWrapping">
            <summary>
                No Character wrapping
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._noOverflowPeriodComma">
            <summary>
                No overflow period and comma
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._noWordWrapping">
            <summary>
                No Word wrapping
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._overrideWidowControl">
            <summary>
                Document Foratting Properties
            </summary>
            <summary>
                Override orphan/widow control.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._rightIndent">
            <summary>
                Right indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._styleNr">
            <summary>
                RtfParagraphStyle  object for setting styleshee values
                as they are parsed from the input.
            </summary>
            <summary>
                private RtfParagraphStyle rtfParagraphStyle = null;
            </summary>
            <summary>
                RTF Style number from stylesheet table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable._styleType">
            <summary>
                What kind of style is this, Paragraph or Character or Table
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.CloseDestination">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#closeDestination()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAdustRightIndent">
            <summary>
                Get the right indent adjustment value
            </summary>
            <returns>the adustRightIndent value</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAlignment">
            <summary>
                Get the alignment value.
            </summary>
            <returns>The alignment value.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAutoSpaceBetweenDbcEnglish">
            <summary>
                Get the auto space between DBC and English indicator.
            </summary>
            <returns>the autoSpaceBetweenDBCEnglish</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAutoSpaceBetweenDbcNumbers">
            <summary>
                Get the auto space between DBC and Numbers indicator.
            </summary>
            <returns>the autoSpaceBetweenDBCNumbers</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetFirstLineIndent">
            <summary>
                Get the first line indent value.
            </summary>
            <returns>the firstLineIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetIndent">
            <summary>
                Get the left indent value
            </summary>
            <returns>the left indent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetJustificationPercentage">
            <summary>
                Get the justification percentage.
            </summary>
            <returns>The justification percentage value.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetLeftIndent">
            <summary>
                Get the left indent value
            </summary>
            <returns>the leftIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetMirrorIndent">
            <summary>
                Get the value indicating if document has mirrored indents.
            </summary>
            <returns>the mirrorIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetNoCharacterWrapping">
            <summary>
                Get no character wrapping indicator.
            </summary>
            <returns>the noCharacterWrapping</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetNoOverflowPeriodComma">
            <summary>
                Get the no overflow period comma indicator.
            </summary>
            <returns>the noOverflowPeriodComma</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetNoWordWrapping">
            <summary>
                Get the no word wrapping indicator.
            </summary>
            <returns>the noWordWrapping</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetOverrideWidowControl">
            <summary>
                Get the ovirride widow control value.
            </summary>
            <returns>the overrideWidowControl</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetRightIndent">
            <summary>
                Get the right indent value.
            </summary>
            <returns>the rightIndent</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetStyleNr">
            <summary>
                Get this style number.
            </summary>
            <returns>the styleNr</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetStyleType">
            <summary>
                Get this style type.
                For example Style, Character Style, etc.
            </summary>
            <returns>the styleType</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.HandleCharacter(System.Int32)">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleCharacter(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.HandleCloseGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupEnd()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.HandleOpenGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.direct.RtfDestination#handleGroupStart()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.HandleOpeningSubGroup">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#handleOpenNewGroup()
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAdustRightIndent(System.Int32)">
            <summary>
                Set the right indent adjustment value
            </summary>
            <param name="adustRightIndent">the adustRightIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAlignment(System.Int32)">
            <summary>
                Set the alignment value from the parsed value.
            </summary>
            <param name="alignment">The alignment value.</param>
            <returns>The alignment value.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAutoSpaceBetweenDbcEnglish(System.Int32)">
            <summary>
                Set the auto space between DBC and English indicator.
            </summary>
            <param name="autoSpaceBetweenDbcEnglish">the autoSpaceBetweenDBCEnglish to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAutoSpaceBetweenDbcNumbers(System.Int32)">
            <summary>
                Set the auto space between DBC and Numbers indicator.
            </summary>
            <param name="autoSpaceBetweenDbcNumbers">the autoSpaceBetweenDBCNumbers to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetFirstLineIndent(System.Int32)">
            <summary>
                Set the first line indent value.
            </summary>
            <param name="firstLineIndent">the firstLineIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetIndent(System.Int32)">
            <summary>
                Set the left indent value from the value parsed.
            </summary>
            <param name="indent">the left indent value.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetJustificationPercentage(System.Int32)">
            <summary>
                Set the justification percentage from parsed value.
            </summary>
            <param name="percent">The justification percentage</param>
            <returns>The justification percentage</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetLeftIndent(System.Int32)">
            <summary>
                Set the left indent value
            </summary>
            <param name="leftIndent">the leftIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetMirrorIndent(System.Int32)">
            <summary>
                Set the mirrored indent value from the parsed value.
            </summary>
            <param name="mirrorIndent">the mirrorIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetNoCharacterWrapping(System.Int32)">
            <summary>
                Set the no character wrapping indicator from parsed value
            </summary>
            <param name="noCharacterWrapping">the noCharacterWrapping to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetNoOverflowPeriodComma(System.Int32)">
            <summary>
                Set the no overflow period comma indicator from the parsed value.
            </summary>
            <param name="noOverflowPeriodComma">the noOverflowPeriodComma to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetNoWordWrapping(System.Int32)">
            <summary>
                Set the no word wrapping indicator from the parsed value.
            </summary>
            <param name="noWordWrapping">the noWordWrapping to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetOverrideWidowControl(System.Int32)">
            <summary>
                Set the override widow control.
            </summary>
            <param name="overrideWidowControl">the overrideWidowControl to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetRightIndent(System.Int32)">
            <summary>
                Set the right indent value.
            </summary>
            <param name="rightIndent">the rightIndent to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetStyleNr(System.Int32)">
            <summary>
                Set this style number from the parsed value.
            </summary>
            <param name="styleNr">the styleNr to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetStyleType(System.Int32)">
            <summary>
                Set the style type.
            </summary>
            <param name="styleType">the styleType to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetToDefaults">
            <summary>
                (non-Javadoc)
                @see com.lowagie.text.rtf.parser.destinations.RtfDestination#setToDefaults()
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.enumerations.RtfColorThemes">
            <summary>
                Specifies the color theme values for use in Color Tables.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.exceptions.RtfParserException">
            <summary>
                Signals that an error has occurred in a  RtfParser .
            </summary>
            <summary>
                RtfParserException  is the exception object thrown by
                the parser
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfParserException.#ctor(System.Exception)">
            <summary>
                Creates a RtfParserException object.
            </summary>
            <param name="ex">an exception that has to be turned into a RtfParserException</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfParserException.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  RtfParserException  whithout a message.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfParserException.#ctor(System.String)">
            <summary>
                Constructs a  RtfParserException  with a message.
            </summary>
            <param name="message">a message describing the exception</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfUnknownCtrlWordException.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a  RtfParserException  whithout a message.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.properties.IRtfPropertyListener">
            <summary>
                RtfPropertyListener  interface for handling events.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.IRtfPropertyListener.BeforePropertyChange(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.IRtfPropertyListener.AfterPropertyChange(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.properties.RtfProperty">
            <summary>
                RtfProperty  handles document, paragraph, etc. property values
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.CHARACTER_BOLD">
            <summary>
                character properties
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.COLOR">
            <summary>
                property groups
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.COLOR_FG">
            <summary>
                color properties
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_CENTER">
            <summary>
                Justify center
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_FULL">
            <summary>
                Justify full
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_LEFT">
            <summary>
                paragraph properties
            </summary>
            <summary>
                Justify left
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_RIGHT">
            <summary>
                Justify right
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PAGE_LANDSCAPE">
            <summary>
                Landscape orientation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PAGE_PORTRAIT">
            <summary>
                document properties
            </summary>
            <summary>
                Portrait orientation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_BOTTOM">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_DIAGONAL_UL_LR">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_DIAGONAL_UR_LL">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_LEFT">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_NIL">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_RIGHT">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_TABLE_HORIZONTAL">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_TABLE_VERTICAL">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_TOP">
            <summary>
                possible border settting
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_DECIMAL">
            <summary>
                section properties
            </summary>
            <summary>
                Decimal number format
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_LETTER_LOWERCASE">
            <summary>
                Lowercase Letter
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_LETTER_UPPERCASE">
            <summary>
                Uppercase Letter
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_ROMAN_NUMERAL_LOWERCASE">
            <summary>
                Lowercase Roman Numeral
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_ROMAN_NUMERAL_UPPERCASE">
            <summary>
                Uppercase Roman Numeral
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_COLUMN">
            <summary>
                Section Break Column break
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_EVEN">
            <summary>
                Section Break Even page break
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_NONE">
            <summary>
                Section Break None
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_ODD">
            <summary>
                Section Break Odd page break
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_PAGE">
            <summary>
                Section Break Page break
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty._listeners">
            <summary>
                The  RtfPropertyListener .
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.Properties">
            <summary>
                Properties for this RtfProperty object
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.AddRtfPropertyListener(iTextSharp.text.rtf.parser.properties.IRtfPropertyListener)">
            <summary>
                Adds a  RtfPropertyListener  to the  RtfProperty .
                the new RtfPropertyListener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.GetProperties(System.String)">
            <summary>
                Get a group of properties.
            </summary>
            <param name="propertyGroup">The group name to obtain.</param>
            <returns>Properties object with requested values.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.GetProperty(System.String)">
            <summary>
                Get the value of the property identified by the parameter.
            </summary>
            <param name="propertyName">String containing the property name to get</param>
            <returns>Property Object requested or null if not found in map.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModified">
            <summary>
            </summary>
            <returns>the modified</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedCharacter">
            <summary>
            </summary>
            <returns>the modifiedCharacter</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedDocument">
            <summary>
            </summary>
            <returns>the modifiedDocument</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedParagraph">
            <summary>
            </summary>
            <returns>the modifiedParagraph</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedSection">
            <summary>
            </summary>
            <returns>the modifiedSection</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.RemoveRtfPropertyListener(iTextSharp.text.rtf.parser.properties.IRtfPropertyListener)">
            <summary>
                Removes a  RtfPropertyListener  from the  RtfProperty .
                the new RtfPropertyListener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModified(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="propertyName">the propertyName that is modified</param>
            <param name="modified">the modified to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedCharacter(System.Boolean)">
            <summary>
            </summary>
            <param name="modifiedCharacter">the modifiedCharacter to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedDocument(System.Boolean)">
            <summary>
            </summary>
            <param name="modifiedDocument">the modifiedDocument to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedParagraph(System.Boolean)">
            <summary>
            </summary>
            <param name="modifiedParagraph">the modifiedParagraph to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedSection(System.Boolean)">
            <summary>
            </summary>
            <param name="modifiedSection">the modifiedSection to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetProperty(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                Set the value of the property identified by the parameter.
            </summary>
            <param name="ctrlWordData">The controlword with the name to set</param>
            <returns> true  for handled or  false  if  propertyName  or  propertyValue  is  null </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetToDefault">
            <summary>
                Set all property objects to default values.
                @since 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetToDefault(System.String)">
            <summary>
                Set individual property group to default values.
                @since 2.0.8
            </summary>
            <param name="propertyGroup"> String  name of the property group to set to default.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.ToggleProperty(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                Toggle the value of the property identified by the  RtfCtrlWordData.specialHandler  parameter.
                Toggle values are assumed to be integer values per the RTF spec with a value of 0=off or 1=on.
            </summary>
            <param name="ctrlWordData">The property name to set</param>
            <returns> true  for handled or  false  if  propertyName  is  null  or <i>blank</i></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.addToProperty(System.String,System.Int32)">
            <summary>
                Add the value of the property identified by the parameter.
            </summary>
            <param name="propertyName">The property name to set</param>
            <param name="propertyValue">The object to set the property value to</param>
            <returns> true  for handled or  false  if  propertyName  is  null </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.addToProperty(System.String,System.Int64)">
            <summary>
                Add the value of the property identified by the parameter.
            </summary>
            <param name="propertyName">The property name to set</param>
            <param name="propertyValue">The object to set the property value to</param>
            <returns> true  for handled or  false  if  propertyName  is  null </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.setProperty(System.String,System.Object)">
            <summary>
                Set the value of the property identified by the parameter.
            </summary>
            <param name="propertyName">The property name to set</param>
            <param name="propertyValueNew">The object to set the property value to</param>
            <returns> true  for handled or  false  if  propertyName  or  propertyValue  is  null </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.setProperty(System.String,System.Int32)">
            <summary>
                Set the value of the property identified by the parameter.
            </summary>
            <param name="propertyName">The property name to set</param>
            <param name="propertyValueNew">The object to set the property value to</param>
            <returns> true  for handled or  false  if  propertyName  is  null </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.setProperty(System.String,System.Int64)">
            <summary>
                Set the value of the property identified by the parameter.
            </summary>
            <param name="propertyName">The property name to set</param>
            <param name="propertyValueNew">The object to set the property value to</param>
            <returns> true  for handled or  false  if  propertyName  is  null </returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfImportMappings">
            <summary>
                The RtfImportMappings make it possible to define font
                and color mappings when using the RtfWriter2.importRtfFragment
                method. This is necessary, because a RTF fragment does not
                contain font or color information, just references to the
                font and color tables.<br /><br />
                The font mappings are fontNr -&gt; fontName and the color
                mappigns are colorNr -&gt; Color.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings._colorMappings">
            <summary>
                The colorNr to Color mappings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings._fontMappings">
            <summary>
                The fontNr to fontName mappings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings._listMappings">
            <summary>
                The listNr to List mappings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings._stylesheetListMappings">
            <summary>
                The sytlesheetListNr to Stylesheet mappings.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.#ctor">
            <summary>
                Constructs a new RtfImportMappings initialising the mappings.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddColor(System.String,iTextSharp.text.BaseColor)">
            <summary>
                Add a color to the list of mappings.
            </summary>
            <param name="colorNr">The color number.</param>
            <param name="color">The Color.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddFont(System.String,System.String)">
            <summary>
                Add a font to the list of mappings.
            </summary>
            <param name="fontNr">The font number.</param>
            <param name="fontName">The font name.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddList(System.String,System.String)">
            <summary>
                Add a List to the list of mappings.
            </summary>
            <param name="listNr">The List number.</param>
            <param name="list">The List.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddStylesheetList(System.String,System.String)">
            <summary>
                Add a Stylesheet List to the list of mappings.
            </summary>
            <param name="stylesheetListNr">The Stylesheet List number.</param>
            <param name="list">The StylesheetList.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetColorMappings">
            <summary>
                Gets the list of color mappings. String to Color.
            </summary>
            <returns>The color mappings.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetFontMappings">
            <summary>
                Gets the list of font mappings. String to String.
            </summary>
            <returns>The font mappings.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetListMappings">
            <summary>
                Gets the list of List mappings.
            </summary>
            <returns>The List mappings.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetStylesheetListMappings">
            <summary>
                Gets the list of Stylesheet mappings. .
            </summary>
            <returns>The Stylesheet List mappings.</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfImportMgr">
            <summary>
                The RtfImportHeader stores the docment header information from
                an RTF document that is being imported. Currently font and
                color settings are stored. The RtfImportHeader maintains a mapping
                from font and color numbers from the imported RTF document to
                the RTF document that is the target of the import. This guarantees
                that the merged document has the correct font and color settings.
                It also handles other list based items that need mapping, for example
                stylesheets and lists.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Howard Shank (hgshank@yahoo.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr._importColorMapping">
            <summary>
                The Hashtable storing the color number mapings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr._importFontMapping">
            <summary>
                TODO: Add list, stylesheet, info, etc. mappings
            </summary>
            <summary>
                The Hashtable storing the font number mappings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr._importListMapping">
            <summary>
                The Hashtable storing the List number mapings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr._importStylesheetListMapping">
            <summary>
                The Hashtable storing the Stylesheet List number mapings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr._rtfDoc">
            <summary>
                The RtfDocument to get font and color numbers from.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr._doc">
            <summary>
                The Document.
                Used for conversions, but not imports.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Document)">
            <summary>
                Constructs a new RtfImportHeader.
            </summary>
            <param name="rtfDoc">The RtfDocument to get font and color numbers from.</param>
            <param name="doc"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportColor(System.String,iTextSharp.text.BaseColor)">
            <summary>
                Imports a color value. The color number for the color defined
                by its red, green and blue values is determined and then the
                resulting mapping is added.
            </summary>
            <param name="colorNr">The original color number.</param>
            <param name="color">The color to import.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportFont(System.String,System.String)">
            <summary>
                Imports a font. The font name is looked up in the RtfDocumentHeader and
                then the mapping from original font number to actual font number is added.
            </summary>
            <param name="fontNr">The original font number.</param>
            <param name="fontName">The font name to look up.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportFont(System.String,System.String,System.Int32)">
            <summary>
                Imports a font. The font name is looked up in the RtfDocumentHeader and
                then the mapping from original font number to actual font number is added.
            </summary>
            <param name="fontNr">The original font number.</param>
            <param name="fontName">The font name to look up.</param>
            <param name="charset">The characterset to use for the font.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportFont(System.String,System.String,System.String,System.Int32)">
            <summary>
                Imports a font. The font name is looked up in the RtfDocumentHeader and
                then the mapping from original font number to actual font number is added.
            </summary>
            <param name="fontNr">The original font number.</param>
            <param name="fontName">The font name to look up.</param>
            <param name="fontFamily"></param>
            <param name="charset">The characterset to use for the font.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportList(System.String,System.String)">
            <summary>
                Imports a List value. The List number for the List defined
                is determined and then the resulting mapping is added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportStylesheetList(System.String,iTextSharp.text.List)">
            <summary>
                Imports a stylesheet list value. The stylesheet number for the stylesheet defined
                is determined and then the resulting mapping is added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapColorNr(System.String)">
            <summary>
                Performs the mapping from the original font number to the actual font
                number used in the RTF document. If the color number was not
                seen during import (thus no mapping) then 0 is returned, guaranteeing
                that the color number is always valid.
            </summary>
            <param name="colorNr">The color number to map.</param>
            <returns>The mapped color number</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapFontNr(System.String)">
            <summary>
                Performs the mapping from the original font number to the actual
                font number in the resulting RTF document. If the font number was not
                seen during import (thus no mapping) then 0 is returned, guaranteeing
                that the font number is always valid.
            </summary>
            <param name="fontNr">The font number to map.</param>
            <returns>The mapped font number.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapListNr(System.String)">
            <summary>
                Performs the mapping from the original list number to the actual
                list number in the resulting RTF document. If the list number was not
                seen during import (thus no mapping) then 0 is returned, guaranteeing
                that the list number is always valid.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapStylesheetListNr(System.String)">
            <summary>
                Performs the mapping from the original stylesheet number to the actual
                stylesheet number in the resulting RTF document. If the stylesheet number was not
                seen during import (thus no mapping) then 0 is returned, guaranteeing
                that the stylesheet number is always valid.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfParser">
            <summary>
                The RtfParser allows the importing of RTF documents or
                RTF document fragments. The RTF document or fragment is tokenised,
                font and color definitions corrected and then added to
                the document being written.
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.DESTINATION_NORMAL">
            <summary>
                Destination is normal. Text is processed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.DESTINATION_SKIP">
            <summary>
                Destination is skipping. Text is ignored.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.errOK">
            <summary>
                RTF parser error codes
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_ERROR">
            <summary>
                ERRORS
            </summary>
            <summary>
                Currently the parser is in an error state.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_ERROR_EOF">
            <summary>
                The parser reached the end of the file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_BLIPUID">
            <summary>
                Currently a blipuid control word is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_CHARSET">
            <summary>
                Currently the RTF charset is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_COLOR_TABLE">
            <summary>
                Currently the RTF color table is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_DEFFONT">
            <summary>
                Currently the RTF deffont is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_DOCUMENT">
            <summary>
                Currently the RTF document content is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_FILE_TABLE">
            <summary>
                Currently the RTF filetbl is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_FONT_TABLE">
            <summary>
                Currently the RTF font table is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_FONT_TABLE_INFO">
            <summary>
                Currently a RTF font table info element is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_GENERATOR">
            <summary>
                Currently the RTF generator is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_HEADER">
            <summary>
                Currently the RTF document header is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_INFO_GROUP">
            <summary>
                Document state values
            </summary>
            <summary>
                Currently the RTF info group is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_LATENTSTYLES">
            <summary>
                Currently the Latent Style and Formatting usage restrictions
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_LIST_TABLE">
            <summary>
                Currently the RTF listtables is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_LISTOVERRIDE_TABLE">
            <summary>
                Currently the RTF listtable override is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDCPROPS">
            <summary>
                Currently the RTF Old Properties.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDPPROPS">
            <summary>
                Currently the RTF Old Properties.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDSPROPS">
            <summary>
                Currently the RTF Old Properties.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDTPROPS">
            <summary>
                Currently the RTF Old Properties.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PARAGRAPH_TABLE">
            <summary>
                Currently the RTF Paragraph group properties Table (word 2002)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PICPROP">
            <summary>
                Currently a picprop control word is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PICT">
            <summary>
                Currently a pict control word is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PROT_USER_TABLE">
            <summary>
                Currently the RTF User Protection Information.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_REV_TABLE">
            <summary>
                Currently the RTF revtbl is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_RSID_TABLE">
            <summary>
                Currently the RTF rsidtable is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_SHPPICT">
            <summary>
                Currently a shppict control word is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_STYLESHEET">
            <summary>
                Header state values
            </summary>
            <summary>
                Currently the RTF  stylesheet is being parsed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_UNKNOWN">
            <summary>
                Currently the parser is in an unknown state.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_UPR">
            <summary>
                Bitmapping:
                0111 1111 1111 1111 = Unkown state
                0xxx xxxx xxxx xxxx = In Header
                1xxx xxxx xxxx xxxx = In Document
                2xxx xxxx xxxx xxxx = Reserved
                4xxx xxxx xxxx xxxx = Other
                8xxx xxxx xxxx xxxx = Errors
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_STARTSTOP">
            <summary>
                other states
            </summary>
            <summary>
                The parser is at the beginning or the end of the file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_BINARY">
            <summary>
                The RtfTokeniser is currently reading binary stream.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_HEX">
            <summary>
                The RtfTokeniser is currently reading hex data.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_IGNORE_RESULT">
            <summary>
                The RtfTokeniser ignore result
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_NORMAL">
            <summary>
                The RtfTokeniser is in its ground state. Any token may follow.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_SKIP_BYTES">
            <summary>
                TOKENISE VARIABLES ///////////////////
            </summary>
            <summary>
                State flags use 4/28 bitmask.
                First 4 bits (nibble) indicates major state. Used for unknown and error
                Last 28 bits indicates the value;
            </summary>
            <summary>
                The last token parsed was a slash.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_SKIP_GROUP">
            <summary>
                The RtfTokeniser is currently tokenising a control word.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_STATE_IN_ERROR">
            <summary>
                The RtfTokeniser is currently in error state
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_STATE_IN_UNKOWN">
            <summary>
                The RtfTokeniser is currently in an unkown state
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_CONVERT">
            <summary>
                Conversion type is a conversion. This uses the document (not rtfDoc) to add
                all the elements making it a different supported documents depending on the writer used.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_IMPORT_FRAGMENT">
            <summary>
                Conversion type is an import of a partial file/fragment. Uses direct content to add everything.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_IMPORT_FULL">
            <summary>
                Conversion type is an import. Uses direct content to add everything.
                This is what the original import does.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_IMPORT_INTO_ELEMENT">
            <summary>
                Conversion type to import a document into an element. i.e. Chapter, Section, Table Cell, etc.
                @since 2.1.4
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_UNIDENTIFIED">
            <summary>
                Conversion type is unknown
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._debugParser">
            <summary>
                Debugging flag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._listeners">
            <summary>
                The  RtfCtrlWordListener .
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._binByteCount">
            <summary>
                When the tokeniser is Binary.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._binSkipByteCount">
            <summary>
                When the tokeniser is set to skip bytes, binSkipByteCount is the number of bytes to skip.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._byteCount">
            <summary>
                STATS VARIABLES ///////////////////
            </summary>
            <summary>
                Total bytes read.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._characterCount">
            <summary>
                Total clear text characters processed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._closeGroupCount">
            <summary>
                Total } encountered as a close group token.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._conversionType">
            <summary>
                Conversion type. Identifies if we are doing in import or a convert.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._ctrlWordCount">
            <summary>
                TOKENISE VARIABLES ///////////////////
            </summary>
            <summary>
                Total control words processed.
                Contains both known and unknown.
                ctrlWordCount  should equal
                ctrlWrodHandlecCount  +  ctrlWordNotHandledCount +  ctrlWordSkippedCount
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._ctrlWordHandledCount">
            <summary>
                Total control words recognized.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._ctrlWordNotHandledCount">
            <summary>
                Total control words not handled.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._ctrlWordSkippedCount">
            <summary>
                Total control words skipped.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._currentState">
            <summary>
                The current parser state.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._destinationMgr">
            <summary>
                The RtfDestinationMgr object to manage destinations.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._docGroupLevel">
            <summary>
                The current document group nesting level. Used for fragments.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._document">
            <summary>
                The iText document to add the RTF document to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._elem">
            <summary>
                The iText element to add the RTF document to.
                @since 2.1.3
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._endDate">
            <summary>
                End date as a date.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._endTime">
            <summary>
                Stop time as a long.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._groupLevel">
            <summary>
                The current group nesting level.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._groupSkippedCount">
            <summary>
                Total groups skipped. Includes { and } as a group.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._importMgr">
            <summary>
                The RtfImportHeader to store imported font and color mappings in.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._lastCtrlWordParam">
            <summary>
                STATS VARIABLES ///////////////////
            </summary>
            <summary>
                Last control word and parameter processed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._openGroupCount">
            <summary>
                Total { encountered as an open group token.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._pbReader">
            <summary>
                The pushback reader to read the input stream.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._rtfDoc">
            <summary>
                The RtfDocument to add the RTF document or fragment to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._rtfKeywordMgr">
            <summary>
                The RtfKeywords that creates and handles keywords that are implemented.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._skipGroupLevel">
            <summary>
                When the tokeniser is set to skip to next group, this is the group indentifier to return to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._stackState">
            <summary>
                Stack for saving states for groups
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._startDate">
            <summary>
                Start date as a date.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser._startTime">
            <summary>
                Start time as a long.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.#ctor(iTextSharp.text.Document)">
            <summary>
                Constructor
                @since 2.1.3
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.AddListener(iTextSharp.text.rtf.IEventListener)">
            <summary>
                Adds a  EventListener  to the  RtfCtrlWordMgr .
                the new EventListener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ConvertRtfDocument(System.IO.Stream,iTextSharp.text.Document)">
            <summary>
                Converts an RTF document to an iText document.
                Usage: Create a parser object and call this method with the input stream and the iText Document object
                The Reader to read the RTF file from.
                The iText document that the RTF file is to be added to.
                @throws IOException
                On I/O errors.
            </summary>
            <param name="readerIn"></param>
            <param name="doc"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetConversionType">
            <summary>
                Get the conversion type.
                The type of the conversion. Import or Convert.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetCurrentDestination">
            <summary>
                Get the current destination object.
            </summary>
            <returns>The current state destination</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetDestination(System.String)">
            <summary>
                Get a destination from the map
                @para destination The string destination.
            </summary>
            <returns>The destination object from the map</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetDocument">
            <summary>
                Get the Document object.
                Returns the object rtfDoc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetExtendedDestination">
            <summary>
                Helper method to indicate if this control word was a \* control word.
            </summary>
            <returns>true if it was a \* control word, otherwise false</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetImportManager">
            <summary>
                Get the RtfImportHeader object.
                Returns the object importHeader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetLevel">
            <summary>
                Gets the current group level
                The current group level value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetLogFile">
            <summary>
                Get the logfile name.
            </summary>
            <returns>the logFile</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetParserState">
            <summary>
                Get the current state of the parser.
                The current state of the parser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetRtfDocument">
            <summary>
                Get the RTF Document object.
                Returns the object rtfDoc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetState">
            <summary>
                Get the state of the parser.
                The current RtfParserState state object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetTokeniserState">
            <summary>
                Get the current state of the tokeniser.
            </summary>
            <returns>The current state of the tokeniser.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleCharacter(System.Int32)">
            <summary>
                Handles text tokens. These are either handed on to the
                appropriate destination handler.
                The text token to handle.
            </summary>
            <param name="nextChar"></param>
            <returns>errOK if ok, other if an error occurred.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleCloseGroup">
            <summary>
                Handles close group tokens. (})
            </summary>
            <returns>errOK if ok, other if an error occurred.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            <summary>
                Handles control word tokens. Depending on the current
                state a control word can lead to a state change. When
                parsing the actual document contents, certain tabled
                values are remapped. i.e. colors, fonts, styles, etc.
            </summary>
            <param name="ctrlWordData">The control word to handle.</param>
            <returns>errOK if ok, other if an error occurred.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleOpenGroup">
            <summary>
                Handles open group tokens. ({)
            </summary>
            <returns>errOK if ok, other if an error occurred.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ImportRtfDocument(System.IO.Stream,iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                READER *
            </summary>
            <summary>
                Imports a complete RTF document.
                The Reader to read the RTF document from.
                The RtfDocument to add the imported document to.
                @throws IOException On I/O errors.
            </summary>
            <param name="readerIn"></param>
            <param name="rtfDoc"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ImportRtfDocumentIntoElement(iTextSharp.text.IElement,System.IO.Stream,iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Imports a complete RTF document into an Element, i.e. Chapter, section, Table Cell, etc.
                The Reader to read the RTF document from.
                The RtfDocument to add the imported document to.
                @throws IOException On I/O errors.
                @since 2.1.4
            </summary>
            <param name="elem">The Element the document is to be imported into.</param>
            <param name="readerIn"></param>
            <param name="rtfDoc"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ImportRtfFragment(System.IO.Stream,iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.parser.RtfImportMappings)">
            <summary>
                Imports an RTF fragment.
                The Reader to read the RTF fragment from.
                The RTF document to add the RTF fragment to.
                The RtfImportMappings defining font and color mappings for the fragment.
                @throws IOException
                On I/O errors.
            </summary>
            <param name="readerIn"></param>
            <param name="rtfDoc"></param>
            <param name="importMappings"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsConvert">
            <summary>
                Helper method to determin if conversion is TYPE_CONVERT
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_CONVERT
            </summary>
            <returns>true if TYPE_CONVERT, otherwise false</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsImport">
            <summary>
                Helper method to determin if conversion is TYPE_IMPORT_FULL or TYPE_IMPORT_FRAGMENT
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FULL
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FRAGMENT
            </summary>
            <returns>true if TYPE_CONVERT, otherwise false</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsImportFragment">
            <summary>
                Helper method to determin if conversion is TYPE_IMPORT_FRAGMENT
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FRAGMENT
            </summary>
            <returns>true if TYPE_CONVERT, otherwise false</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsImportFull">
            <summary>
                Helper method to determin if conversion is TYPE_IMPORT_FULL
                @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FULL
            </summary>
            <returns>true if TYPE_CONVERT, otherwise false</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsLogAppend">
            <summary>
            </summary>
            <returns>the logAppend</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsLogging">
            <summary>
                Get flag indicating if logging is on or off.
            </summary>
            <returns>the logging</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsNewGroup">
            <summary>
                Helper method to determine if this is a new group.
            </summary>
            <returns>true if this is a new group, otherwise it returns false.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.RemoveListener(iTextSharp.text.rtf.IEventListener)">
            <summary>
                listener methods
            </summary>
            <summary>
                Removes a  EventListener  from the  RtfCtrlWordMgr .
                the EventListener that has to be removed.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetCurrentDestination(System.String)">
            <summary>
                Set the current destination object for the current state.
            </summary>
            <param name="destination">The destination value to set.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetExtendedDestination(System.Boolean)">
            <summary>
                Helper method to set the extended control word flag.
            </summary>
            <param name="value">Boolean to set the value to.</param>
            <returns>isExtendedDestination.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogAppend(System.Boolean)">
            <summary>
            </summary>
            <param name="logAppend">the logAppend to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogFile(System.String)">
            <summary>
                Set the logFile name
            </summary>
            <param name="logFile">the logFile to set</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogFile(System.String,System.Boolean)">
            <summary>
                Set the logFile name
            </summary>
            <param name="logFile">the logFile to set</param>
            <param name="logAppend"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogging(System.Boolean)">
            <summary>
                Set flag indicating if logging is on or off
            </summary>
            <param name="logging"> true  to turn on logging,  false  to turn off logging.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetNewGroup(System.Boolean)">
            <summary>
                Helper method to set the new group flag
            </summary>
            <param name="value">The bool value to set the flag</param>
            <returns>The value of newGroup</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetParserState(System.Int32)">
            <summary>
                DOCUMENT CONTROL METHODS
                Handles -
                handleOpenGroup:    Open groups     - '{'
                handleCloseGroup:   Close groups    - '}'
                handleCtrlWord:     Ctrl Words      - '\...'
                handleCharacter:    Characters      - Plain Text, etc.
            </summary>
            <summary>
                Set the state value of the parser.
                The new state for the parser
                The state of the parser.
            </summary>
            <param name="newState"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserSkipBytes(System.Int64)">
            <summary>
                Sets the number of bytes to skip and the state of the tokeniser.
                The numbere of bytes to skip in the file.
            </summary>
            <param name="numberOfBytesToSkip"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserState(System.Int32)">
            <summary>
                Set the current state of the tokeniser.
            </summary>
            <param name="value">The new state of the tokeniser.</param>
            <returns>The state of the tokeniser.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateBinary(System.Int32)">
            <summary>
                Sets the number of binary bytes.
                The number of binary bytes.
            </summary>
            <param name="binaryCount"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateBinary(System.Int64)">
            <summary>
                Sets the number of binary bytes.
                The number of binary bytes.
            </summary>
            <param name="binaryCount"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateNormal">
            <summary>
                Set the tokeniser state to skip to the end of the group.
                Sets the state to TOKENISER_SKIP_GROUP and skipGroupLevel to the current group level.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateSkipGroup">
            <summary>
                Set the tokeniser state to skip to the end of the group.
                Sets the state to TOKENISER_SKIP_GROUP and skipGroupLevel to the current group level.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Tokenise">
            <summary>
                Read through the input file and parse the data stream into tokens.
                @throws IOException on IO error.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Init_stats">
            <summary>
                Initialize the statistics values.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.handleImportMappings(iTextSharp.text.rtf.parser.RtfImportMappings)">
            <summary>
                Imports the mappings defined in the RtfImportMappings into the
                RtfImportHeader of this RtfParser2.
                The RtfImportMappings to import.
            </summary>
            <param name="importMappings"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.init(System.Int32,iTextSharp.text.rtf.document.RtfDocument,System.IO.Stream,iTextSharp.text.Document,iTextSharp.text.IElement)">
            <summary>
                Initialize the parser object values.
            </summary>
            <param name="type">Type of conversion or import</param>
            <param name="rtfDoc">The  RtfDocument </param>
            <param name="readerIn">The input stream</param>
            <param name="doc">The iText  Document </param>
            <param name="elem"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Init_Reader(System.IO.Stream)">
            <summary>
                Casts the input reader to a PushbackReader or
                creates a new PushbackReader from the Reader passed in.
                The reader is also transformed into a BufferedReader if necessary.
                The Reader object for the input file.
                PushbackReader object
            </summary>
            <param name="readerIn"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.parseChar(System.Int32)">
            <summary>
                TOKENISER *
            </summary>
            <summary>
                Process the character and send it to the current destination.
                The character to process
                Returns an error code or errOK if no error.
            </summary>
            <param name="nextChar"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.parseCtrlWord(iTextSharp.text.rtf.parser.PushbackStream)">
            <summary>
                Parses a keyword and it's parameter if one exists
                This is a pushback reader for file input.
                Returns an error code or errOK if no error.
                @throws IOException
                Catch any file read problem.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfParserState">
            <summary>
                The  RtfParserState  contains the state information
                for the parser. The current state object is pushed/popped in a stack
                when a group change is made.
                When an open group is encountered, the current state is copied and
                then pushed on the top of the stack
                When a close group is encountered, the current state is overwritten with
                the popped value from the top of the stack
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.CtrlWordHandler">
            <summary>
                The current control word handler.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.CtrlWordHandlers">
            <summary>
                Stack containing control word handlers. There could be multiple
                control words in a group.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.Destination">
            <summary>
                The current destination.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.GroupHandler">
            <summary>
                The control word set as the group handler.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.IsExtendedDestination">
            <summary>
                Flag indicating if this is an extended destination \* control word
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.NewGroup">
            <summary>
                Flag to indicate if last token was an open group token '{'
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.ParserState">
            <summary>
                The parser state.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.Text">
            <summary>
                The parsed value for the current group/control word.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.TokeniserState">
            <summary>
                The tokeniser state.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParserState.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParserState.#ctor(iTextSharp.text.rtf.parser.RtfParserState)">
            <summary>
                Copy constructor
            </summary>
            <param name="orig">The object to copy</param>
        </member>
        <member name="T:iTextSharp.text.rtf.RtfAddableElement">
            <summary>
                The RtfAddableElement is the superclass for all rtf specific elements
                that need to be added to an iText document. It is an extension of Chunk
                and it also implements RtfBasicElement. It is an abstract class thus it
                cannot be instantiated itself and has to be subclassed to be used.
                @version $Revision: 1.6 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfAddableElement.Doc">
            <summary>
                The RtfDocument this RtfAddableElement belongs to.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfAddableElement.InHeader">
            <summary>
                Whether this RtfAddableElement is contained in a header.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfAddableElement.InTable">
            <summary>
                Whether this RtfAddableElement is contained in a table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.#ctor">
            <summary>
                Constructs a new RtfAddableElement. The Chunk content is
                set to an empty string and the font to the default Font().
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfAddableElement is contained in a header/footer.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.SetInTable(System.Boolean)">
            <summary>
                Sets whether this RtfAddableElement is contained in a table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfAddableElement belongs to.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.WriteContent(System.IO.Stream)">
            <summary>
                Writes the element content to the given output stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.IntToByteArray(System.Int32)">
            <summary>
                Transforms an integer into its String representation and then returns the bytes
                of that string.
            </summary>
            <param name="i">The integer to convert</param>
            <returns>A byte array representing the integer</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.IsEmpty">
            <summary>
                RtfAddableElement subclasses are never assumed to be empty.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.RtfElement">
            <summary>
                RtfElement is the base class for all RTF Element classes
                Version: $Id: RtfElement.cs,v 1.5 2008/05/16 19:30:14 psoares33 Exp $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.TWIPS_FACTOR">
            <summary>
                The factor to use for translating from iText to rtf measurments
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.CloseGroup">
            <summary>
                Constant for the end of an rtf group
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.CommaDelimiter">
            <summary>
                Constant for a comma delimiter in rtf
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.Delimiter">
            <summary>
                Constant for a delimiter in rtf
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.OpenGroup">
            <summary>
                Constant for the beginning of a rtf group
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.Document">
            <summary>
                The RtfDocument this RtfElement belongs to
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.InHeader">
            <summary>
                Whether this RtfElement is in a header
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.InTable">
            <summary>
                Whether this RtfElement is in a table
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfElement belonging to the specified RtfDocument.
            </summary>
            <param name="doc">The RtfDocument this RtfElement belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfElement is in a header
            </summary>
            <param name="inHeader"> True  if this RtfElement is in a header,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetInTable(System.Boolean)">
            <summary>
                Sets whether this RtfElement is in a table
            </summary>
            <param name="inTable"> True  if this RtfElement is in a table,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfElement belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.WriteContent(System.IO.Stream)">
            <summary>
                Writes the element content to the given output stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.IntToByteArray(System.Int32)">
            <summary>
                Transforms an integer into its String representation and then returns the bytes
                of that string.
            </summary>
            <param name="i">The integer to convert</param>
            <returns>A byte array representing the integer</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.IsInTable">
            <summary>
                Gets whether this RtfElement is in a table
            </summary>
            <returns>Whether this RtfElement is in a table</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.RtfMapper">
            <summary>
                The RtfMapper provides mappings between com.lowagie.text.* classes
                and the corresponding com.lowagie.text.rtf.** classes.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfMapper._rtfDoc">
            <summary>
                The RtfDocument this RtfMapper belongs to
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfMapper.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfMapper for a RtfDocument
            </summary>
            <param name="doc">The RtfDocument this RtfMapper belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfMapper.MapElement(iTextSharp.text.IElement)">
            <summary>
                Takes an Element subclass and returns an array of RtfBasicElement
                subclasses, that contained the mapped RTF equivalent to the Element
                passed in.
                @throws DocumentException
            </summary>
            <param name="element">The Element to wrap</param>
            <returns>An array of RtfBasicElement wrapping the Element</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.RtfWriter2">
            <summary>
                The RtfWriter allows the creation of rtf documents via the iText system
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter2._rtfDoc">
            <summary>
                The RtfDocument this RtfWriter is creating
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                Constructs a new RtfWriter that listens to the specified Document and
                writes its output to the Stream.
            </summary>
            <param name="doc">The Document that this RtfWriter listens to</param>
            <param name="os">The Stream to write to</param>
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.Footer">
            <summary>
                Sets the footer to use
            </summary>
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.Header">
            <summary>
                Sets the header to use
            </summary>
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.PageCount">
            <summary>
                This method is not supported in the RtfWriter
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
                Static method to generate RtfWriters
            </summary>
            <param name="doc">The Document that this RtfWriter listens to</param>
            <param name="os">The Stream to write to</param>
            <returns>The new RtfWriter</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an Element to the Document
                @throws DocumentException
            </summary>
            <param name="element">The element to be added</param>
            <returns> false </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Close">
            <summary>
                Closes the RtfDocument. This causes the document to be written
                to the specified Stream
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.GetDocumentSettings">
            <summary>
                Gets the RtfDocumentSettings that specify how the rtf document is generated.
            </summary>
            <returns>The current RtfDocumentSettings.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocument(System.IO.Stream)">
            <summary>
                Adds the complete RTF document to the current RTF document being generated.
                It will parse the font and color tables and correct the font and color references
                so that the imported RTF document retains its formattings.
                @throws IOException On errors reading the RTF document.
                @throws DocumentException On errors adding to this RTF document.
            </summary>
            <param name="documentSource">The Stream to read the RTF document from.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocument(System.IO.Stream,iTextSharp.text.rtf.IEventListener[])">
            <summary>
                Adds the complete RTF document to the current RTF document being generated.
                It will parse the font and color tables and correct the font and color references
                so that the imported RTF document retains its formattings.
                Uses new RtfParser object.
                @throws IOException
                @throws DocumentException
                @see com.lowagie.text.rtf.parser.RtfParser
                @see com.lowagie.text.rtf.parser.RtfParser#importRtfDocument(Reader, RtfDocument)
                @since 2.0.8
                @author Howard Shank
            </summary>
            <param name="documentSource">The Stream to read the RTF document from.</param>
            <param name="events">The array of event listeners. May be null</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocumentIntoElement(iTextSharp.text.IElement,System.IO.FileStream)">
            <summary>
                Adds the complete RTF document to the current RTF element being generated.
                It will parse the font and color tables and correct the font and color references
                so that the imported RTF document retains its formattings.
                @throws IOException On errors reading the RTF document.
                @throws DocumentException On errors adding to this RTF document.
                @since 2.1.4
            </summary>
            <param name="elem">The Element the RTF document is to be imported into.</param>
            <param name="documentSource">The Reader to read the RTF document from.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocumentIntoElement(iTextSharp.text.IElement,System.IO.FileStream,iTextSharp.text.rtf.IEventListener[])">
            <summary>
                Adds the complete RTF document to the current RTF element being generated.
                It will parse the font and color tables and correct the font and color references
                so that the imported RTF document retains its formattings.
                @throws IOException On errors reading the RTF document.
                @throws DocumentException On errors adding to this RTF document.
                @since 2.1.4
            </summary>
            <param name="elem">The Element the RTF document is to be imported into.</param>
            <param name="documentSource">The Reader to read the RTF document from.</param>
            <param name="events">The event array for listeners.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfFragment(System.IO.Stream,iTextSharp.text.rtf.parser.RtfImportMappings)">
            <summary>
                Adds a fragment of an RTF document to the current RTF document being generated.
                Since this fragment doesn't contain font or color tables, all fonts and colors
                are mapped to the default font and color. If the font and color mappings are
                known, they can be specified via the mappings parameter.
                @throws IOException On errors reading the RTF fragment.
                @throws DocumentException On errors adding to this RTF fragment.
            </summary>
            <param name="documentSource">The Stream to read the RTF fragment from.</param>
            <param name="mappings">The RtfImportMappings that contain font and color mappings to apply to the fragment.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfFragment(System.IO.Stream,iTextSharp.text.rtf.parser.RtfImportMappings,iTextSharp.text.rtf.IEventListener[])">
            <summary>
                Adds a fragment of an RTF document to the current RTF document being generated.
                Since this fragment doesn't contain font or color tables, all fonts and colors
                are mapped to the default font and color. If the font and color mappings are
                known, they can be specified via the mappings parameter.
                Uses new RtfParser object.
                @throws IOException On errors reading the RTF fragment.
                @throws DocumentException On errors adding to this RTF fragment.
                @see com.lowagie.text.rtf.parser.RtfImportMappings
                @see com.lowagie.text.rtf.parser.RtfParser
                @see com.lowagie.text.rtf.parser.RtfParser#importRtfFragment(Reader, RtfDocument,
                com.lowagie.text.rtf.parser.RtfImportMappings)
                @since 2.0.8
                @author Howard Shank
            </summary>
            <param name="documentSource">The Stream to read the RTF fragment from.</param>
            <param name="mappings">The RtfImportMappings that contain font and color mappings to apply to the fragment.</param>
            <param name="events">The array of event listeners. May be null</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.NewPage">
            <summary>
                Adds a page break
            </summary>
            <returns> false </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Open">
            <summary>
                Opens the RtfDocument
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetFooter">
            <summary>
                Resets the footer
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetHeader">
            <summary>
                Resets the header
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetPageCount">
            <summary>
                This method is not supported in the RtfWriter
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetAutogenerateTocEntries(System.Boolean)">
            <summary>
                Whether to automagically generate table of contents entries when
                adding Chapters or Sections.
            </summary>
            <param name="autogenerate">Whether to automatically generate TOC entries</param>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sets the page margins
            </summary>
            <param name="left">The left margin</param>
            <param name="right">The right margin</param>
            <param name="top">The top margin</param>
            <param name="bottom">The bottom margin</param>
            <returns> false </returns>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
                Sets the size of the page
            </summary>
            <param name="rect">A Rectangle representing the page</param>
            <returns> false </returns>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfColor">
            <summary>
                The RtfColor stores one rtf color value for a rtf document
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.Colon">
            <summary>
                Constant for the end of one color entry
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._colorBlueBytes">
            <summary>
                Constant for BLUE value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._colorGreenBytes">
            <summary>
                Constant for GREEN value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._colorNumberBytes">
            <summary>
                Constant for the number of the colour in the list of colours
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._colorRedBytes">
            <summary>
                Constant for RED value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._blue">
            <summary>
                The blue value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._green">
            <summary>
                The green value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._red">
            <summary>
                The red value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor._colorNumber">
            <summary>
                The number of the colour in the list of colours
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.style.RtfColor)">
            <summary>
                Constructs a RtfColor as a clone of an existing RtfColor
            </summary>
            <param name="doc">The RtfDocument this RtfColor belongs to</param>
            <param name="col">The RtfColor to use as a base</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a RtfColor based on the Color
            </summary>
            <param name="doc">The RtfDocument this RtfColor belongs to</param>
            <param name="col">The Color to base this RtfColor on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs a RtfColor based on the red/green/blue values
            </summary>
            <param name="doc">The RtfDocument this RtfColor belongs to</param>
            <param name="red">The red value to use</param>
            <param name="green">The green value to use</param>
            <param name="blue">The blue value to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructor only for use when initializing the RtfColorList
            </summary>
            <param name="doc">The RtfDocument this RtfColor belongs to</param>
            <param name="red">The red value to use</param>
            <param name="green">The green value to use</param>
            <param name="blue">The blue value to use</param>
            <param name="colorNumber">The number of the colour in the colour list</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfColor belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteDefinition(System.IO.Stream)">
            <summary>
                Write the definition part of this RtfColor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.Equals(System.Object)">
            <summary>
                Tests if this RtfColor is equal to another RtfColor.
                false  otherwise.
            </summary>
            <param name="obj">another RtfColor</param>
            <returns> True  if red, green and blue values of the two colours match,</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetBlue">
            <summary>
                Get the blue value of this RtfColor
            </summary>
            <returns>The blue value</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetColorNumber">
            <summary>
                Gets the number of this RtfColor in the list of colours
            </summary>
            <returns>Returns the colorNumber.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetGreen">
            <summary>
                Get the green value of this RtfColor
            </summary>
            <returns>The green value</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetHashCode">
            <summary>
                Returns the hash code of this RtfColor. The hash code is
                an integer with the lowest three bytes containing the values
                of red, green and blue.
            </summary>
            <returns>The hash code of this RtfColor</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetRed">
            <summary>
                Get the red value of this RtfColor
            </summary>
            <returns>The red value</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteBegin(System.IO.Stream)">
            <summary>
                Writes the beginning of this RtfColor
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteEnd(System.IO.Stream)">
            <summary>
                Unused
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfColorList">
            <summary>
                The RtfColorList stores all colours that appear in the document. Black
                and White are always added
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColorList._colorTable">
            <summary>
                Constant for the beginning of the colour table
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColorList._colorList">
            <summary>
                ArrayList containing all colours of this RtfColorList
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a new RtfColorList for the RtfDocument. Will add the default
                black and white colours.
            </summary>
            <param name="doc">The RtfDocument this RtfColorList belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.WriteDefinition(System.IO.Stream)">
            <summary>
                Write the definition part of the colour list. Calls the writeDefinition
                methods of the RtfColors in the colour list.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.GetColorNumber(iTextSharp.text.rtf.style.RtfColor)">
            <summary>
                Returns the index of the given RtfColor in the colour list. If the RtfColor
                is not in the list of colours, then it is added.
            </summary>
            <param name="color">The RtfColor for which to get the index</param>
            <returns>The index of the RtfColor</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfFont">
            <summary>
                The RtfFont class stores one font for an rtf document. It extends Font,
                so can be set as a font, to allow adding of fonts with arbitrary names.
                BaseFont fontname handling contributed by Craig Fleming. Various fixes
                Renaud Michel, Werner Daehn.
                Version: $Id: RtfFont.cs,v 1.13 2008/05/16 19:31:11 psoares33 Exp $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Craig Fleming (rythos@rhana.dhs.org)
                @author Renaud Michel (r.michel@immedia.be)
                @author Werner Daehn (Werner.Daehn@BusinessObjects.com)
                @author Lidong Liu (tmslld@gmail.com)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_BOLD">
            <summary>
                Constant for a bold font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_DOUBLE_STRIKETHROUGH">
            <summary>
                Constant for a double strikethrough font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_EMBOSSED">
            <summary>
                Constant for an embossed font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_ENGRAVED">
            <summary>
                Constant for an engraved font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_HIDDEN">
            <summary>
                Constant for a font that hides the actual text.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_ITALIC">
            <summary>
                Constant for an italic font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_NONE">
            <summary>
                Constant for a plain font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_OUTLINE">
            <summary>
                Constant for an outlined font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_SHADOW">
            <summary>
                Constant for a shadowed font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_STRIKETHROUGH">
            <summary>
                Constant for a strikethrough font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_UNDERLINE">
            <summary>
                Constant for an underlined font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FontSize">
            <summary>
                Constant for the font size
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontBold">
            <summary>
                Constant for the bold flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontCharset">
            <summary>
                Constant for the charset
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontDoubleStrikethrough">
            <summary>
                Constant for the double strikethrough flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontEmbossed">
            <summary>
                Constant for the embossed flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontEngraved">
            <summary>
                Constant for the engraved flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontFamily">
            <summary>
                Constant for the font family to use ("froman")
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontHidden">
            <summary>
                Constant for hidden text flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontItalic">
            <summary>
                Constant for the italic flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontOutline">
            <summary>
                Constant for the outline flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontShadow">
            <summary>
                Constant for the shadow flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontStrikethrough">
            <summary>
                Constant for the strikethrough flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontUnderline">
            <summary>
                Constant for the underline flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._charset">
            <summary>
                The character set to use for this font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._color">
            <summary>
                The colour of this font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontName">
            <summary>
                The font name. Defaults to "Times New Roman"
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontNumber">
            <summary>
                The number of this font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontSize">
            <summary>
                The font size. Defaults to 10
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont._fontStyle">
            <summary>
                The font style. Defaults to STYLE_NONE
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.Document">
            <summary>
                The RtfDocument this RtfFont belongs to.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String)">
            <summary>
                Constructs a RtfFont with the given font name and all other properties
                at their default values.
            </summary>
            <param name="fontName">The font name to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single)">
            <summary>
                Constructs a RtfFont with the given font name and font size and all other
                properties at their default values.
            </summary>
            <param name="fontName">The font name to use</param>
            <param name="size">The font size to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32)">
            <summary>
                Constructs a RtfFont with the given font name, font size and font style and the
                default color.
            </summary>
            <param name="fontName">The font name to use</param>
            <param name="size">The font size to use</param>
            <param name="style">The font style to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a RtfFont with the given font name, font size, font style and
                color.
            </summary>
            <param name="fontName">The font name to use</param>
            <param name="size">the font size to use</param>
            <param name="style">The font style to use</param>
            <param name="color">The font color to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32,iTextSharp.text.BaseColor,System.Int32)">
            <summary>
                Constructs a RtfFont with the given font name, font size, font style, colour
                and charset. This can be used when generating non latin-1 text.
            </summary>
            <param name="fontName">The font name to use</param>
            <param name="size">the font size to use</param>
            <param name="style">The font style to use</param>
            <param name="color">The font color to use</param>
            <param name="charset">The charset of the font content</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            <summary>
                Constructs a RtfFont from a com.lowagie.text.Font
            </summary>
            <param name="doc">The RtfDocument this font appears in</param>
            <param name="font">The Font to use as a base</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32)">
            <summary>
                Special constructor for the default font
            </summary>
            <param name="doc">The RtfDocument this font appears in</param>
            <param name="fontNumber">The id of this font</param>
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Color">
            <summary>
                @see com.lowagie.text.Font#setColor(Color)
            </summary>
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Familyname">
            <summary>
                @see com.lowagie.text.Font#getFamilyname()
            </summary>
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Size">
            <summary>
                @see com.lowagie.text.Font#setSize(float)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetInHeader(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inHeader"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetInTable(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inTable"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfFont belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the font definition
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.CompareTo(System.Object)">
            <summary>
                Compares this  RtfFont  to either a {@link com.lowagie.text.Font} or
                an  RtfFont .
                @since 2.1.0
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Difference(iTextSharp.text.Font)">
            <summary>
                Replaces the attributes that are equal to <VAR>null</VAR> with
                the attributes of a given font.
            </summary>
            <param name="font">The surrounding font</param>
            <returns>A RtfFont</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Equals(System.Object)">
            <summary>
                Tests for equality of RtfFonts. RtfFonts are equal if their fontName,
                fontSize, fontStyle and fontSuperSubscript are equal
            </summary>
            <param name="obj">The RtfFont to compare with this RtfFont</param>
            <returns> True  if the RtfFonts are equal,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetCharset">
            <summary>
                Gets the charset used for constructing this RtfFont.
            </summary>
            <returns>The charset of this RtfFont.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontName">
            <summary>
                Gets the font name of this RtfFont
            </summary>
            <returns>The font name</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontNumber">
            <summary>
                Gets the font number of this RtfFont
            </summary>
            <returns>The font number</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontSize">
            <summary>
                Gets the font size of this RtfFont
            </summary>
            <returns>The font size</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontStyle">
            <summary>
                Gets the font style of this RtfFont
            </summary>
            <returns>The font style</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetHashCode">
            <summary>
                Returns the hash code of this RtfFont. The hash code is the hash code of the
                string containing the font name + font size + "-" + the font style + "-" + the
                font super/supscript value.
            </summary>
            <returns>The hash code of this RtfFont</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.IsStandardFont">
            <summary>
                The  RtfFont  is never a standard font.
                @since 2.1.0
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetCharset(System.Int32)">
            <summary>
                Sets the charset used for constructing this RtfFont.
            </summary>
            <param name="charset">The charset to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
                @see com.lowagie.text.Font#setColor(int, int, int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetFamily(System.String)">
            <summary>
                @see com.lowagie.text.Font#setFamily(String)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetFontName(System.String)">
            <summary>
                Sets the font name of this RtfFont.
            </summary>
            <param name="fontName">The font name to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetStyle(System.Int32)">
            <summary>
                @see com.lowagie.text.Font#setStyle(int)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetStyle(System.String)">
            <summary>
                @see com.lowagie.text.Font#setStyle(String)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteBegin(System.IO.Stream)">
            <summary>
                Writes the font beginning
            </summary>
            <returns>A byte array with the font start data</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteEnd(System.IO.Stream)">
            <summary>
                Write the font end
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.IntToByteArray(System.Int32)">
            <summary>
                Transforms an integer into its String representation and then returns the bytes
                of that string.
            </summary>
            <param name="i">The integer to convert</param>
            <returns>A byte array representing the integer</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.setToDefaultFamily(System.String)">
            <summary>
                Sets the correct font name from the family name.
            </summary>
            <param name="familyname">The family name to set the name to.</param>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfFontList">
            <summary>
                The RtfFontList stores the list of fonts used in the rtf document. It also
                has methods for writing this list to the document
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.FontNumber">
            <summary>
                Constant for the font number
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList._defaultFont">
            <summary>
                Constant for the default font
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList._fontTable">
            <summary>
                Constant for the font table
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList._fontList">
            <summary>
                The list of fonts
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Creates a RtfFontList
            </summary>
            <param name="doc">The RtfDocument this RtfFontList belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the definition of the font list
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.GetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
            <summary>
                Gets the index of the font in the list of fonts. If the font does not
                exist in the list, it is added.
            </summary>
            <param name="font">The font to get the id for</param>
            <returns>The index of the font</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfParagraphStyle">
            <summary>
                The RtfParagraphStyle stores all style/formatting attributes of a RtfParagraph.
                Additionally it also supports the style name system available in RTF. The RtfParagraphStyle
                is a Font and can thus be used as such. To use the stylesheet functionality
                it needs to be set as the font of a Paragraph. Otherwise it will work like a
                RtfFont. It also supports inheritance of styles.
                @version $Revision: 1.8 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedAlignment">
            <summary>
                The alignment has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedFontColor">
            <summary>
                The font colour has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedFontName">
            <summary>
                The font name has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedFontSize">
            <summary>
                The font style has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedFontStyle">
            <summary>
                The font size has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedIndentLeft">
            <summary>
                The left indentation has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedIndentRight">
            <summary>
                The right indentation has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedKeepTogether">
            <summary>
                The paragraph keep together setting has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedKeepTogetherWithNext">
            <summary>
                The paragraph keep together with next setting has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedLineLeading">
            <summary>
                The line leading has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedNone">
            <summary>
                No modification has taken place when compared to the RtfParagraphStyle this RtfParagraphStyle
                is based on. These modification markers are used to determine what needs to be
                inherited and what not from the parent RtfParagraphStyle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedSpacingAfter">
            <summary>
                The spacing after a paragraph has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ModifiedSpacingBefore">
            <summary>
                The spacing before a paragraph has been modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.AlignCenter">
            <summary>
                Constant for center alignment
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.AlignJustify">
            <summary>
                Constant for justified alignment
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.AlignLeft">
            <summary>
                Constant for left alignment
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.AlignRight">
            <summary>
                Constant for right alignment
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.FirstLineIndent">
            <summary>
                Constant for the first line indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.IndentLeft">
            <summary>
                Constant for left indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.IndentRight">
            <summary>
                Constant for right indentation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.KeepTogether">
            <summary>
                Constant for keeping the paragraph together on one page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.KeepTogetherWithNext">
            <summary>
                Constant for keeping the paragraph toghether with the next one on one page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.SpacingAfter">
            <summary>
                Constant for the space after the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.SpacingBefore">
            <summary>
                Constant for the space before the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.StyleHeading1">
            <summary>
                The style for level 1 headings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.StyleHeading2">
            <summary>
                The style for level 2 headings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.StyleHeading3">
            <summary>
                The style for level 3 headings.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.StyleNormal">
            <summary>
                The NORMAL/STANDARD style.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._basedOnName">
            <summary>
                The name of the RtfParagraphStyle this RtfParagraphStyle is based on.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._styleName">
            <summary>
                The name of this RtfParagraphStyle.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._alignment">
            <summary>
                The alignment of the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._baseStyle">
            <summary>
                The RtfParagraphStyle this RtfParagraphStyle is based on.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._firstLineIndent">
            <summary>
                The indentation for the first line
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._indentLeft">
            <summary>
                The left indentation of the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._indentRight">
            <summary>
                The right indentation of the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._keepTogether">
            <summary>
                Whether this RtfParagraph must stay on one page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._keepTogetherWithNext">
            <summary>
                Whether this RtfParagraph must stay on the same page as the next paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._lineLeading">
            <summary>
                The line leading of the paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._modified">
            <summary>
                Which properties have been modified when compared to the base style.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._spacingAfter">
            <summary>
                The spacing after a paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._spacingBefore">
            <summary>
                The spacing before a paragraph.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle._styleNumber">
            <summary>
                The number of this RtfParagraphStyle in the stylesheet list.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#cctor">
            <summary>
                Initialises the properties of the styles.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#ctor(System.String,System.String,System.Int32,System.Int32,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a new RtfParagraphStyle with the given attributes.
            </summary>
            <param name="styleName">The name of this RtfParagraphStyle.</param>
            <param name="fontName">The name of the font to use for this RtfParagraphStyle.</param>
            <param name="fontSize">The size of the font to use for this RtfParagraphStyle.</param>
            <param name="fontStyle">The style of the font to use for this RtfParagraphStyle.</param>
            <param name="fontColor">The colour of the font to use for this RtfParagraphStyle.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#ctor(System.String,System.String)">
            <summary>
                Constructs a new RtfParagraphStyle that is based on an existing RtfParagraphStyle.
            </summary>
            <param name="styleName">The name of this RtfParagraphStyle.</param>
            <param name="basedOnName">The name of the RtfParagraphStyle this RtfParagraphStyle is based on.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.style.RtfParagraphStyle)">
            <summary>
                Constructs a RtfParagraphStyle from another RtfParagraphStyle.
                INTERNAL USE ONLY
            </summary>
            <param name="doc">The RtfDocument this RtfParagraphStyle belongs to.</param>
            <param name="style">The RtfParagraphStyle to copy settings from.</param>
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfParagraphStyle.Size">
            <summary>
                Sets the font size of this RtfParagraphStyle.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.Equals(System.Object)">
            <summary>
                Tests whether two RtfParagraphStyles are equal. Equality
                is determined via the name.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetAlignment">
            <summary>
                Gets the alignment of this RtfParagraphStyle.
            </summary>
            <returns>The alignment of this RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetBasedOnName">
            <summary>
                Gets the name of the RtfParagraphStyle this RtfParagraphStyle is based on.
            </summary>
            <returns>The name of the base RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetFirstLineIndent">
            <summary>
                Gets the first line indentation of this RtfParagraphStyle.
            </summary>
            <returns>The first line indentation of this RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetHashCode">
            <summary>
                Gets the hash code of this RtfParagraphStyle.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetIndentLeft">
            <summary>
                Gets the left indentation of this RtfParagraphStyle.
            </summary>
            <returns>The left indentation of this RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetIndentRight">
            <summary>
                Gets the right indentation of this RtfParagraphStyle.
            </summary>
            <returns>The right indentation of this RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetKeepTogether">
            <summary>
                Gets whether the lines in the paragraph should be kept together in
                this RtfParagraphStyle.
            </summary>
            <returns>Whether the lines in the paragraph should be kept together.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetKeepTogetherWithNext">
            <summary>
                Gets whether the paragraph should be kept toggether with the next in
                this RtfParagraphStyle.
            </summary>
            <returns>Whether the paragraph should be kept together with the next.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetLineLeading">
            <summary>
                Gets the line leading of this RtfParagraphStyle.
            </summary>
            <returns>The line leading of this RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetSpacingAfter">
            <summary>
                Gets the space after the paragraph of this RtfParagraphStyle.
            </summary>
            <returns>The space after the paragraph.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetSpacingBefore">
            <summary>
                Gets the space before the paragraph of this RtfParagraphStyle..
            </summary>
            <returns>The space before the paragraph.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetStyleName">
            <summary>
                Gets the name of this RtfParagraphStyle.
            </summary>
            <returns>The name of this RtfParagraphStyle.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.HandleInheritance">
            <summary>
                Handles the inheritance of paragraph style settings. All settings that
                have not been modified will be inherited from the base RtfParagraphStyle.
                If this RtfParagraphStyle is not based on another one, then nothing happens.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetAlignment(System.Int32)">
            <summary>
                Sets the alignment of this RtfParagraphStyle.
            </summary>
            <param name="alignment">The alignment to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetColor(iTextSharp.text.BaseColor)">
            <summary>
                Sets the colour of this RtfParagraphStyle.
            </summary>
            <param name="color">The Color to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetFirstLineIndent(System.Int32)">
            <summary>
                Sets the first line indententation of this RtfParagraphStyle. It
                is relative to the left indentation.
            </summary>
            <param name="firstLineIndent">The first line indentation to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetFontName(System.String)">
            <summary>
                Sets the font name of this RtfParagraphStyle.
            </summary>
            <param name="fontName">The font name to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetIndentLeft(System.Int32)">
            <summary>
                Sets the left indentation of this RtfParagraphStyle.
            </summary>
            <param name="indentLeft">The left indentation to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetIndentRight(System.Int32)">
            <summary>
                Sets the right indentation of this RtfParagraphStyle.
            </summary>
            <param name="indentRight">The right indentation to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetKeepTogether(System.Boolean)">
            <summary>
                Sets whether the lines in the paragraph should be kept together in
                this RtfParagraphStyle.
            </summary>
            <param name="keepTogether">Whether the lines in the paragraph should be kept together.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetKeepTogetherWithNext(System.Boolean)">
            <summary>
                Sets whether the paragraph should be kept together with the next in
                this RtfParagraphStyle.
            </summary>
            <param name="keepTogetherWithNext">Whether the paragraph should be kept together with the next.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetLineLeading(System.Int32)">
            <summary>
                Sets the line leading of this RtfParagraphStyle.
            </summary>
            <param name="lineLeading">The line leading to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetSpacingAfter(System.Int32)">
            <summary>
                Sets the space after the paragraph of this RtfParagraphStyle.
            </summary>
            <param name="spacingAfter">The space after to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetSpacingBefore(System.Int32)">
            <summary>
                Sets the space before the paragraph of this RtfParagraphStyle.
            </summary>
            <param name="spacingBefore">The space before to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetStyle(System.Int32)">
            <summary>
                Sets the font style of this RtfParagraphStyle.
            </summary>
            <param name="fontStyle">The font style to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteBegin(System.IO.Stream)">
            <summary>
                Writes the start information of this RtfParagraphStyle.
                @throws IOException On i/o errors.
            </summary>
            <param name="result">The  OutputStream  to write to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the definition of this RtfParagraphStyle for the stylesheet list.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteEnd(System.IO.Stream)">
            <summary>
                Unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetStyleNumber(System.Int32)">
            <summary>
                Sets the number of this RtfParagraphStyle in the stylesheet list.
            </summary>
            <param name="styleNumber">The number to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.getStyleNumber">
            <summary>
                Gets the number of this RtfParagraphStyle in the stylesheet list.
            </summary>
            <returns>The number of this RtfParagraphStyle in the stylesheet list.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.writeParagraphSettings(System.IO.Stream)">
            <summary>
                Writes the settings of this RtfParagraphStyle.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfStylesheetList">
            <summary>
                The RtfStylesheetList stores the RtfParagraphStyles that are used in the document.
                @version $Revision: 1.5 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStylesheetList._styleMap">
            <summary>
                The Hashtable containing the RtfParagraphStyles.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStylesheetList._defaultsLoaded">
            <summary>
                Whether the default settings have been loaded.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a new RtfStylesheetList for the RtfDocument.
            </summary>
            <param name="doc">The RtfDocument this RtfStylesheetList belongs to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.WriteContent(System.IO.Stream)">
            <summary>
                unused
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.WriteDefinition(System.IO.Stream)">
            <summary>
                Writes the definition of the stylesheet list.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.GetRtfParagraphStyle(System.String)">
            <summary>
                Gets the RtfParagraphStyle with the given name. Makes sure that the defaults
                have been loaded.
            </summary>
            <param name="styleName">The name of the RtfParagraphStyle to get.</param>
            <returns>The RtfParagraphStyle with the given name or null.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.RegisterParagraphStyle(iTextSharp.text.rtf.style.RtfParagraphStyle)">
            <summary>
                Register a RtfParagraphStyle with this RtfStylesheetList.
            </summary>
            <param name="rtfParagraphStyle">The RtfParagraphStyle to add.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.registerDefaultStyles">
            <summary>
                Registers all default styles. If styles with the given name have already been registered,
                then they are NOT overwritten.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfStyleTypes">
            <summary>
                RtfStyleTypes  contains the different types of Stylesheet entries
                that exist in RTF.
                @author Howard Shank (hgshank@yahoo.com)
                @since 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.PARAGRAPH">
            <summary>
                Indicates paragraph style.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.CHARACTER">
            <summary>
                Indicates character style.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.SECTION">
            <summary>
                Indicates section style.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.TABLE">
            <summary>
                Indicates Table style.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.TABLE_STYLE_DEFINITION">
            <summary>
                Indicates table definition style.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfBorder">
            <summary>
                The RtfBorder handle one row or cell border.
                INTERNAL USE ONLY
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Unknown
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DASHED">
            <summary>
                Constant for a dashed border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOT_DASH">
            <summary>
                Constant for a dot dash border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOT_DOT_DASH">
            <summary>
                Constant for a dot dot dash border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOTTED">
            <summary>
                Constant for a dotted border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE">
            <summary>
                Constant for a double border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE_THICK">
            <summary>
                Constant for a double thick border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE_WAVY">
            <summary>
                Constant for a double wavy border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_EMBOSS">
            <summary>
                Constant for an embossed border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_ENGRAVE">
            <summary>
                Constant for an engraved border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_HAIRLINE">
            <summary>
                Constant for a hairline border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_NONE">
            <summary>
                Constant for a border with no border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_SHADOWED">
            <summary>
                Constant for a shadowed border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_SINGLE">
            <summary>
                Constant for a single border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STRIPED">
            <summary>
                Constant for a striped border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN">
            <summary>
                Constant for a thick thin border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN_LARGE">
            <summary>
                Constant for a thick thin large border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN_MED">
            <summary>
                Constant for a thick thin medium border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK">
            <summary>
                Constant for a thin thick border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_LARGE">
            <summary>
                Constant for a thin thick large border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_MED">
            <summary>
                Constant for a thin thick medium border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN">
            <summary>
                Constant for a thin thick thin border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN_LARGE">
            <summary>
                Constant for a thin thick thin large border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN_MED">
            <summary>
                Constant for a thin thick thin medium border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_TRIPLE">
            <summary>
                Constant for a triple border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_WAVY">
            <summary>
                Constant for a wavy border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BOTTOM_BORDER">
            <summary>
                Constant for a bottom border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BOX_BORDER">
            <summary>
                Constant for a box (left, top, right, bottom) border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER">
            <summary>
                Constant for a cell border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.HORIZONTAL_BORDER">
            <summary>
                Constant for a horizontal line
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.LEFT_BORDER">
            <summary>
                Constant for a left border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.NO_BORDER">
            <summary>
                This border is no border :-)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RIGHT_BORDER">
            <summary>
                Constant for a right border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER">
            <summary>
                Constant for a row border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.TOP_BORDER">
            <summary>
                Constant for a top border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.VERTICAL_BORDER">
            <summary>
                Constant for a vertical line
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderColorNumber">
            <summary>
                Constant for the border colour number
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDashed">
            <summary>
                Constant for the dashed border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDotDash">
            <summary>
                Constant for the dot dash border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDotDotDash">
            <summary>
                Constant for the dot dot dash border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDotted">
            <summary>
                Constant for the dotted border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDouble">
            <summary>
                Constant for the double border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDoubleThick">
            <summary>
                Constant for the double thick border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleDoubleWavy">
            <summary>
                Constant for the double wavy border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleEmboss">
            <summary>
                Constant for the embossed border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleEngrave">
            <summary>
                Constant for the engraved border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleHairline">
            <summary>
                Constant for the hairline border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleShadowed">
            <summary>
                Constant for the shadowed border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleSingle">
            <summary>
                Constant for the single border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleStriped">
            <summary>
                Constant for the striped border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThickThin">
            <summary>
                Constant for the thick thin border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThickThinLarge">
            <summary>
                Constant for the thick thin large border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThickThinMed">
            <summary>
                Constant for the thick thin medium border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThinThick">
            <summary>
                Constant for the thin thick border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThinThickLarge">
            <summary>
                Constant for the thin thick large border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThinThickMed">
            <summary>
                Constant for the thin thick medium border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThinThickThin">
            <summary>
                Constant for the thin thick thin border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThinThickThinLarge">
            <summary>
                Constant for the thin thick thin large border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleThinThickThinMed">
            <summary>
                Constant for the thin thick thin medium border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleTriple">
            <summary>
                Constant for the triple border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderStyleWavy">
            <summary>
                Constant for the wavy border style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BorderWidth">
            <summary>
                Constant for the border width
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CellBorderBottom">
            <summary>
                Constant for the bottom cell border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CellBorderLeft">
            <summary>
                Constant for the left cell border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CellBorderRight">
            <summary>
                Constant for the right cell border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CellBorderTop">
            <summary>
                Constant for the top cell border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RowBorderBottom">
            <summary>
                Constant for the bottom row border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RowBorderHorizontal">
            <summary>
                Constant for the horizontal line
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RowBorderLeft">
            <summary>
                Constant for the left row border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RowBorderRight">
            <summary>
                Constant for the right row border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RowBorderTop">
            <summary>
                Constant for the top row border
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RowBorderVertical">
            <summary>
                Constant for the vertical line
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder._borderColor">
            <summary>
                The colour of this RtfBorder
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder._borderPosition">
            <summary>
                The position of this RtfBorder
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder._borderStyle">
            <summary>
                The style of this RtfBorder
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder._borderType">
            <summary>
                The type of this RtfBorder
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder._borderWidth">
            <summary>
                The width of this RtfBorder
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,iTextSharp.text.rtf.table.RtfBorder)">
            <summary>
                Makes a copy of the given RtfBorder
            </summary>
            <param name="doc">The RtfDocument this RtfBorder belongs to</param>
            <param name="borderType">The border type of this RtfBorder</param>
            <param name="border">The RtfBorder to copy</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a RtfBorder
            </summary>
            <param name="doc">The RtfDocument this RtfBorder belongs to</param>
            <param name="borderType">The type of border this RtfBorder is</param>
            <param name="borderPosition">The position of this RtfBorder</param>
            <param name="borderStyle">The style of this RtfBorder</param>
            <param name="borderWidth">The width of this RtfBorder</param>
            <param name="borderColor">The colour of this RtfBorder</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RtfBorder settings
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderColor">
            <summary>
                Gets the colour of this RtfBorder
            </summary>
            <returns>Returns RtfColor of this RtfBorder</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderPosition">
            <summary>
                Gets the position of this RtfBorder
            </summary>
            <returns>Returns the position of this RtfBorder</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderStyle">
            <summary>
                Gets the style of this RtfBorder
            </summary>
            <returns>Returns the style of this RtfBorder</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderType">
            <summary>
                Gets the type of this RtfBorder
            </summary>
            <returns>Returns the type of this RtfBorder</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderWidth">
            <summary>
                Gets the width of this RtfBorder
            </summary>
            <returns>Returns the width of this RtfBorder</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.writeBorderStyle">
            <summary>
                Writes the style of this RtfBorder
            </summary>
            <returns>A byte array containing the style of this RtfBorder</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfBorderGroup">
            <summary>
                The RtfBorderGroup represents a collection of RtfBorders to use in a RtfCell
                or RtfTable.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorderGroup._borders">
            <summary>
                The borders in this RtfBorderGroup
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorderGroup._borderType">
            <summary>
                The type of borders this RtfBorderGroup contains.
                RtfBorder.ROW_BORDER or RtfBorder.CELL_BORDER
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor">
            <summary>
                Constructs an empty RtfBorderGroup.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(System.Int32,System.Int32,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a RtfBorderGroup with on border style for multiple borders.
            </summary>
            <param name="bordersToAdd">
                The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM,
                Rectangle.BOX)
            </param>
            <param name="borderStyle">The style of border to add (from RtfBorder)</param>
            <param name="borderWidth">The border width to use</param>
            <param name="borderColor">The border color to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,iTextSharp.text.rtf.table.RtfBorderGroup)">
            <summary>
                Constructs a RtfBorderGroup based on another RtfBorderGroup.
            </summary>
            <param name="doc">The RtfDocument this RtfBorderGroup belongs to</param>
            <param name="borderType">The type of borders this RtfBorderGroup contains</param>
            <param name="borderGroup">The RtfBorderGroup to use as a base</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Constructs a RtfBorderGroup with certain borders
            </summary>
            <param name="doc">The RtfDocument this RtfBorderGroup belongs to</param>
            <param name="borderType">The type of borders this RtfBorderGroup contains</param>
            <param name="bordersToUse">
                The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM,
                Rectangle.BOX)
            </param>
            <param name="borderWidth">The border width to use</param>
            <param name="borderColor">The border color to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.AddBorder(System.Int32,System.Int32,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Adds borders to the RtfBorderGroup
            </summary>
            <param name="bordersToAdd">
                The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM,
                Rectangle.BOX)
            </param>
            <param name="borderStyle">The style of border to add (from RtfBorder)</param>
            <param name="borderWidth">The border width to use</param>
            <param name="borderColor">The border color to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.RemoveBorder(System.Int32)">
            <summary>
                Removes borders from the list of borders
            </summary>
            <param name="bordersToRemove">The borders to remove (from Rectangle)</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.WriteContent(System.IO.Stream)">
            <summary>
                Writes the borders of this RtfBorderGroup
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.GetBorders">
            <summary>
                Gets the RtfBorders of this RtfBorderGroup
            </summary>
            <returns>The RtfBorders of this RtfBorderGroup</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.setBorder(System.Int32,System.Int32,System.Single,iTextSharp.text.BaseColor)">
            <summary>
                Sets a border in the Hashtable of borders
            </summary>
            <param name="borderPosition">The position of this RtfBorder</param>
            <param name="borderStyle">The type of borders this RtfBorderGroup contains</param>
            <param name="borderWidth">The border width to use</param>
            <param name="borderColor">The border color to use</param>
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfCell">
            <summary>
                The RtfCell wraps a Cell, but can also be added directly to a Table.
                The RtfCell is an extension of Cell, that supports a multitude of different
                borderstyles.
                @version $Id: RtfCell.cs,v 1.14 2008/05/16 19:31:18 psoares33 Exp $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Steffen Stundzig
                @author Benoit WIART
                @see com.lowagie.text.rtf.table.RtfBorder
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MergeNone">
            <summary>
                This cell is not merged
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MergeVertChild">
            <summary>
                This cell is a child cell of a vertical merge operation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MergeVertParent">
            <summary>
                This cell is the parent cell of a vertical merge operation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._deleted">
            <summary>
                Whether this RtfCell is a placeholder for a removed table cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._parentRow">
            <summary>
                The parent RtfRow of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._backgroundColor">
            <summary>
                The background color of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._borders">
            <summary>
                The borders of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellPadding">
            <summary>
                The padding of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellPaddingBottom">
            <summary>
                Cell padding bottom
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellPaddingLeft">
            <summary>
                Whether to use generic padding or individual
                padding values (cellPaddingLeft, cellPaddingTop, cellPaddingBottom, cellPaddingRight)
            </summary>
            <summary>
                private bool usePadding = false;
            </summary>
            <summary>
                Cell padding left
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellPaddingRight">
            <summary>
                Cell padding right
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellPaddingTop">
            <summary>
                Cell padding top
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellRight">
            <summary>
                The right margin of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._cellWidth">
            <summary>
                The width of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._content">
            <summary>
                The content of this RtfCell
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._document">
            <summary>
                The RtfDocument this RtfCell belongs to
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._inHeader">
            <summary>
                Whether this RtfCell is in a header
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell._mergeType">
            <summary>
                The merge type of this RtfCell
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor">
            <summary>
                Constructs an empty RtfCell
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(System.String)">
            <summary>
                Constructs a RtfCell based upon a String
            </summary>
            <param name="content">The String to base the RtfCell on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.IElement)">
            <summary>
                Constructs a RtfCell based upon an Element
                @throws BadElementException If the Element is not valid
            </summary>
            <param name="element">The Element to base the RtfCell on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(System.Boolean)">
            <summary>
                Constructs a deleted RtfCell.
            </summary>
            <param name="deleted">Whether this RtfCell is actually deleted.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfRow,iTextSharp.text.Cell)">
            <summary>
                Constructs a RtfCell based on a Cell.
            </summary>
            <param name="doc">The RtfDocument this RtfCell belongs to</param>
            <param name="row">The RtfRow this RtfCell lies in</param>
            <param name="cell">The Cell to base this RtfCell on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfRow,iTextSharp.text.pdf.PdfPCell)">
            <summary>
                Constructs a RtfCell based on a Cell.
                @since 2.1.3
            </summary>
            <param name="doc">The RtfDocument this RtfCell belongs to</param>
            <param name="row">The RtfRow this RtfCell lies in</param>
            <param name="cell">The PdfPCell to base this RtfCell on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfCell is in a header
            </summary>
            <param name="inHeader"> True  if this RtfCell is in a header,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetInTable(System.Boolean)">
            <summary>
                Unused
            </summary>
            <param name="inTable"></param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfCell belongs to
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.WriteContent(System.IO.Stream)">
            <summary>
                Write the content of this RtfCell
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.WriteDefinition(System.IO.Stream)">
            <summary>
                Write the cell definition part of this RtfCell
            </summary>
            <returns>A byte array with the cell definition</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.IsDeleted">
            <summary>
                Checks whether this RtfCell is a placeholder for
                a table cell that has been removed due to col/row spanning.
            </summary>
            <returns> True  if this RtfCell is deleted,  false  otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.IsInHeader">
            <summary>
                Gets whether this  RtfCell  is in a header
            </summary>
            <returns> True  if this  RtfCell  is in a header,  false  otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetBorders(iTextSharp.text.rtf.table.RtfBorderGroup)">
            <summary>
                Set the borders of this RtfCell
            </summary>
            <param name="borderGroup">The RtfBorderGroup to use as borders</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetBorders">
            <summary>
                Gets the borders of this RtfCell
            </summary>
            <returns>The borders of this RtfCell</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellpadding">
            <summary>
                Gets the cell padding of this RtfCell
            </summary>
            <returns>The cell padding of this RtfCell</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellRight">
            <summary>
                Gets the right margin of this RtfCell
            </summary>
            <returns>The right margin of this RtfCell.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellWidth">
            <summary>
                Gets the cell width of this RtfCell
            </summary>
            <returns>The cell width of this RtfCell</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetRtfBackgroundColor">
            <summary>
                Get the background color of this RtfCell
            </summary>
            <returns>The background color of this RtfCell</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellMergeChild(iTextSharp.text.rtf.table.RtfCell)">
            <summary>
                Merge this cell into the parent cell.
            </summary>
            <param name="mergeParent">The RtfCell to merge with</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellRight(System.Int32)">
            <summary>
                Sets the right margin of this cell. Used in merge operations
            </summary>
            <param name="cellRight">The right margin to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellWidth(System.Int32)">
            <summary>
                Sets the cell width of this RtfCell. Used in merge operations.
            </summary>
            <param name="cellWidth">The cell width to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.importCell(iTextSharp.text.Cell)">
            <summary>
                Imports the Cell properties into the RtfCell
            </summary>
            <param name="cell">The Cell to import</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.importCell(iTextSharp.text.pdf.PdfPCell)">
            <summary>
                Imports the Cell properties into the RtfCell
                @since 2.1.3
            </summary>
            <param name="cell">The PdfPCell to import</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.intToByteArray(System.Int32)">
            <summary>
                Transforms an integer into its String representation and then returns the bytes
                of that string.
            </summary>
            <param name="i">The integer to convert</param>
            <returns>A byte array representing the integer</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfRow">
            <summary>
                The RtfRow wraps one Row for a RtfTable.
                INTERNAL USE ONLY
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Steffen Stundzig
                @author Lorenz Maierhofer
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowAlignCenter">
            <summary>
                Constant for center alignment of this RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowAlignJustified">
            <summary>
                Constant for justified alignment of this RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowAlignLeft">
            <summary>
                Constant for left alignment of this RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowAlignRight">
            <summary>
                Constant for right alignment of this RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowBegin">
            <summary>
                Constant for the RtfRow beginning
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellPaddingLeft">
            <summary>
                Constant for the cell left padding
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellPaddingLeftStyle">
            <summary>
                Constant for the cell left padding style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellPaddingRight">
            <summary>
                Constant for the cell right padding
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellPaddingRightStyle">
            <summary>
                Constant for the cell right padding style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingBottom">
            <summary>
                Constant for the cell bottom spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingBottomStyle">
            <summary>
                Constant for the cell bottom spacing style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingLeft">
            <summary>
                Constant for the cell left spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingLeftStyle">
            <summary>
                Constant for the cell left spacing style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingRight">
            <summary>
                Constant for the cell right spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingRightStyle">
            <summary>
                Constant for the cell right spacing style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingTop">
            <summary>
                Constant for the cell top spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowCellSpacingTopStyle">
            <summary>
                Constant for the cell top spacing style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowEnd">
            <summary>
                Constant for the end of a row
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowGraph">
            <summary>
                Constant for the graph style of this RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowHeaderRow">
            <summary>
                Constant to specify that this is a header RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowKeepTogether">
            <summary>
                Constant to specify that this RtfRow are not to be broken across pages
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowWidth">
            <summary>
                Constant for the RtfRow width
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowWidthStyle">
            <summary>
                Constant for the RtfRow width style
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._parentTable">
            <summary>
                The RtfTable this RtfRow belongs to
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._rowNumber">
            <summary>
                The row number
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._cells">
            <summary>
                The cells of this RtfRow
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow._width">
            <summary>
                The width of this row
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfTable,iTextSharp.text.Row,System.Int32)">
            <summary>
                Constructs a RtfRow for a Row.
            </summary>
            <param name="doc">The RtfDocument this RtfRow belongs to</param>
            <param name="rtfTable">The RtfTable this RtfRow belongs to</param>
            <param name="row">The Row this RtfRow is based on</param>
            <param name="rowNumber">The number of this row</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfTable,iTextSharp.text.pdf.PdfPRow,System.Int32)">
            <summary>
                Constructs a RtfRow for a Row.
                @since 2.1.3
            </summary>
            <param name="doc">The RtfDocument this RtfRow belongs to</param>
            <param name="rtfTable">The RtfTable this RtfRow belongs to</param>
            <param name="row">The Row this RtfRow is based on</param>
            <param name="rowNumber">The number of this row</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of this RtfRow
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.CleanRow">
            <summary>
                Cleans the deleted RtfCells from the total RtfCells.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.GetCells">
            <summary>
                Gets the cells of this RtfRow
            </summary>
            <returns>The cells of this RtfRow</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.GetParentTable">
            <summary>
                Gets the parent RtfTable of this RtfRow
            </summary>
            <returns>The parent RtfTable of this RtfRow</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.HandleCellSpanning">
            <summary>
                Performs a second pass over all cells to handle cell row/column spanning.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.importRow(iTextSharp.text.Row)">
            <summary>
                Imports a Row and copies all settings
            </summary>
            <param name="row">The Row to import</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.importRow(iTextSharp.text.pdf.PdfPRow)">
            <summary>
                Imports a PdfPRow and copies all settings
                @since 2.1.3
            </summary>
            <param name="row">The PdfPRow to import</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.writeRowDefinition(System.IO.Stream)">
            <summary>
                Writes the row definition/settings.
            </summary>
            <param name="result">The  Stream  to write the definitions to.</param>
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfTable">
            <summary>
                The RtfTable wraps a Table.
                INTERNAL USE ONLY
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
                @author Steffen Stundzig
                @author Benoit WIART
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._alignment">
            <summary>
                The alignment of this RtfTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._borders">
            <summary>
                The border style of this RtfTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._cellPadding">
            <summary>
                The cell padding
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._cellsFitToPage">
            <summary>
                Whether the cells in this RtfTable must fit in a page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._cellSpacing">
            <summary>
                The cell spacing
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._headerRows">
            <summary>
                The number of header rows in this RtfTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._offset">
            <summary>
                The offset from the previous text
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._proportionalWidths">
            <summary>
                An array with the proportional widths of the cells in each row
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._rows">
            <summary>
                The rows of this RtfTable
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._tableFitToPage">
            <summary>
                Whether the whole RtfTable must fit in a page
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable._tableWidthPercent">
            <summary>
                The percentage of the page width that this RtfTable covers
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Table)">
            <summary>
                Constructs a RtfTable based on a Table for a RtfDocument.
            </summary>
            <param name="doc">The RtfDocument this RtfTable belongs to</param>
            <param name="table">The Table that this RtfTable wraps</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Constructs a RtfTable based on a PdfTable for a RtfDocument.
                @since 2.1.3
            </summary>
            <param name="doc">The RtfDocument this RtfTable belongs to</param>
            <param name="table">The PdfPTable that this RtfTable wraps</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of this RtfTable
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetAlignment">
            <summary>
                Gets the alignment of this RtfTable
            </summary>
            <returns>The alignment of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetBorders">
            <summary>
                Gets the borders of this RtfTable
            </summary>
            <returns>The borders of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellPadding">
            <summary>
                Gets the cell padding of this RtfTable
            </summary>
            <returns>The cell padding of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellsFitToPage">
            <summary>
                Gets the cellsFitToPage setting of this RtfTable.
            </summary>
            <returns>The cellsFitToPage setting of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellSpacing">
            <summary>
                Gets the cell spacing of this RtfTable
            </summary>
            <returns>The cell spacing of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetHeaderRows">
            <summary>
                Gets the number of header rows of this RtfTable
            </summary>
            <returns>The number of header rows</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetProportionalWidths">
            <summary>
                Gets the proportional cell widths of this RtfTable
            </summary>
            <returns>The proportional widths of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetRows">
            <summary>
                Gets the rows of this RtfTable
            </summary>
            <returns>The rows of this RtfTable</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetTableFitToPage">
            <summary>
                Gets the tableFitToPage setting of this RtfTable.
            </summary>
            <returns>The tableFitToPage setting of this RtfTable.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetTableWidthPercent">
            <summary>
                Gets the percentage of the page width this RtfTable covers
            </summary>
            <returns>The percentage of the page width.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.importTable(iTextSharp.text.Table)">
            <summary>
                Imports the rows and settings from the Table into this
                RtfTable.
            </summary>
            <param name="table">The source Table</param>
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.importTable(iTextSharp.text.pdf.PdfPTable)">
            <summary>
                Imports the rows and settings from the Table into this
                RtfTable.
                @since 2.1.3
            </summary>
            <param name="table">The source PdfPTable</param>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfAnnotation">
            <summary>
                The RtfAnnotation provides support for adding Annotations to the rtf document.
                Only simple Annotations with Title / Content are supported.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation._annotation">
            <summary>
                Constant for the actual annotation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation._annotationAuthor">
            <summary>
                Constant for the author of the annotation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation._annotationId">
            <summary>
                Constant for the id of the annotation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation._content">
            <summary>
                The content of this RtfAnnotation
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation._title">
            <summary>
                The title of this RtfAnnotation
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfAnnotation.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Annotation)">
            <summary>
                Constructs a RtfAnnotation based on an Annotation.
            </summary>
            <param name="doc">The RtfDocument this RtfAnnotation belongs to</param>
            <param name="annotation">The Annotation this RtfAnnotation is based off</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfAnnotation.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of the RtfAnnotation
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfChapter">
            <summary>
                The RtfChapter wraps a Chapter element.
                INTERNAL CLASS
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChapter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Chapter)">
            <summary>
                Constructs a RtfChapter for a given Chapter
            </summary>
            <param name="doc">The RtfDocument this RtfChapter belongs to</param>
            <param name="chapter">The Chapter this RtfChapter is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChapter.WriteContent(System.IO.Stream)">
            <summary>
                Writes the RtfChapter and its contents
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfChunk">
            <summary>
                The RtfChunk contains one piece of text. The smallest text element available
                in iText.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._fontSubscript">
            <summary>
                Constant for the subscript flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._fontSuperscript">
            <summary>
                Constant for the superscript flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._fontEndSuperSubscript">
            <summary>
                Constant for the end of sub / superscript flag
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._backgroundColor">
            <summary>
                Constant for background colour.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._background">
            <summary>
                An optional background colour.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._content">
            <summary>
                The actual content of this RtfChunk
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._font">
            <summary>
                The font of this RtfChunk
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._superSubScript">
            <summary>
                The super / subscript of this RtfChunk
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk._softLineBreaks">
            <summary>
                Whether to use soft line breaks instead of hard ones.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Chunk)">
            <summary>
                Constructs a RtfChunk based on the content of a Chunk
            </summary>
            <param name="doc">The RtfDocument that this Chunk belongs to</param>
            <param name="chunk">The Chunk that this RtfChunk is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of this RtfChunk. First the font information
                is written, then the content, and then more font information
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfChunk belongs to.
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.SetSoftLineBreaks(System.Boolean)">
            <summary>
                Sets whether to use soft line breaks instead of default hard ones.
            </summary>
            <param name="softLineBreaks">whether to use soft line breaks instead of default hard ones.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.GetSoftLineBreaks">
            <summary>
                Gets whether to use soft line breaks instead of default hard ones.
            </summary>
            <returns>whether to use soft line breaks instead of default hard ones.</returns>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfNewPage">
            <summary>
                The RtfNewPage creates a new page. INTERNAL CLASS
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfNewPage.NewPage">
            <summary>
                Constant for a new page
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfNewPage.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Constructs a RtfNewPage
            </summary>
            <param name="doc">The RtfDocument this RtfNewPage belongs to</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfNewPage.WriteContent(System.IO.Stream)">
            <summary>
                Writes a new page
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfParagraph">
            <summary>
                The RtfParagraph is an extension of the RtfPhrase that adds alignment and
                indentation properties. It wraps a Paragraph.
                @version $Version:$
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.Paragraph">
            <summary>
                Constant for the end of a paragraph
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.ParagraphStyle">
            <summary>
                An optional RtfParagraphStyle to use for styling.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Paragraph)">
            <summary>
                Constructs a RtfParagraph belonging to a RtfDocument based on a Paragraph.
            </summary>
            <param name="doc">The RtfDocument this RtfParagraph belongs to</param>
            <param name="paragraph">The Paragraph that this RtfParagraph is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.GetIndentLeft">
            <summary>
                Gets the left indentation of this RtfParagraph.
            </summary>
            <returns>The left indentation.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.GetIndentRight">
            <summary>
                Gets the right indentation of this RtfParagraph.
            </summary>
            <returns>The right indentation.</returns>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetIndentLeft(System.Int32)">
            <summary>
                Sets the left indentation of this RtfParagraph.
            </summary>
            <param name="indentLeft">The left indentation to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetIndentRight(System.Int32)">
            <summary>
                Sets the right indentation of this RtfParagraph.
            </summary>
            <param name="indentRight">The right indentation to use.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetKeepTogetherWithNext(System.Boolean)">
            <summary>
                Set whether this RtfParagraph must stay on the same page as the next one.
            </summary>
            <param name="keepTogetherWithNext">Whether this RtfParagraph must keep together with the next.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.WriteContent(System.IO.Stream)">
            <summary>
                Writes the content of this RtfParagraph. First paragraph specific data is written
                and then the RtfChunks of this RtfParagraph are added.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfPhrase">
            <summary>
                The RtfPhrase contains multiple RtfChunks
                @version $Id: RtfPhrase.cs,v 1.10 2008/05/16 19:31:24 psoares33 Exp $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.InTable">
            <summary>
                Constant for phrase in a table indication
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.LineSpacing">
            <summary>
                Constant for the line spacing.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.ParagraphDefaults">
            <summary>
                Constant for the resetting of the paragraph defaults
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.Plain">
            <summary>
                Constant for resetting of font settings to their defaults
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase._lineLeading">
            <summary>
                The height of each line.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.Chunks">
            <summary>
                ArrayList containing the RtfChunks of this RtfPhrase
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Phrase)">
            <summary>
                Constructs a new RtfPhrase for the RtfDocument with the given Phrase
            </summary>
            <param name="doc">The RtfDocument this RtfPhrase belongs to</param>
            <param name="phrase">The Phrase this RtfPhrase is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                A basically empty constructor that is used by the RtfParagraph.
            </summary>
            <param name="doc">The RtfDocument this RtfPhrase belongs to.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfPhrase is in a header. Sets the correct inTable setting for all
                child elements.
            </summary>
            <param name="inHeader"> True  if this RtfPhrase is in a header,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetInTable(System.Boolean)">
            <summary>
                Sets whether this RtfPhrase is in a table. Sets the correct inTable setting for all
                child elements.
            </summary>
            <param name="inTable"> True  if this RtfPhrase is in a table,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            <summary>
                Sets the RtfDocument this RtfPhrase belongs to. Also sets the RtfDocument for all child
                elements.
            </summary>
            <param name="doc">The RtfDocument to use</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.WriteContent(System.IO.Stream)">
            <summary>
                Write the content of this RtfPhrase. First resets to the paragraph defaults
                then if the RtfPhrase is in a RtfCell a marker for this is written and finally
                the RtfChunks of this RtfPhrase are written.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfSection">
            <summary>
                The RtfSection wraps a Section element.
                INTERNAL CLASS
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfSection.Items">
            <summary>
                The sub-items of this RtfSection
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfSection.Title">
            <summary>
                The title paragraph of this RtfSection
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Section)">
            <summary>
                Constructs a RtfSection for a given Section. If the autogenerateTOCEntries
                property of the RtfDocument is set and the title is not empty then a TOC entry
                is generated for the title.
            </summary>
            <param name="doc">The RtfDocument this RtfSection belongs to</param>
            <param name="section">The Section this RtfSection is based on</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.SetInHeader(System.Boolean)">
            <summary>
                Sets whether this RtfSection is in a header. Sets the correct inTable setting for all
                child elements.
            </summary>
            <param name="inHeader"> True  if this RtfSection is in a header,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.SetInTable(System.Boolean)">
            <summary>
                Sets whether this RtfSection is in a table. Sets the correct inTable setting for all
                child elements.
            </summary>
            <param name="inTable"> True  if this RtfSection is in a table,  false  otherwise</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.WriteContent(System.IO.Stream)">
            <summary>
                Write this RtfSection and its contents
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.updateIndentation(System.Single,System.Single,System.Single)">
            <summary>
                Updates the left, right and content indentation of all RtfParagraph and RtfSection
                elements that this RtfSection contains.
            </summary>
            <param name="indentLeft">The left indentation to add.</param>
            <param name="indentRight">The right indentation to add.</param>
            <param name="indentContent">The content indentation to add.</param>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfTab">
            <summary>
                The RtfTab encapsulates a tab position and tab type in a paragraph.
                To add tabs to a paragraph construct new RtfTab objects with the desired
                tab position and alignment and then add them to the paragraph. In the actual
                text the tabs are then defined as standard \t characters.
                RtfTab tab = new RtfTab(300, RtfTab.TAB_LEFT_ALIGN);
                Paragraph para = new Paragraph();
                para.Add(tab);
                para.Add("This paragraph has a\ttab defined.");
                @version $Revision: 1.5 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_CENTER_ALIGN">
            <summary>
                A tab where the text is centre aligned.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_DECIMAL_ALIGN">
            <summary>
                A tab where the text is aligned on the decimal character. Which
                character that is depends on the language settings of the viewer.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_LEFT_ALIGN">
            <summary>
                A tab where the text is left aligned.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_RIGHT_ALIGN">
            <summary>
                A tab where the text is right aligned.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab._position">
            <summary>
                The tab position in twips.
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab._type">
            <summary>
                The tab alignment.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTab.#ctor(System.Single,System.Int32)">
            <summary>
                Constructs a new RtfTab with the given position and type. The position
                is in standard iText points. The type is one of the tab alignment
                constants defined in the RtfTab.
            </summary>
            <param name="position">The position of the tab in points.</param>
            <param name="type">The tab type constant.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTab.WriteContent(System.IO.Stream)">
            <summary>
                Writes the tab settings.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfTabGroup">
            <summary>
                The RtfTabGroup is a convenience class if the same tabs are to be added
                to multiple paragraphs.
                RtfTabGroup tabs = new RtfTabGroup();
                tabs.Add(new RtfTab(70, RtfTab.TAB_LEFT_ALIGN));
                tabs.Add(new RtfTab(160, RtfTab.TAB_CENTER_ALIGN));
                tabs.Add(new RtfTab(250, RtfTab.TAB_DECIMAL_ALIGN));
                tabs.Add(new RtfTab(500, RtfTab.TAB_RIGHT_ALIGN));
                Paragraph para = new Paragraph();
                para.Add(tabs);
                para.Add("\tLeft aligned\tCentre aligned\t12,45\tRight aligned");
                @version $Revision: 1.5 $
                @author Mark Hall (Mark.Hall@mail.room3b.eu)
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTabGroup._tabs">
            <summary>
                The tabs to add.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.#ctor">
            <summary>
                Constructs an empty RtfTabGroup.
            </summary>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.#ctor(System.Collections.Generic.IList{iTextSharp.text.rtf.text.RtfTab})">
            <summary>
                Constructs a RtfTabGroup with a set of tabs.
            </summary>
            <param name="tabs">An ArrayList with the RtfTabs to group in this RtfTabGroup.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.Add(iTextSharp.text.rtf.text.RtfTab)">
            <summary>
                Adds a RtfTab to the list of grouped tabs.
            </summary>
            <param name="tab">The RtfTab to add.</param>
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.WriteContent(System.IO.Stream)">
            <summary>
                Combines the tab output form all grouped tabs.
            </summary>
        </member>
        <member name="T:iTextSharp.text.Section">
            <summary>
                A Section is a part of a Document containing
                other Sections, Paragraphs, List
                and/or Tables.
            </summary>
            <remarks>
                You can not construct a Section yourself.
                You will have to ask an instance of Section to the
                Chapter or Section to which you want to
                add the new Section.
            </remarks>
            <example>
                Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 18,
                Font.BOLDITALIC, new Color(0, 0, 255)));
                Chapter chapter2 = new Chapter(title2, 2);
                Paragraph someText = new Paragraph("This is some text");
                chapter2.Add(someText);
                Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 16,
                Font.BOLD, new Color(255, 0, 0)));
                Section section1 = chapter2.AddSection(title21);
                Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains
                some text to test the functionality of Chapters and Section.");
                section1.Add(someSectionText);
                Paragraph title211 = new Paragraph("This is SubSection 1 in Section 1 in Chapter 2",
                FontFactory.GetFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(255, 0, 0)));
                Section section11 = section1.AddSection(40, title211, 2);
                section11.Add(someSectionText); strong>
            </example>
        </member>
        <member name="F:iTextSharp.text.Section.NUMBERSTYLE_DOTTED">
            <summary>
                constant
            </summary>
            <summary>
                A possible number style. The default number style: "1.2.3."
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT">
            <summary>
                A possible number style. For instance: "1.2.3"
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.addedCompletely">
            <summary>
                Indicates if the Section was added completely to the document.
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.bookmarkOpen">
            <summary> false if the bookmark children are not visible </summary>
        </member>
        <member name="F:iTextSharp.text.Section.bookmarkTitle">
            <summary>
                The bookmark title if different from the content title
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.Complete">
            <summary>
                Indicates if the Section will be complete once added to the document.
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentation">
            <summary> The additional indentation of the content of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentationLeft">
            <summary> The indentation of this section on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentationRight">
            <summary> The indentation of this section on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.notAddedYet">
            <summary>
                Indicates if this is the first time the section was added.
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numberDepth">
            <summary> This is the number of sectionnumbers that has to be shown before the section title. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.Numbers">
            <summary>
                membervariables
            </summary>
            <summary> This is the complete list of sectionnumbers of this section and the parents of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numberStyle">
            <summary>
                The style for sectionnumbers.
                @since    iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Section.Subsections">
            <summary> This is the number of subsections. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.title">
            <summary> This is the title of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.triggerNewPage">
            <summary>
                true if the section has to trigger a new page
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.#ctor">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a new Section.
            </summary>
            <overloads>
                Has 2 overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Section.#ctor(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
                Constructs a new Section.
            </summary>
            <param name="title">a Paragraph</param>
            <param name="numberDepth">the numberDepth</param>
        </member>
        <member name="P:iTextSharp.text.Section.BookmarkOpen">
            <summary>
                private methods
            </summary>
            <summary>
                Get/set the bookmark
            </summary>
            <value>a bool</value>
        </member>
        <member name="P:iTextSharp.text.Section.BookmarkTitle">
            <summary>
                Sets the bookmark title. The bookmark title is the same as the section title but
                can be changed with this method.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Section.Depth">
            <summary>
                Returns the depth of this section.
            </summary>
            <value>the depth</value>
        </member>
        <member name="P:iTextSharp.text.Section.Indentation">
            <summary>
                Get/set the indentation of the content of this Section.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.IndentationLeft">
            <summary>
                Get/set the indentation of this Section on the left side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.IndentationRight">
            <summary>
                Get/set the indentation of this Section on the right side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.NotAddedYet">
            <summary>
                Indicates if this is the first time the section is added.
                @since   iText2.0.8
            </summary>
            <returns>true if the section wasn't added yet</returns>
        </member>
        <member name="P:iTextSharp.text.Section.NumberDepth">
            <summary>
                Get/set the numberdepth of this Section.
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Section.NumberStyle">
            <summary>
                Sets the style for numbering sections.
                Possible values are NUMBERSTYLE_DOTTED: 1.2.3. (the default)
                or NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT: 1.2.3
                @since    iText 2.0.8
            </summary>
        </member>
        <member name="P:iTextSharp.text.Section.Title">
            <summary>
                Get/set the title of this section
            </summary>
            <value>a Paragraph</value>
        </member>
        <member name="P:iTextSharp.text.Section.AddedCompletely">
            <summary>
                @see com.lowagie.text.LargeElement#isAddedCompletely()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="P:iTextSharp.text.Section.ElementComplete">
            <summary>
                @since   iText 2.0.8
                @see com.lowagie.text.LargeElement#isComplete()
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.FlushContent">
            <summary>
                @since   iText 2.0.8
                @see com.lowagie.text.LargeElement#flushContent()
            </summary>
        </member>
        <member name="P:iTextSharp.text.Section.Chunks">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Section.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Section.Add(iTextSharp.text.IElement)">
            <summary>
                overriding some of the ArrayList-methods
            </summary>
            <summary>
                Adds a Paragraph, List, Table or another Section
                to this Section.
            </summary>
            <param name="o">an object of type Paragraph, List, Table or another Section</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsContent">
            <summary>
                @see com.lowagie.text.Element#isContent()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Section.ConstructTitle(iTextSharp.text.Paragraph,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
                Constructs a Paragraph that will be used as title for a Section or Chapter.
                @since    iText 2.0.8
            </summary>
            <param name="title">the title of the section</param>
            <param name="numbers">a list of sectionnumbers</param>
            <param name="numberDepth">how many numbers have to be shown</param>
            <param name="numberStyle">the numbering style</param>
            <returns>a Paragraph object</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsTag(System.String)">
            <summary>
                Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsTitle(System.String)">
            <summary>
                Checks if a given tag corresponds with a title tag for this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Section.Add(System.Int32,System.Object)">
            <summary>
                Adds a Paragraph, List or Table
                to this Section.
            </summary>
            <param name="index">index at which the specified element is to be inserted</param>
            <param name="o">an object of type Paragraph, List or Table</param>
        </member>
        <member name="M:iTextSharp.text.Section.AddAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Adds a collection of Elements
                to this Section.
            </summary>
            <param name="collection">a collection of Paragraphs, Lists and/or Tables</param>
            <returns>true if the action succeeded, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddMarkedSection">
            <summary>
                Adds a marked section. For use in class MarkedSection only!
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,iTextSharp.text.Paragraph,System.Int32)">
            <summary>
                Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,iTextSharp.text.Paragraph)">
            <summary>
                methods that return a Section
            </summary>
            <summary>
                Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
                Creates a Section, add it to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(iTextSharp.text.Paragraph)">
            <summary>
                Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,System.String,System.Int32)">
            <summary>
                Adds a Section to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.String,System.Int32)">
            <summary>
                Adds a Section to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,System.String)">
            <summary>
                Adds a Section to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.String)">
            <summary>
                Adds a Section to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.GetBookmarkTitle">
            <summary>
                Gets the bookmark title.
            </summary>
            <returns>the bookmark title</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsChapter">
            <summary>
                Checks if this object is a Chapter.
            </summary>
            <returns>
                true if it is a Chapter,
                false if it is a Section
            </returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsSection">
            <summary>
                methods to retrieve information
            </summary>
            <summary>
                Checks if this object is a Section.
            </summary>
            <returns>
                true if it is a Section,
                false if it is a Chapter.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Section.NewPage">
            <summary>
                Adds a new page to the section.
                @since   2.1.1
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.Set(System.util.Properties)">
            <summary>
                Alters the attributes of this Section.
            </summary>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iTextSharp.text.Section.SetChapterNumber(System.Int32)">
            <summary>
                Changes the Chapter number.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Section.setNumbers(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
                Sets the number of this section.
            </summary>
            <param name="number">the number of this section</param>
            <param name="numbers">an ArrayList, containing the numbers of the Parent</param>
        </member>
        <member name="T:iTextSharp.text.SimpleCell">
            <summary>
                Summary description for SimpleCell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.CELL">
            <summary>
                the CellAttributes object represents a cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.ROW">
            <summary>
                the CellAttributes object represents a row.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._content">
            <summary>
                the content of the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._cellgroup">
            <summary>
                indicates if these are the attributes of a single Cell (false) or a group of Cells (true).
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._colspan">
            <summary>
                the colspan of a Cell
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._horizontalAlignment">
            <summary>
                horizontal alignment inside the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._paddingBottom">
            <summary>
                an extra padding variable
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._width">
            <summary>
                the width of the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell._widthpercentage">
            <summary>
                the widthpercentage of the Cell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useAscender">
            <summary>
                Indicates that the largest ascender height should be used to determine the
                height of the first line.  Note that this only has an effect when rendered
                to PDF.  Setting this to true can help with vertical alignment problems.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useBorderPadding">
            <summary>
                Adjusts the cell contents to compensate for border widths.  Note that
                this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useDescender">
            <summary>
                Indicates that the largest descender height should be added to the height of
                the last line (so characters like y don't dip into the border).   Note that
                this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleCell.#ctor(System.Boolean)">
            <summary>
                A CellAttributes object is always constructed without any dimensions.
                Dimensions are defined after creation.
            </summary>
            <param name="row">only true if the CellAttributes object represents a row.</param>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Cellgroup">
            <summary>
            </summary>
            <returns>Returns the cellgroup.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Colspan">
            <summary>
            </summary>
            <returns>Returns the colspan.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.HorizontalAlignment">
            <summary>
            </summary>
            <returns>Returns the horizontal alignment.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Padding">
            <summary>
                Sets the padding parameters if they are undefined.
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.PaddingBottom">
            <summary>
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.PaddingLeft">
            <summary>
                an extra padding variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.PaddingRight">
            <summary>
                an extra padding variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.PaddingTop">
            <summary>
                an extra padding variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Spacing">
            <summary>
            </summary>
            <returns>Returns the spacing.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.SpacingBottom">
            <summary>
                an extra spacing variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.SpacingLeft">
            <summary>
                an extra spacing variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.SpacingRight">
            <summary>
                an extra spacing variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.SpacingTop">
            <summary>
                an extra spacing variable
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.UseAscender">
            <summary>
            </summary>
            <returns>Returns the useAscender.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.UseBorderPadding">
            <summary>
            </summary>
            <returns>Returns the useBorderPadding.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.VerticalAlignment">
            <summary>
                vertical alignment inside the Cell.
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Width">
            <summary>
            </summary>
            <returns>Returns the width.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Widthpercentage">
            <summary>
            </summary>
            <returns>Returns the widthpercentage.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Content">
            <summary>
            </summary>
            <returns>Returns the content.</returns>
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle,
                com.lowagie.text.pdf.PdfContentByte[])
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleCell.Add(iTextSharp.text.IElement)">
            <summary>
                @see com.lowagie.text.TextElementArray#add(java.lang.Object)
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleCell.AddElement(iTextSharp.text.IElement)">
            <summary>
                Adds content to this object.
                @throws BadElementException
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CreateCell(iTextSharp.text.SimpleCell)">
            <summary>
                Creates a Cell with these attributes.
                @throws BadElementException
            </summary>
            <param name="rowAttributes"></param>
            <returns>a cell based on these attributes.</returns>
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CreatePdfPCell(iTextSharp.text.SimpleCell)">
            <summary>
                Creates a PdfPCell with these attributes.
            </summary>
            <param name="rowAttributes"></param>
            <returns>a PdfPCell based on these attributes.</returns>
        </member>
        <member name="T:iTextSharp.text.SimpleTable">
            <summary>
                Summary description for SimpleTable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable._content">
            <summary>
                the content of a Table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable._alignment">
            <summary>
                the alignment of the table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable._cellpadding">
            <summary>
                the padding of the Cells.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable._cellspacing">
            <summary>
                the spacing of the Cells.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable._width">
            <summary>
                the width of the Table.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable._widthpercentage">
            <summary>
                the widthpercentage of the Table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.#ctor">
            <summary>
                A RectangleCell is always constructed without any dimensions.
                Dimensions are defined after creation.
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Alignment">
            <summary>
            </summary>
            <returns>Returns the alignment.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Cellpadding">
            <summary>
            </summary>
            <returns>Returns the cellpadding.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Cellspacing">
            <summary>
            </summary>
            <returns>Returns the cellspacing.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Width">
            <summary>
            </summary>
            <returns>Returns the width.</returns>
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Widthpercentage">
            <summary>
            </summary>
            <returns>Returns the widthpercentage.</returns>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
                @see com.lowagie.text.pdf.PdfPTableEvent#tableLayout(com.lowagie.text.pdf.PdfPTable, float[][], float[], int, int,
                com.lowagie.text.pdf.PdfContentByte[])
            </summary>
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Type">
            <summary>
                @see com.lowagie.text.Element#type()
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.Add(iTextSharp.text.IElement)">
            <summary>
                @see com.lowagie.text.TextElementArray#add(java.lang.Object)
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.AddElement(iTextSharp.text.SimpleCell)">
            <summary>
                Adds content to this object.
                @throws BadElementException
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.CreatePdfPTable">
            <summary>
                Creates a PdfPTable object based on this TableAttributes object.
                @throws DocumentException
            </summary>
            <returns>a com.lowagie.text.pdf.PdfPTable object</returns>
        </member>
        <member name="M:iTextSharp.text.SimpleTable.CreateTable">
            <summary>
                Creates a Table object based on this TableAttributes object.
                @throws BadElementException
            </summary>
            <returns>a com.lowagie.text.Table object</returns>
        </member>
        <member name="T:iTextSharp.text.SpecialSymbol">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.Get(System.Char,iTextSharp.text.Font)">
            <summary>
                Gets a chunk with a symbol character.
            </summary>
            <param name="c">a character that has to be changed into a symbol</param>
            <param name="font">Font if there is no SYMBOL character corresponding with c</param>
            <returns>a SYMBOL version of a character</returns>
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.GetCorrespondingSymbol(System.Char)">
            <summary>
                Looks for the corresponding symbol in the font Symbol.
            </summary>
            <param name="c">the original ASCII-char</param>
            <returns>the corresponding symbol in font Symbol</returns>
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.Index(System.String)">
            <summary>
                Returns the first occurrence of a special symbol in a  String .
            </summary>
            <param name="str">a  String </param>
            <returns>an index of -1 if no special symbol was found</returns>
        </member>
        <member name="T:iTextSharp.text.Table">
            <summary>
                A Table is a Rectangle that contains Cells,
                ordered in some kind of matrix.
            </summary>
            <remarks>
                Tables that span multiple pages are cut into different parts automatically.
                If you want a table header to be repeated on every page, you may not forget to
                mark the end of the header section by using the method EndHeaders().
                The matrix of a table is not necessarily an m x n-matrix. It can contain holes
                or cells that are bigger than the unit. Believe me or not, but it took some serious
                thinking to make this as userfriendly as possible. I hope you wil find the result
                quite simple (I love simple solutions, especially for complex problems).
            </remarks>
            <example>
                // Remark: You MUST know the number of columns when constructing a Table.
                //         The number of rows is not important.
                Table table = new Table(3);
                table.SetBorderWidth(1);
                table.SetBorderColor(new Color(0, 0, 255));
                table.SetPadding(5);
                table.SetSpacing(5);
                Cell cell = new Cell("header");
                cell.SetHeader(true);
                cell.SetColspan(3);
                table.AddCell(cell);
                table.EndHeaders();
                cell = new Cell("example cell with colspan 1 and rowspan 2");
                cell.SetRowspan(2);
                cell.SetBorderColor(new Color(255, 0, 0));
                table.AddCell(cell);
                table.AddCell("1.1");
                table.AddCell("2.1");
                table.AddCell("1.2");
                table.AddCell("2.2");
                table.AddCell("cell test1");
                cell = new Cell("big cell");
                cell.SetRowspan(2);
                cell.SetColspan(2);
                table.AddCell(cell);
                table.AddCell("cell test2");
            </example>
            <seealso cref="T:iTextSharp.text.Rectangle" />
            <seealso cref="T:iTextSharp.text.Element" />
            <seealso cref="T:iTextSharp.text.Row" />
            <seealso cref="T:iTextSharp.text.Cell" />
        </member>
        <member name="F:iTextSharp.text.Table._alignment">
            <summary> This is the horizontal Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._cellpadding">
            <summary> This is cellpadding. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._cellsFitPage">
            <summary> If true cells may not be split over two pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._cellspacing">
            <summary> This is cellspacing. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._columns">
            <summary> This is the number of columns in the Table. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._curPosition">
            <summary>
                this is the current Position in the table
            </summary>
        </member>
        <member name="F:iTextSharp.text.Table._defaultCell">
            <summary> This Empty Cell contains the DEFAULT layout of each Cell added with the method AddCell(string content). </summary>
        </member>
        <member name="F:iTextSharp.text.Table._lastHeaderRow">
            <summary>
                these variables contain the layout of the table
            </summary>
            <summary> This is the number of the last row of the table headers. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._mTableInserted">
            <summary> bool to track if a table was inserted (to avoid unnecessary computations afterwards) </summary>
        </member>
        <member name="F:iTextSharp.text.Table._offset">
            <summary> This is the offset of the table. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._rows">
            <summary> This is the list of Rows. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._tableFitsPage">
            <summary> If true this table may not be split over two pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Table._width">
            <summary> This is the width of the table (in percent of the available space). </summary>
        </member>
        <member name="F:iTextSharp.text.Table._widths">
            <summary> This is an array containing the widths (in percentages) of every column. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.autoFillEmptyCells">
            <summary>
                membervariables
            </summary>
            <summary>
                these variables contain the data of the table
            </summary>
            <summary>
                Boolean to automatically fill empty cells before a table is rendered
                (takes CPU so may be set to false in case of certainty)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Table.complete">
            <summary>
                Indicates if the PdfPTable is complete once added to the document.
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="F:iTextSharp.text.Table.notAddedYet">
            <summary>
                Indicates if this is the first time the section was added.
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.Int32)">
            <summary>
                constructors
            </summary>
            <summary>
                Constructs a Table with a certain number of columns.
            </summary>
            <param name="columns">The number of columns in the table</param>
            <overloads>
                Has three overloads
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructs a Table with a certain number of columns
                and a certain number of Rows.
            </summary>
            <param name="columns">The number of columns in the table</param>
            <param name="rows">The number of rows</param>
            <overloads>
                Has three overloads
            </overloads>
        </member>
        <member name="P:iTextSharp.text.Table.Alignment">
            <summary>
                implementation of the Element-methods
            </summary>
            <summary>
                Get/set the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.AutoFillEmptyCells">
            <summary>
                Enables/disables automatic insertion of empty cells before table is rendered. (default = false)
            </summary>
            <remarks>
                As some people may want to create a table, fill only a couple of the cells and don't bother with
                investigating which empty ones need to be added, this default behaviour may be very welcome.
                Disabling is recommended to increase speed. (empty cells should be added through extra code then)
            </remarks>
            <value>enable/disable autofill</value>
        </member>
        <member name="P:iTextSharp.text.Table.Cellpadding">
            <summary>
                Get/set the cellpadding.
            </summary>
            <value>the cellpadding</value>
        </member>
        <member name="P:iTextSharp.text.Table.CellsFitPage">
            <summary>
                Allows you to control when a page break occurs.
            </summary>
            <remarks>
                When a cell doesn't fit a page, it is split in two parts.
                If you want to avoid this, you should set the <VAR>cellsFitPage</VAR> value to true.
            </remarks>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Cellspacing">
            <summary>
                Get/set the cellspacing.
            </summary>
            <value>the cellspacing</value>
        </member>
        <member name="P:iTextSharp.text.Table.Columns">
            <summary>
                Gets the number of columns.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Convert2Pdfptable">
            <summary>
                If set to true, iText will try to convert the Table to a PdfPTable.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCell">
            <summary>
                Sets the default layout of the Table to
                the provided Cell
            </summary>
            <param name="value">a cell with all the defaults</param>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBackgroundColor">
            <summary>
                Changes the backgroundcolor in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new color</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorder">
            <summary>
                Changes the border in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new border value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorderColor">
            <summary>
                Changes the bordercolor in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorderWidth">
            <summary>
                Changes the width of the borders in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new width</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellGrayFill">
            <summary>
                Changes the grayfill in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultColspan">
            <summary>
                Changes the colspan in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new colspan value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultHorizontalAlignment">
            <summary>
                Changes the horizontalalignment in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new alignment value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultLayout">
            <summary>
                Sets the default layout of the Table to
                the provided Cell
            </summary>
            <param name="value">a cell with all the defaults</param>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultRowspan">
            <summary>
                Changes the rowspan in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new rowspan value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultVerticalAlignment">
            <summary>
                Changes the verticalAlignment in the default layout of the Cells
                added with method AddCell(string content).
            </summary>
            <value>the new alignment value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Dimension">
            <summary>
                Gets the dimension of this table
            </summary>
            <value>the dimension</value>
        </member>
        <member name="P:iTextSharp.text.Table.LastHeaderRow">
            <summary>
                Sets the horizontal Element.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Locked">
            <summary>
                Is the width a percentage (false) or an absolute width (true)?
            </summary>
        </member>
        <member name="P:iTextSharp.text.Table.NextColumn">
            <summary>
                Returns the next column 0-based index where a new cell would be added.
                (contributed by dperezcar@fcc.es)
            </summary>
            <returns>y coordinate for the next row</returns>
        </member>
        <member name="P:iTextSharp.text.Table.NextRow">
            <summary>
                Returns the next row 0-based index where a new cell would be added.
                (contributed by dperezcar@fcc.es)
            </summary>
            <returns>x coordinate for the next row</returns>
        </member>
        <member name="P:iTextSharp.text.Table.NotAddedYet">
            <summary>
                Indicates if this is the first time the section is added.
                @since   iText2.0.8
            </summary>
            <returns>true if the section wasn't added yet</returns>
        </member>
        <member name="P:iTextSharp.text.Table.Offset">
            <summary>
                Get/set the offset of this table.
            </summary>
            <value>the space between this table and the previous element.</value>
        </member>
        <member name="P:iTextSharp.text.Table.Padding">
            <summary>
                Sets the cellpadding.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.ProportionalWidths">
            <summary>
                Gets the proportional widths of the columns in this Table.
            </summary>
            <value>the proportional widths of the columns in this Table</value>
        </member>
        <member name="P:iTextSharp.text.Table.Size">
            <summary>
                methods to retrieve the membervariables
            </summary>
            <summary>
                Gets the number of rows in this Table.
            </summary>
            <value>the number of rows in this Table</value>
        </member>
        <member name="P:iTextSharp.text.Table.Spacing">
            <summary>
                Sets the cellspacing.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.TableFitsPage">
            <summary>
                Allows you to control when a page break occurs.
            </summary>
            <remarks>
                When a table doesn't fit a page, it is split in two parts.
                If you want to avoid this, you should set the <VAR>tableFitsPage</VAR> value to true.
            </remarks>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Width">
            <summary>
                Get/set the table width (a percentage).
            </summary>
            <value>the table width (a percentage)</value>
        </member>
        <member name="P:iTextSharp.text.Table.Widths">
            <summary>
                Sets the widths of the different columns (percentages).
            </summary>
            <remarks>
                You can give up relative values of borderwidths.
                The sum of these values will be considered 100%.
                The values will be recalculated as percentages of this sum.
            </remarks>
            <example>
                float[] widths = {2, 1, 1};
                table.SetWidths(widths)
                The widths will be: a width of 50% for the first column,
                25% for the second and third column.
            </example>
            <value>an array with values</value>
        </member>
        <member name="P:iTextSharp.text.Table.CurrentLocationToNextValidPosition">
            <summary>
                Sets current col/row to Valid(empty) pos after addCell/Table
            </summary>
            <value>a System.Drawing.Point</value>
        </member>
        <member name="P:iTextSharp.text.Table.ElementComplete">
            <summary>
                @since   iText 2.0.8
                @see com.lowagie.text.LargeElement#isComplete()
            </summary>
        </member>
        <member name="P:iTextSharp.text.Table.Type">
            <summary>
                Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="M:iTextSharp.text.Table.FlushContent">
            <summary>
                @since   iText 2.0.8
                @see com.lowagie.text.LargeElement#flushContent()
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.IsNestable">
            <summary>
                @see com.lowagie.text.Element#isNestable()
                @since   iText 2.0.8
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.Process(iTextSharp.text.IElementListener)">
            <summary>
                Processes the element by adding it (or the different parts) to an
                IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell,System.Int32,System.Int32)">
            <summary>
                Adds a Cell to the Table at a certain row and column.
            </summary>
            <param name="aCell">The Cell to add</param>
            <param name="row">The row where the Cell will be added</param>
            <param name="column">The column where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell,System.Object)">
            <summary>
                methods to add content to the table
            </summary>
            <summary>
                Adds a Cell to the Table at a certain location.
            </summary>
            <param name="aCell">The Cell to add</param>
            <param name="aLocation">The location where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell)">
            <summary>
                Adds a Cell to the Table.
            </summary>
            <param name="cell">a Cell</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Phrase)">
            <summary>
                Adds a Cell to the Table.
            </summary>
            <remarks>
                This is a shortcut for AddCell(Cell cell).
                The Phrase will be converted to a Cell.
            </remarks>
            <param name="content">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Phrase,System.Drawing.Point)">
            <summary>
                Adds a Cell to the Table.
            </summary>
            <param name="content">a Phrase</param>
            <param name="location">a System.Drawing.Point</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(System.String)">
            <summary>
                Adds a Cell to the Table.
            </summary>
            <remarks>
                This is a shortcut for AddCell(Cell cell).
                The string will be converted to a Cell.
            </remarks>
            <param name="content">a string</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(System.String,System.Drawing.Point)">
            <summary>
                Adds a Cell to the Table.
            </summary>
            <remarks>
                This is a shortcut for AddCell(Cell cell, System.Drawing.Point location).
                The string will be converted to a Cell.
            </remarks>
            <param name="content">a string</param>
            <param name="location">a point</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddColumns(System.Int32)">
            <summary>
                Gives you the posibility to add columns.
            </summary>
            <param name="aColumns">the number of columns to add</param>
        </member>
        <member name="M:iTextSharp.text.Table.Complete">
            <summary>
                Will fill empty cells with valid blank Cells
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.CreatePdfPTable">
            <summary>
                Create a PdfPTable based on this Table object.
                @throws BadElementException
            </summary>
            <returns>a PdfPTable object</returns>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteColumn(System.Int32)">
            <summary>
                Deletes a column in this table.
            </summary>
            <param name="column">the number of the column that has to be deleted</param>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteLastRow">
            <summary>
                Deletes all rows in this table.
                (contributed by dperezcar@fcc.es)
            </summary>
            <summary>
                Deletes the last row in this table.
            </summary>
            <returns>true if the row was deleted; false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteRow(System.Int32)">
            <summary>
                Deletes a row.
            </summary>
            <param name="row">the number of the row to delete</param>
            <returns>true if the row was deleted; false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Table.EndHeaders">
            <summary>
                Marks the last row of the table headers.
            </summary>
            <returns>the number of the last row of the table headers</returns>
        </member>
        <member name="M:iTextSharp.text.Table.GetElement(System.Int32,System.Int32)">
            <summary>
                returns the element at the position row, column
                (Cast to Cell or Table)
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>an object</returns>
        </member>
        <member name="M:iTextSharp.text.Table.GetEnumerator">
            <summary>
                Gets an Iterator of all the Rows.
            </summary>
            <returns>an IEnumerator</returns>
        </member>
        <member name="M:iTextSharp.text.Table.GetWidths(System.Single,System.Single)">
            <summary>
                Gets an array with the positions of the borders between every column.
            </summary>
            <remarks>
                This method translates the widths expressed in percentages into the
                x-coordinate of the borders of the columns on a real document.
            </remarks>
            <param name="left">this is the position of the first border at the left (cellpadding not included)</param>
            <param name="totalWidth">
                this is the space between the first border at the left
                and the last border at the right (cellpadding not included)
            </param>
            <returns>an array with borderpositions</returns>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table)">
            <summary>
                To put a table within the existing table at the current position
                generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">the table you want to insert</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table,System.Int32,System.Int32)">
            <summary>
                To put a table within the existing table at the given position
                generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">The Table to add</param>
            <param name="row">The row where the Cell will be added</param>
            <param name="column">The column where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table,System.Drawing.Point)">
            <summary>
                To put a table within the existing table at the given position
                generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">the table you want to insert</param>
            <param name="p">a System.Drawing.Point</param>
        </member>
        <member name="M:iTextSharp.text.Table.SetAlignment(System.String)">
            <summary>
                Gets all the chunks in this element.
            </summary>
            <returns>an ArrayList</returns>
            <summary>
                public ArrayList Chunks {
            </summary>
            <summary>
                get {
            </summary>
            <summary>
                return new ArrayList();
            </summary>
            <summary>
                }
            </summary>
            <summary>
                }
            </summary>
            <summary>
                methods
            </summary>
            <summary>
                methods to set the membervariables
            </summary>
            <summary>
                Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Table.SetWidths(System.Int32[])">
            <summary>
                Sets the widths of the different columns (percentages).
            </summary>
            <remarks>
                You can give up relative values of borderwidths.
                The sum of these values will be considered 100%.
                The values will be recalculated as percentages of this sum.
            </remarks>
            <param name="widths">an array with values</param>
        </member>
        <member name="M:iTextSharp.text.Table.assumeTableDefaults(iTextSharp.text.Cell)">
            <summary>
                Sets the unset cell properties to be the table defaults.
            </summary>
            <param name="aCell">The cell to set to table defaults as necessary.</param>
        </member>
        <member name="M:iTextSharp.text.Table.fillEmptyMatrixCells">
            <summary>
                Integrates all added tables and recalculates column widths.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.isValidLocation(iTextSharp.text.Cell,System.Drawing.Point)">
            <summary>
                check if Cell 'fits' the table.
            </summary>
            <remarks>
                rowspan/colspan not beyond borders
                spanned cell don't overlap existing cells
            </remarks>
            <param name="aCell">the cell that has to be checked</param>
            <param name="aLocation">the location where the cell has to be placed</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Table.mergeInsertedTables">
            <summary>
                Integrates all added tables and recalculates column widths.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.placeCell(System.Collections.Generic.IList{iTextSharp.text.Row},iTextSharp.text.Cell,System.Drawing.Point)">
            <summary>
                Inserts a Cell in a cell-array and reserves cells defined by row-/colspan.
            </summary>
            <param name="someRows">some rows</param>
            <param name="aCell">the cell that has to be inserted</param>
            <param name="aPosition">the position where the cell has to be placed</param>
        </member>
        <member name="T:iTextSharp.text.Utilities">
            <summary>
                A collection of convenience methods that were present in many different iText
                classes.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Utilities.AddToArray(System.Object[][],System.Object[])">
            <summary>
                Utility method to extend an array.
            </summary>
            <param name="original">the original array or  null </param>
            <param name="item">the item to be added to the array</param>
            <returns>a new array with the item appended</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.CheckTrueOrFalse(System.util.Properties,System.String)">
            <summary>
                Checks for a true/false value of a key in a Properties object.
            </summary>
            <param name="attributes"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.GetKeySet(System.util.Properties)">
            <summary>
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.InchesToMillimeters(System.Single)">
            <summary>
                Measurement conversion from inches to millimeters.
                @since    2.1.2
            </summary>
            <param name="value">a value in inches</param>
            <returns>a value in millimeters</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.InchesToPoints(System.Single)">
            <summary>
                Measurement conversion from inches to points.
                @since    2.1.2
            </summary>
            <param name="value">a value in inches</param>
            <returns>a value in points</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.MillimetersToInches(System.Single)">
            <summary>
                Measurement conversion from millimeters to inches.
                @since    2.1.2
            </summary>
            <param name="value">a value in millimeters</param>
            <returns>a value in inches</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.MillimetersToPoints(System.Single)">
            <summary>
                Measurement conversion from millimeters to points.
                @since    2.1.2
            </summary>
            <param name="value">a value in millimeters</param>
            <returns>a value in points</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.PointsToInches(System.Single)">
            <summary>
                Measurement conversion from points to inches.
                @since    2.1.2
            </summary>
            <param name="value">a value in points</param>
            <returns>a value in inches</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.PointsToMillimeters(System.Single)">
            <summary>
                Measurement conversion from points to millimeters.
                @since    2.1.2
            </summary>
            <param name="value">a value in points</param>
            <returns>a value in millimeters</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.Skip(System.IO.Stream,System.Int32)">
            <summary>
                This method is an alternative for the Stream.Skip()-method
                that doesn't seem to work properly for big values of size.
            </summary>
            <param name="istr">the stream</param>
            <param name="size">the number of bytes to skip</param>
        </member>
        <member name="M:iTextSharp.text.Utilities.ToUrl(System.String)">
            <summary>
                This method makes a valid URL from a given filename.
            </summary>
            <remarks>
            </remarks>
            <param name="filename">a given filename</param>
            <returns>a valid URL</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.UnEscapeUrl(System.String)">
            <summary>
                Unescapes an URL. All the "%xx" are replaced by the 'xx' hex char value.
            </summary>
            <param name="src">the url to unescape</param>
            <returns>the eunescaped value</returns>
        </member>
        <member name="T:iTextSharp.text.xml.TextHandler">
            <summary>
                The  iTextHandler -class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler._bottomMargin">
            <summary>
                current margin of a page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler._leftMargin">
            <summary>
                current margin of a page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler._rightMargin">
            <summary>
                current margin of a page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler._topMargin">
            <summary>
                current margin of a page.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler.Chapters">
            <summary> Counts the number of chapters in this document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler.ControlOpenClose">
            <summary> This is a flag that can be set, if you want to open and close the Document-object yourself. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler.CurrentChunk">
            <summary> This is the current chunk to which characters can be added. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler.Document">
            <summary> This is the resulting document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler.Ignore">
            <summary> This is the current chunk to which characters can be added. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TextHandler.Stack">
            <summary> This is a  Stack  of objects, waiting to be added to the document. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.#ctor(iTextSharp.text.IDocListener)">
            <summary>
                Constructs a new iTextHandler that will translate all the events
                triggered by the parser to actions on the  Document -object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.#ctor(iTextSharp.text.IDocListener,iTextSharp.text.xml.TagMap)">
            <summary>
                @throws DocumentException
                @throws IOException
            </summary>
            <param name="document"></param>
            <param name="myTags"></param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.#ctor(iTextSharp.text.IDocListener,System.util.NullValueDictionary{System.String,iTextSharp.text.xml.XmlPeer})">
            <summary>
                @throws DocumentException
                @throws IOException
            </summary>
            <param name="document"></param>
            <param name="myTags"></param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.#ctor(iTextSharp.text.IDocListener,iTextSharp.text.xml.TagMap,iTextSharp.text.pdf.BaseFont)">
            <summary>
                @throws DocumentException
                @throws IOException
            </summary>
            <param name="document"></param>
            <param name="myTags"></param>
            <param name="bf"></param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.Characters(System.String,System.Int32,System.Int32)">
            <summary>
                This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.EndElement(System.String,System.String,System.String)">
            <summary>
                This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.HandleEndingTags(System.String)">
            <summary>
                This method deals with the starting tags.
            </summary>
            <param name="name">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.HandleStartingTags(System.String,System.util.Properties)">
            <summary>
                This method deals with the starting tags.
            </summary>
            <param name="name">the name of the tag</param>
            <param name="attributes">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
                This method gets called when ignorable white space encountered.
            </summary>
            <param name="ch">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.SetControlOpenClose(System.Boolean)">
            <summary>
                Sets the parameter that allows you to enable/disable the control over the Document.Open() and Document.Close()
                method.
            </summary>
            <remarks>
                If you set this parameter to true (= default), the parser will open the Document object when the start-root-tag is
                encountered
                and close it when the end-root-tag is met. If you set it to false, you have to open and close the Document object
                yourself.
            </remarks>
            <param name="controlOpenClose">set this to false if you plan to open/close the Document yourself</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.StartElement(System.String,System.String,System.String,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.IsDocumentRoot(System.String)">
            <summary>
                Checks if a certain tag corresponds with the roottag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns> true  if <VAR>tag</VAR> equals  itext ,  false  otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.isNewline(System.String)">
            <summary>
                Checks if a certain tag corresponds with the newpage-tag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns> true  or  false </returns>
        </member>
        <member name="M:iTextSharp.text.xml.TextHandler.isNewpage(System.String)">
            <summary>
                Checks if a certain tag corresponds with the newpage-tag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns> true  or  false </returns>
        </member>
        <member name="T:iTextSharp.text.xml.TextmyHandler">
            <summary>
                The  iTextmyHandler -class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TextmyHandler.#ctor(iTextSharp.text.IDocListener,iTextSharp.text.xml.TagMap)">
            <summary>
                Constructs a new iTextHandler that will translate all the events
                triggered by the parser to actions on the  Document -object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
            <param name="myTags">a map of tags</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextmyHandler.StartElement(System.String,System.String,System.String,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.TextmyHandler.EndElement(System.String,System.String,System.String)">
            <summary>
                This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="T:iTextSharp.text.xml.ParserBase">
            <summary>
                The  ParserBase -class provides XML document parsing.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.Characters(System.String,System.Int32,System.Int32)">
            <summary>
                This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.EndElement(System.String,System.String,System.String)">
            <summary>
                This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.Parse(System.String)">
            <summary>
                Begins the process of processing an XML document
            </summary>
            <param name="url">the XML document to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.StartElement(System.String,System.String,System.String,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.EntitiesToSymbol">
            <summary>
                This class contains entities that can be used in an entity tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.EntitiesToSymbol._map">
            <summary>
                This is a map that contains all possible id values of the entity tag
                that can be translated to a character in font Symbol.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToSymbol.Get(System.String,iTextSharp.text.Font)">
            <summary>
                Gets a chunk with a symbol character.
            </summary>
            <param name="e">a symbol value (see Entities class: alfa is greek alfa,...)</param>
            <param name="font">the font if the symbol isn't found (otherwise Font.SYMBOL)</param>
            <returns>a Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToSymbol.GetCorrespondingSymbol(System.String)">
            <summary>
                Looks for the corresponding symbol in the font Symbol.
            </summary>
            <param name="name">the name of the entity</param>
            <returns>the corresponding character in font Symbol</returns>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.EntitiesToUnicode">
            <summary>
                This class contains entities that can be used in an entity tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.EntitiesToUnicode.Map">
            <summary>
                This is a map that contains the names of entities and their unicode value.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToUnicode.DecodeEntity(System.String)">
            <summary>
                Translates an entity to a unicode character.
            </summary>
            <param name="name">the name of the entity</param>
            <returns>the corresponding unicode character</returns>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToUnicode.DecodeString(System.String)">
            <summary>
                Translates a String with entities to a String without entities,
                replacing the entity with the right (unicode) character.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.IanaEncodings">
            <summary>
                Translates a IANA encoding name to a Java encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.IanaEncodings._map">
            <summary>
                The object that maps IANA to Java encodings.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler">
            <summary>
                The handler for the events fired by  SimpleXMLParser .
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler.StartElement(System.String,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                Called when a start tag is found.
            </summary>
            <param name="tag">the tag name</param>
            <param name="h">the tag's attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler.EndElement(System.String)">
            <summary>
                Called when an end tag is found.
            </summary>
            <param name="tag">the tag name</param>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler.StartDocument">
            <summary>
                Called when the document starts to be parsed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler.EndDocument">
            <summary>
                Called after the document is parsed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler.Text(System.String)">
            <summary>
                Called when a text element is found.
            </summary>
            <param name="str">the text element, probably a fragment.</param>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandlerComment">
            <summary>
                The handler for the events fired by  SimpleXMLParser .
                @author Paulo Soares (psoares@consiste.pt)
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandlerComment.Comment(System.String)">
            <summary>
                Called when a comment is found.
            </summary>
            <param name="text">the comment text</param>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.SimpleXmlParser">
            <summary>
                A simple XML and HTML parser.  This parser is, like the SAX parser,
                an event based parser, but with much less functionality.
                The parser can:
                It recognizes the encoding used
                It recognizes all the elements' start tags and end tags
                It lists attributes, where attribute values can be enclosed in single or double quotes
                It recognizes the  &lt;[CDATA[ ... ]]&gt;  construct
                It recognizes the standard entities: &amp;amp;, &amp;lt;, &amp;gt;, &amp;quot;, and &amp;apos;, as well as numeric
                entities
                It maps lines ending in  \r\n  and  \r  to  \n  on input, in accordance with the XML Specification, Section 2.11
                The code is based on http://www.javaworld.com/javaworld/javatips/javatip128/ with some extra
                code from XERCES to recognize the encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Unknown">
            <summary>
                possible states
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Attributekey">
            <summary>
                the attribute key.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Attributes">
            <summary>
                current attributes
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Attributevalue">
            <summary>
                the attribute value.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Character">
            <summary>
                The current character.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Columns">
            <summary>
                the column where the current character occurs
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.comment">
            <summary>
                The handler to which we are going to forward comments.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Doc">
            <summary>
                The handler to which we are going to forward document content
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.entity">
            <summary>
                current entity
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Eol">
            <summary>
                was the last character equivalent to a newline?
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Html">
            <summary>
                Are we parsing HTML?
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Lines">
            <summary>
                the line we are currently reading
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Nested">
            <summary>
                Keeps track of the number of tags that are open.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Nowhite">
            <summary>
                A boolean indicating if the next character should be taken into account
                if it's a space character. When nospace is false, the previous character
                wasn't whitespace.
                @since 2.1.5
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.PreviousCharacter">
            <summary>
                The previous character.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.QuoteCharacter">
            <summary>
                the quote character that was used to open the quote.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Stack">
            <summary>
                the state stack
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.State">
            <summary>
                the current state
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Tag">
            <summary>
                current tagname
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXmlParser.text">
            <summary>
                current text (whatever is encountered between tags)
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.#ctor(iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler,iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandlerComment,System.Boolean)">
            <summary>
                Creates a Simple XML parser object.
                Call Go(BufferedReader) immediately after creation.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.EscapeXml(System.String,System.Boolean)">
            <summary>
                Escapes a string with the appropriated XML codes.
            </summary>
            <param name="s">the string to be escaped</param>
            <param name="onlyAscii">codes above 127 will always be escaped with &amp;#nn; if  true </param>
            <returns>the escaped string</returns>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Parse(iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler,iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandlerComment,System.IO.TextReader,System.Boolean)">
            <summary>
                Parses the XML document firing the events to the handler.
                @throws IOException on error
            </summary>
            <param name="doc">the document handler</param>
            <param name="comment"></param>
            <param name="r">the document. The encoding is already resolved. The reader is not closed</param>
            <param name="html"></param>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.Parse(iTextSharp.text.xml.simpleparser.ISimpleXmlDocHandler,System.IO.Stream)">
            <summary>
                Parses the XML document firing the events to the handler.
                @throws IOException on error
            </summary>
            <param name="doc">the document handler</param>
            <param name="inp">the document. The encoding is deduced from the stream. The stream is not closed</param>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.getEncodingName(System.Byte[])">
            <summary>
                Returns the IANA encoding name that is auto-detected from
                the bytes specified, with the endian-ness of that encoding where appropriate.
                (method found in org.apache.xerces.impl.XMLEntityManager, originaly published
                by the Apache Software Foundation under the Apache Software License; now being
                used in iText under the MPL)
            </summary>
            <param name="b4">The first four bytes of the input.</param>
            <returns>an IANA-encoding string</returns>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.doTag">
            <summary>
                Sets the name of the tag.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.flush">
            <summary>
                Flushes the text that is currently in the buffer.
                The text can be ignored, added to the document
                as content or as comment,... depending on the current state.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.go(System.IO.TextReader)">
            <summary>
                Does the actual parsing. Perform this immediately
                after creating the parser object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.initTag">
            <summary>
                Initialized the tag name and attributes.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.processTag(System.Boolean)">
            <summary>
                processes the tag.
            </summary>
            <param name="start">if true we are dealing with a tag that has just been opened; if false we are closing a tag.</param>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.restoreState">
            <summary>
                Gets a state from the stack
            </summary>
            <returns>the previous state</returns>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.saveState(System.Int32)">
            <summary>
                Adds a state to the stack.
            </summary>
            <param name="s">a state to add to the stack</param>
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXmlParser.throwException(System.String)">
            <summary>
                Throws an exception
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.TagMap">
            <summary>
                The  TagMap -class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.#ctor(System.String)">
            <summary>
                Constructs a Tagmap object
            </summary>
            <param name="tagfile">the file of tags to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.#ctor(System.Xml.XmlDocument)">
            <summary>
                Constructs a Tagmap object
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.Init(System.Xml.XmlDocument)">
            <summary>
                Parses the xml document
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.Init(System.String)">
            <summary>
                Parses the xml document
            </summary>
            <param name="tagfile"></param>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.ALIAS">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.ATTRIBUTE">
            <summary> This is a tag </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.CONTENT">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.NAME">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.TAG">
            <summary> This is a tag </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.VALUE">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler._tagMap">
            <summary> This is the tagmap using the AttributeHandler </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler._currentPeer">
            <summary> This is the current peer. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.#ctor(System.util.INullValueDictionary{System.String,iTextSharp.text.xml.XmlPeer})">
            <summary>
                Constructs a new SAXiTextHandler that will translate all the events
                triggered by the parser to actions on the  Document -object.
            </summary>
            <param name="tagMap">A Hashtable containing XmlPeer-objects</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.Characters(System.String,System.Int32,System.Int32)">
            <summary>
                This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.EndElement(System.String,System.String,System.String)">
            <summary>
                This method gets called when an end tag is encountered.
            </summary>
            <param name="tag">the name of the tag that ends</param>
            <param name="lname"></param>
            <param name="name"></param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
                This method gets called when ignorable white space encountered.
            </summary>
            <param name="ch">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.StartElement(System.String,System.String,System.String,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                This method gets called when a start tag is encountered.
            </summary>
            <param name="tag">the name of the tag that is encountered</param>
            <param name="lname"></param>
            <param name="n"></param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="T:iTextSharp.text.xml.XmlParser">
            <summary>
                This class can be used to parse an XML file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlParser.Parser">
            <summary> This is the instance of the parser. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="xDoc"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlReader)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlReader,System.String)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlReader,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlReader)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
                Parses a given file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlReader,System.String)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlReader,iTextSharp.text.xml.TagMap)">
            <summary>
                Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="T:iTextSharp.text.xml.XmlPeer">
            <summary>
                This interface is implemented by the peer of all the iText objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.AttributeAliases">
            <summary> This is the Map that contains the aliases of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.AttributeValues">
            <summary> This is the Map that contains the default values of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.CustomTagname">
            <summary> This is the name of the alias. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.DefaultContent">
            <summary> This is String that contains the default content of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.Tagname">
            <summary> This is the name of the alias. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.#ctor(System.String,System.String)">
            <summary>
                Creates a XmlPeer.
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Alias">
            <summary>
                Gets the alias of the peer.
            </summary>
            <value>the alias of the peer</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Content">
            <summary>
                Sets the default content.
            </summary>
            <value>the default content</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.DefaultValues">
            <summary>
                Returns the default values.
            </summary>
            <value>the default values</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Tag">
            <summary>
                Gets the tagname of the peer.
            </summary>
            <value>the tagname of the peer</value>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.AddAlias(System.String,System.String)">
            <summary>
                Sets an alias for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="alias">the custom tagname</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.AddValue(System.String,System.String)">
            <summary>
                Sets a value for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="value">the default value for this tag</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.GetAttributes(System.util.INullValueDictionary{System.String,System.String})">
            <summary> Gets the list of attributes of the peer. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.GetName(System.String)">
            <summary>
                Returns the iText attribute name.
            </summary>
            <param name="name">the custom attribute name</param>
            <returns>the iText attribute name</returns>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.DublinCoreSchema">
            <summary>
                An implementation of an XmpSchema.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.CONTRIBUTOR">
            <summary>
                External Contributors to the resource (other than the authors).
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.COVERAGE">
            <summary>
                The extent or scope of the resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.CREATOR">
            <summary>
                The authors of the resource (listed in order of precedence, if significant).
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DATE">
            <summary>
                Date(s) that something interesting happened to the resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DEFAULT_XPATH_ID">
            <summary>
                default namespace identifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DEFAULT_XPATH_URI">
            <summary>
                default namespace uri
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DESCRIPTION">
            <summary>
                A textual description of the content of the resource. Multiple values may be present for different languages.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.FORMAT">
            <summary>
                The file format used when saving the resource. Tools and applications should set this property to the save format
                of the data. It may include appropriate qualifiers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.IDENTIFIER">
            <summary>
                Unique identifier of the resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.LANGUAGE">
            <summary>
                An unordered array specifying the languages used in the resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.PUBLISHER">
            <summary>
                Publishers.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.RELATION">
            <summary>
                Relationships to other documents.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.RIGHTS">
            <summary>
                Informal rights statement, selected by language.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.SOURCE">
            <summary>
                Unique identifier of the work from which this resource was derived.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.SUBJECT">
            <summary>
                An unordered array of descriptive phrases or keywords that specify the topic of the content of the resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.TITLE">
            <summary>
                The title of the document, or the name given to the resource. Typically, it will be a name by which the resource is
                formally known.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.TYPE">
            <summary>
                A document type; for example, novel, poem, or working paper.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.#ctor">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddAuthor(System.String)">
            <summary>
                Adds a single author.
            </summary>
            <param name="author"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddAuthor(System.String[])">
            <summary>
                Adds an array of authors.
            </summary>
            <param name="author"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddDescription(System.String)">
            <summary>
                Adds a description.
            </summary>
            <param name="desc"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddPublisher(System.String)">
            <summary>
                Adds a single publisher.
            </summary>
            <param name="publisher"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddPublisher(System.String[])">
            <summary>
                Adds an array of publishers.
            </summary>
            <param name="publisher"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.addSubject(System.String[])">
            <summary>
                Adds a subject.
            </summary>
            <param name="subject">array of subjects</param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddSubject(System.String)">
            <summary>
                Adds a subject.
            </summary>
            <param name="subject"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddTitle(System.String)">
            <summary>
                Adds a title.
            </summary>
            <param name="title"></param>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.EncodingNoPreamble">
            <summary>
                A wrapper for an Encoding to suppress the preamble.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.LangAlt.DEFAULT">
            <summary>
                Key for the default language.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.#ctor(System.String)">
            <summary>
                Creates a Properties object that stores languages for use in an XmpSchema
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.#ctor">
            <summary>
                Creates a Properties object that stores languages for use in an XmpSchema
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.AddLanguage(System.String,System.String)">
            <summary>
                Add a language.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.ToString">
            <summary>
                Creates a String that can be used in an XmpSchema.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.Process(System.Text.StringBuilder,System.String)">
            <summary>
                Process a property.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.PdfA1Schema">
            <summary>
                An implementation of an XmpSchema.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.CONFORMANCE">
            <summary>
                Conformance, A or B.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.DEFAULT_XPATH_ID">
            <summary>
                default namespace identifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.DEFAULT_XPATH_URI">
            <summary>
                default namespace uri
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.PART">
            <summary>
                Part, always 1.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfA1Schema.#ctor">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfA1Schema.AddConformance(System.String)">
            <summary>
                Adds the conformance.
            </summary>
            <param name="conformance"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfA1Schema.AddPart(System.String)">
            <summary>
                Adds part.
            </summary>
            <param name="part"></param>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.PdfSchema">
            <summary>
                An implementation of an XmpSchema.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.DEFAULT_XPATH_ID">
            <summary>
                default namespace identifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.DEFAULT_XPATH_URI">
            <summary>
                default namespace uri
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.KEYWORDS">
            <summary>
                Keywords.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.PRODUCER">
            <summary>
                The Producer.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.VERSION">
            <summary>
                The PDF file version (for example: 1.0, 1.3, and so on).
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.#ctor">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.AddKeywords(System.String)">
            <summary>
                Adds keywords.
            </summary>
            <param name="keywords"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.AddProducer(System.String)">
            <summary>
                Adds the producer.
            </summary>
            <param name="producer"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.AddVersion(System.String)">
            <summary>
                Adds the version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpArray">
            <summary>
                StringBuilder to construct an XMP array.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.ALTERNATIVE">
            <summary>
                An array with alternatives.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.ORDERED">
            <summary>
                An array that is ordered.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.UNORDERED">
            <summary>
                An array that is unordered.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.Type">
            <summary>
                the type of array.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpArray.#ctor(System.String)">
            <summary>
                Creates an XmpArray.
            </summary>
            <param name="type">the type of array: UNORDERED, ORDERED or ALTERNATIVE.</param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpArray.ToString">
            <summary>
                Returns the String representation of the XmpArray.
            </summary>
            <returns>a String representation</returns>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpBasicSchema">
            <summary>
                An implementation of an XmpSchema.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.ADVISORY">
            <summary>
                An unordered array specifying properties that were edited outside the authoring application. Each item should
                contain a single namespace and XPath separated by one ASCII space (U+0020).
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.BASEURL">
            <summary>
                The base URL for relative URLs in the document content. If this document contains Internet links, and those links
                are relative, they are relative to this base URL. This property provides a standard way for embedded relative URLs
                to be interpreted by tools. Web authoring tools should set the value based on their notion of where URLs will be
                interpreted.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.CREATEDATE">
            <summary>
                The date and time the resource was originally created.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.CREATORTOOL">
            <summary>
                The name of the first known tool used to create the resource. If history is present in the metadata, this value
                should be equivalent to that of xmpMM:History�s softwareAgent property.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.DEFAULT_XPATH_ID">
            <summary>
                default namespace identifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.DEFAULT_XPATH_URI">
            <summary>
                default namespace uri
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.IDENTIFIER">
            <summary>
                An unordered array of text strings that unambiguously identify the resource within a given context.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.METADATADATE">
            <summary>
                The date and time that any metadata for this resource was last changed.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.MODIFYDATE">
            <summary>
                The date and time the resource was last modified.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.NICKNAME">
            <summary>
                A short informal name for the resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.THUMBNAILS">
            <summary>
                An alternative array of thumbnail images for a file, which can differ in characteristics such as size or image
                encoding.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.#ctor">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddCreateDate(System.String)">
            <summary>
                Adds the creation date.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddCreatorTool(System.String)">
            <summary>
                Adds the creatortool.
            </summary>
            <param name="creator"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddIdentifiers(System.String[])">
            <summary>
                Adds the identifier.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddMetaDataDate(System.String)">
            <summary>
                Adds the meta data date.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddModDate(System.String)">
            <summary>
                Adds the modification date.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddNickname(System.String)">
            <summary>
                Adds the nickname.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpMmSchema">
            <summary>
                An implementation of an XmpSchema.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.DEFAULT_XPATH_ID">
            <summary>
                default namespace identifier
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.DEFAULT_XPATH_URI">
            <summary>
                default namespace uri
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.DERIVEDFROM">
            <summary>
                A reference to the original document from which this one is derived. It is a minimal reference; missing components
                can be assumed to be unchanged. For example, a new version might only need to specify the instance ID and version
                number of the previous version, or a rendition might only need to specify the instance ID and rendition class of
                the original.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.DOCUMENTID">
            <summary>
                The common identifier for all versions and renditions of a document.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.HISTORY">
            <summary>
                An ordered array of high-level user actions that resulted in this resource. It is intended to give human readers a
                general indication of the steps taken to make the changes from the previous version to this one. The list should be
                at an abstract level; it is not intended to be an exhaustive keystroke or other detailed history.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.MANAGEDFROM">
            <summary>
                A reference to the document as it was prior to becoming managed. It is set when a managed document is introduced to
                an asset management system that does not currently own it. It may or may not include references to different
                management systems.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.MANAGER">
            <summary>
                The name of the asset management system that manages this resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.MANAGERVARIANT">
            <summary>
                Specifies a particular variant of the asset management system. The format of this property is private to the
                specific asset management system.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.MANAGETO">
            <summary>
                A URI identifying the managed resource to the asset management system; the presence of this property is the formal
                indication that this resource is managed. The form and content of this URI is private to the asset management
                system.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.MANAGEUI">
            <summary>
                A URI that can be used to access information about the managed resource through a web browser. It might require a
                custom browser plugin.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.RENDITIONCLASS">
            <summary>
                The rendition class name for this resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.RENDITIONPARAMS">
            <summary>
                Can be used to provide additional rendition parameters that are too complex or verbose to encode in xmpMM:
                RenditionClass.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.VERSIONID">
            <summary>
                The document version identifier for this resource.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMmSchema.VERSIONS">
            <summary>
                The version history associated with this resource.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpMmSchema.#ctor">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpReader">
            <summary>
                Reads an XMP stream into an org.w3c.dom.Document objects.
                Allows you to replace the contents of a specific tag.
                @since 2.1.3
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.#ctor(System.Byte[])">
            <summary>
                Constructs an XMP reader
                @throws ExceptionConverter
                @throws IOException
                @throws SAXException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.Add(System.String,System.String,System.String,System.String)">
            <summary>
                Adds a tag.
                @since	2.1.6
            </summary>
            <returns>if the content was successfully added</returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.Replace(System.String,System.String,System.String)">
            <summary>
                Replaces the content of a tag.
                @since	2.1.6 the return type has changed from void to boolean
            </summary>
            <returns>if the content was successfully replaced</returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.SerializeDoc">
            <summary>
                Writes the document to a byte array.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.SetNodeText(System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
            <summary>
                Sets the text of this node. All the child's node are deleted and a new
                child text node is created.
            </summary>
            <param name="domDocument">the  Document  that contains the node</param>
            <param name="n">the  Node  to add the text to</param>
            <param name="value">the text to add</param>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpSchema">
            <summary>
                Abstract superclass of the XmpSchemas supported by iText.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpSchema.xmlns">
            <summary>
                the namesspace
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.#ctor(System.String)">
            <summary>
                Constructs an XMP schema.
            </summary>
            <param name="xmlns"></param>
        </member>
        <member name="P:iTextSharp.text.xml.xmp.XmpSchema.Xmlns">
            <summary>
            </summary>
            <returns>Returns the xmlns.</returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.Escape(System.String)">
            <summary>
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.AddProperty(System.String,System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the previous property (null if there wasn't one)</returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.SetProperty(System.String,iTextSharp.text.xml.xmp.LangAlt)">
            <summary>
                @see java.util.Properties#setProperty(java.lang.String, java.lang.String)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the previous property (null if there wasn't one)</returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.ToString">
            <summary>
                The String representation of the contents.
            </summary>
            <returns>a String representation.</returns>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.Process(System.Text.StringBuilder,System.Object)">
            <summary>
                Processes a property
            </summary>
            <param name="buf"></param>
            <param name="p"></param>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpWriter">
            <summary>
                With this class you can create an Xmp Stream that can be used for adding
                Metadata to a PDF Dictionary. Remark that this class doesn't cover the
                complete XMP specification.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.EXTRASPACE">
            <summary>
                String used to fill the extra space.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF16">
            <summary>
                A possible charset for the XMP.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF16BE">
            <summary>
                A possible charset for the XMP.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF16LE">
            <summary>
                A possible charset for the XMP.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF8">
            <summary>
                A possible charset for the XMP.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.XPACKET_PI_BEGIN">
            <summary>
                Processing Instruction required at the start of an XMP stream
                @since iText 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.XPACKET_PI_END_R">
            <summary>
                Processing Instruction required at the end of an XMP stream for XMP streams that are read only
                @since iText 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.XPACKET_PI_END_W">
            <summary>
                Processing Instruction required at the end of an XMP stream for XMP streams that can be updated
                @since iText 2.1.6
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.about">
            <summary>
                The about string that goes into the rdf:Description tags.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.End">
            <summary>
                The end attribute.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.ExtraSpace">
            <summary>
                You can add some extra space in the XMP packet; 1 unit in this variable represents 100 spaces and a newline.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.Writer">
            <summary>
                The writer to which you can write bytes for the XMP stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream,System.String,System.Int32)">
            <summary>
                Creates an XmpWriter.
                @throws IOException
            </summary>
            <param name="os"></param>
            <param name="utfEncoding"></param>
            <param name="extraSpace"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream)">
            <summary>
                Creates an XmpWriter.
                @throws IOException
            </summary>
            <param name="os"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfDictionary,System.Int32)">
            <summary>
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream,System.util.INullValueDictionary{System.String,System.String})">
            <summary>
                @throws IOException
            </summary>
            <param name="os"></param>
            <param name="info"></param>
        </member>
        <member name="P:iTextSharp.text.xml.xmp.XmpWriter.About">
            <summary>
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.AddRdfDescription(System.String,System.String)">
            <summary>
                Adds an rdf:Description.
                @throws IOException
            </summary>
            <param name="xmlns"></param>
            <param name="content"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.AddRdfDescription(iTextSharp.text.xml.xmp.XmpSchema)">
            <summary>
                Adds an rdf:Description.
                @throws IOException
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.Close">
            <summary>
                Flushes and closes the XmpWriter.
                @throws IOException
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.SetReadOnly">
            <summary>
                Sets the XMP to read-only
            </summary>
        </member>
        <member name="T:iTextSharp.text.ZapfDingbatsList">
            <summary>
                A special-version of  LIST  whitch use zapfdingbats-letters.
                @see com.lowagie.text.List
                @author Michael Niedermair and Bruno Lowagie
            </summary>
        </member>
        <member name="F:iTextSharp.text.ZapfDingbatsList.Zn">
            <summary>
                char-number in zapfdingbats
            </summary>
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.#ctor(System.Int32)">
            <summary>
                Creates a ZapfDingbatsList
            </summary>
            <param name="zn">a char-number</param>
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a ZapfDingbatsList
            </summary>
            <param name="zn">a char-number</param>
            <param name="symbolIndent">indent</param>
        </member>
        <member name="P:iTextSharp.text.ZapfDingbatsList.CharNumber">
            <summary>
                set the char-number
            </summary>
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an  Object  to the  List .
            </summary>
            <param name="o">the object to add.</param>
            <returns>true if adding the object succeeded</returns>
        </member>
        <member name="T:iTextSharp.text.ZapfDingbatsNumberList">
            <summary>
                A special-version of  LIST  whitch use zapfdingbats-numbers (1..10).
                @see com.lowagie.text.List
                @version 2003-06-22
                @author Michael Niedermair
            </summary>
        </member>
        <member name="F:iTextSharp.text.ZapfDingbatsNumberList.type">
            <summary>
                which type
            </summary>
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.#ctor(System.Int32)">
            <summary>
                Creates a ZapdDingbatsNumberList
            </summary>
            <param name="type">the type of list</param>
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a ZapdDingbatsNumberList
            </summary>
            <param name="type">the type of list</param>
            <param name="symbolIndent">indent</param>
        </member>
        <member name="P:iTextSharp.text.ZapfDingbatsNumberList.NumberType">
            <summary>
                get the type
            </summary>
            <returns>char-number</returns>
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.Add(iTextSharp.text.IElement)">
            <summary>
                Adds an  Object  to the  List .
            </summary>
            <param name="o">the object to add.</param>
            <returns>true if adding the object succeeded</returns>
        </member>
        <member name="T:iTextSharp.LGPLv2.Core.System.Encodings.EncodingsRegistry">
            <summary>
            </summary>
        </member>
        <member name="F:iTextSharp.LGPLv2.Core.System.Encodings.EncodingsRegistry._instance">
            <summary>
                It's a lazy loaded thread-safe singleton.
            </summary>
        </member>
        <member name="P:iTextSharp.LGPLv2.Core.System.Encodings.EncodingsRegistry.Instance">
            <summary>
            </summary>
            <exception cref="T:System.MemberAccessException">
                The <see cref="T:System.Lazy`1" /> instance is initialized to use the default
                constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.
            </exception>
            <exception cref="T:System.MissingMemberException">
                The <see cref="T:System.Lazy`1" /> instance is initialized to use the default
                constructor of the type that is being lazily initialized, and that type does not have a public, parameterless
                constructor.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The initialization function tries to access
                <see cref="P:System.Lazy`1.Value" /> on this instance.
            </exception>
        </member>
        <member name="M:iTextSharp.LGPLv2.Core.System.Encodings.EncodingsRegistry.GetEncoding(System.Int32)">
            <summary>
                Returns the encoding associated with the specified code page identifier.
            </summary>
            <param name="codepage">
                The code page identifier of the preferred encoding. Possible values are listed in the Code Page
                column of the table that appears in the System.Text.Encoding class topic.-or- 0 (zero), to use the default
                encoding.
            </param>
        </member>
        <member name="M:iTextSharp.LGPLv2.Core.System.Encodings.EncodingsRegistry.GetEncoding(System.String)">
            <summary>
                Returns the encoding associated with the specified code page name.
            </summary>
            <param name="name">
                The code page name of the preferred encoding. Any value returned by the System.Text.Encoding.WebName
                property is valid. Possible values are listed in the Name column of the table that appears in the
                System.Text.Encoding class topic.
            </param>
        </member>
        <member name="T:iTextSharp.MD5BouncyCastle">
            <summary>
                RFC1321: The MD5 Message-Digest Algorithm
                https://datatracker.ietf.org/doc/html/rfc1321
            </summary>
        </member>
        <member name="T:System.Drawing.Dimension">
            <summary>
                The  Dimension  class encapsulates the width and
                height of a component (in int precision) in a single object.
            </summary>
            <remarks>
                The class is
                associated with certain properties of components. Several methods
                defined by the  Component  class and the
                LayoutManager  interface return a  Dimension  object.
                Normally the values of  width
                and  height  are non-negative ints.
                The constructors that allow you to create a dimension do
                not prevent you from setting a negative value for these properties.
                If the value of  width  or  height  is
                negative, the behavior of some methods defined by other objects is
                undefined.
            </remarks>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor">
            <summary>
                Creates an instance of  Dimension  with a width
                of zero and a height of zero.
            </summary>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor(System.Drawing.Dimension)">
            <summary>
                Creates an instance of  Dimension  whose width
                and height are the same as for the specified dimension.
            </summary>
            <param name="d">
                the specified dimension for the
                width  and
                height  values.
            </param>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructs a Dimension and initializes it to the specified width and
                specified height.
            </summary>
            <param name="width">the specified width dimension</param>
            <param name="height">the specified height dimension</param>
        </member>
        <member name="P:System.Drawing.Dimension.height">
            <summary>
                The height dimension. Negative values can be used.
            </summary>
        </member>
        <member name="P:System.Drawing.Dimension.width">
            <summary>
                The width dimension. Negative values can be used.
            </summary>
        </member>
        <member name="P:System.Drawing.Dimension.Height">
            <summary>
                Returns the height of this dimension in double precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:System.Drawing.Dimension.Size">
            <summary>
                Get/set the size of this  Dimension  object.
            </summary>
            <value>the size</value>
        </member>
        <member name="P:System.Drawing.Dimension.Width">
            <summary>
                Returns the width of this dimension in double precision.
            </summary>
            <value>the width</value>
        </member>
        <member name="M:System.Drawing.Dimension.Equals(System.Object)">
            <summary>
                Checks whether two dimension objects have equal values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.Dimension.GetHashCode">
            <summary>
                Returns the hash code for this Dimension.
            </summary>
            <returns>a hash code</returns>
        </member>
        <member name="M:System.Drawing.Dimension.SetSize(System.Double,System.Double)">
            <summary>
                Set the size of this Dimension object to the specified width
                and height in double precision.
            </summary>
            <param name="width">the new width for the Dimension object</param>
            <param name="height">the new height for the Dimension object</param>
        </member>
        <member name="M:System.Drawing.Dimension.SetSize(System.Int32,System.Int32)">
            <summary>
                Set the size of this  Dimension  object
                to the specified width and height.
            </summary>
            <param name="width">the new width for this  Dimension  object.</param>
            <param name="height">the new height for this  Dimension  object.</param>
        </member>
        <member name="M:System.Drawing.Dimension.ToString">
            <summary>
                Returns a string representation of the values of this
                Dimension  object's  height  and
                width  fields.
            </summary>
            <remarks>
                This method is intended to be used only
                for debugging purposes, and the content and format of the returned
                string may vary between implementations. The returned string may be
                empty but may not be  null .
            </remarks>
            <returns>
                a string representation of this  Dimension
                object.
            </returns>
        </member>
        <member name="T:System.Drawing.Dimension2D">
            <summary>
                The  Dimension2D  class is to encapsulate a width
                and a height dimension.
            </summary>
            <remarks>
                This class is only the abstract baseclass for all objects that
                store a 2D dimension.
                The actual storage representation of the sizes is left to
                the subclass.
            </remarks>
        </member>
        <member name="P:System.Drawing.Dimension2D.Height">
            <summary>
                Returns the height of this  Dimension  in double
                precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:System.Drawing.Dimension2D.Size">
            <summary>
                Sets the size of this  Dimension2D  object to
                match the specified size.
            </summary>
            <value>the size</value>
        </member>
        <member name="P:System.Drawing.Dimension2D.Width">
            <summary>
                Returns the width of this  Dimension  in double
                precision.
            </summary>
            <value>the width</value>
        </member>
        <member name="M:System.Drawing.Dimension2D.Clone">
            <summary>
                Creates a new object of the same class as this object.
            </summary>
            <returns>a clone of this instance</returns>
        </member>
        <member name="M:System.Drawing.Dimension2D.SetSize(System.Double,System.Double)">
            <summary>
                Sets the size of this  Dimension  object to the
                specified width and height.
            </summary>
            <param name="width">
                the new width for the  Dimension
                object
            </param>
            <param name="height">
                the new height for the  Dimension
                object
            </param>
        </member>
        <member name="T:System.util.INullValueDictionary`2">
            <summary>
                This custom IDictionary doesn't throw a KeyNotFoundException while accessing its value by a given key
            </summary>
        </member>
        <member name="T:System.util.NullValueDictionary`2">
            <summary>
                This custom IDictionary doesn't throw a KeyNotFoundException while accessing its value by a given key
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTree.Keys">
            <summary>
                Keys
                if(ascending is true, the keys will be returned in ascending order, else
                the keys will be returned in descending order.
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTree.Values">
            <summary>
                Values
                Provided for .NET compatibility.
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.Add(System.IComparable,System.Object)">
            <summary>
                Add
                args: ByVal key As IComparable, ByVal data As Object
                key is object that implements IComparable interface
                performance tip: change to use int type (such as the hashcode)
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RestoreAfterInsert(System.util.collections.OrderedTreeNode)">
            <summary>
                RestoreAfterInsert
                Additions to red-black trees usually destroy the red-black
                properties. Examine the tree and restore. Rotations are normally
                required to restore it
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RotateLeft(System.util.collections.OrderedTreeNode)">
            <summary>
                RotateLeft
                Rebalance the tree by rotating the nodes to the left
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RotateRight(System.util.collections.OrderedTreeNode)">
            <summary>
                RotateRight
                Rebalance the tree by rotating the nodes to the right
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.GetData(System.IComparable)">
            <summary>
                GetData
                Gets the data object associated with the specified key
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.GetMinKey">
            <summary>
                GetMinKey
                Returns the minimum key value
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.GetMaxKey">
            <summary>
                GetMaxKey
                Returns the maximum key value
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.GetMinValue">
            <summary>
                GetMinValue
                Returns the object having the minimum key value
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.GetMaxValue">
            <summary>
                GetMaxValue
                Returns the object having the maximum key
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.GetEnumerator">
            <summary>
                GetEnumerator
                return an enumerator that returns the tree nodes in order
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.Elements">
            <summary>
                Elements
                Returns an enumeration of the data objects.
                if(ascending is true, the objects will be returned in ascending order,
                else the objects will be returned in descending order.
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.IsEmpty">
            <summary>
                IsEmpty
                Is the tree empty?
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.Remove(System.IComparable)">
            <summary>
                Remove
                removes the key and data object (delete)
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.Delete(System.util.collections.OrderedTreeNode)">
            <summary>
                Delete
                Delete a node from the tree and restore red black properties
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RestoreAfterDelete(System.util.collections.OrderedTreeNode)">
            <summary>
                RestoreAfterDelete
                Deletions from red-black trees may destroy the red-black
                properties. Examine the tree and restore. Rotations are normally
                required to restore it
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RemoveMin">
            <summary>
                RemoveMin
                removes the node with the minimum key
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RemoveMax">
            <summary>
                RemoveMax
                removes the node with the maximum key
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.Clear">
            <summary>
                Clear
                Empties or clears the tree
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.#ctor(System.util.collections.OrderedTreeNode,System.Boolean,System.Boolean,System.util.collections.OrderedTreeNode)">
            <summary>
                Determine order, walk the tree and push the nodes onto the stack
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeEnumerator.Key">
            <summary>
                Key
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeEnumerator.Value">
            <summary>
                Data
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.MoveNext">
            <summary>
                MoveNext
                For .NET compatibility
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.HasMoreElements">
            <summary>
                HasMoreElements
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.NextElement">
            <summary>
                NextElement
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Key">
            <summary>
                Key
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Data">
            <summary>
                Data
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Color">
            <summary>
                Color
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Left">
            <summary>
                Left
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Right">
            <summary>
                Right
            </summary>
        </member>
        <member name="T:System.util.ListIterator`1">
            <summary>
                Summary description for ListIterator.
            </summary>
        </member>
        <member name="T:System.util.Properties">
            <summary>
                Summary description for Properties.
            </summary>
        </member>
        <member name="M:System.util.Properties.loadConvert(System.String)">
            <summary>
                Converts encoded &#92;uxxxx to unicode chars
                and changes special saved chars to their original forms
            </summary>
        </member>
        <member name="T:System.util.StringTokenizer">
            <summary>
                a replacement for the StringTokenizer java class
            </summary>
            <summary>
                it's more or less the same as the one in the GNU classpath
            </summary>
        </member>
        <member name="T:System.util.Util">
            <summary>
                Summary description for Util.
            </summary>
        </member>
        <member name="F:System.util.zlib.Adler32.Base">
            <summary>
                largest prime smaller than 65536
            </summary>
        </member>
        <member name="F:System.util.zlib.Adler32.Nmax">
            <summary>
                NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1)
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.BlockDone">
            <summary>
                block flush performed
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.FinishDone">
            <summary>
                finish done, accept no more input or output
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.FinishStarted">
            <summary>
                finish started, need only more output at next deflate
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.NeedMore">
            <summary>
                block not completed, need more input or more output
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.PresetDict">
            <summary>
                preset dictionary flag in zlib header
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.Rep36">
            <summary>
                repeat previous bit length 3-6 times (2 bits of repeat count)
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.Repz11138">
            <summary>
                repeat a zero length 11-138 times  (7 bits of repeat count)
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.Repz310">
            <summary>
                repeat a zero length 3-10 times  (3 bits of repeat count)
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.ZBinary">
            <summary>
                The three kinds of block type
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.ZDeflated">
            <summary>
                The deflate compression method
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.BiBuf">
            <summary>
                Output buffer. bits are inserted starting at the bottom (least
            </summary>
            <summary>
                significant bits).
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.BiValid">
            <summary>
                Number of valid bits in bi_buf.  All bits above the last valid bit
            </summary>
            <summary>
                are always zero.
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.BlCount">
            <summary>
                number of codes at each bit length for an optimal tree
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.Depth">
            <summary>
                Depth of each subtree used as tie breaker for trees of equal frequency
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.GoodMatch">
            <summary>
                Use a faster search when the previous match is longer than this
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.HashShift">
            <summary>
                Number of bits by which ins_h must be shifted at each input
            </summary>
            <summary>
                step. It must be such that after MIN_MATCH steps, the oldest
            </summary>
            <summary>
                byte no longer takes part in the hash key, that is:
            </summary>
            <summary>
                hash_shift * MIN_MATCH >= hash_bits
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.Heap">
            <summary>
                heap used to build the Huffman trees
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.LBuf">
            <summary>
                The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
            </summary>
            <summary>
                The same heap array is used to build all trees.
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.LitBufsize">
            <summary>
                Size of match buffer for literals/lengths.  There are 4 reasons for
            </summary>
            <summary>
                limiting lit_bufsize to 64K:
            </summary>
            <summary>
                - frequencies can be kept in 16 bit counters
            </summary>
            <summary>
                - if compression is not successful for the first block, all input
            </summary>
            <summary>
                data is still in the window so we can still emit a stored block even
            </summary>
            <summary>
                when input comes from standard input.  (This can also be done for
            </summary>
            <summary>
                all blocks if lit_bufsize is not greater than 32K.)
            </summary>
            <summary>
                - if compression is not successful for a file smaller than 64K, we can
            </summary>
            <summary>
                even emit a stored file instead of a stored block (saving 5 bytes).
            </summary>
            <summary>
                This is applicable only for zip (not gzip or zlib).
            </summary>
            <summary>
                - creating new Huffman trees less frequently may not provide fast
            </summary>
            <summary>
                adaptation to changes in the input data statistics. (Take for
            </summary>
            <summary>
                example a binary file with poorly compressible code followed by
            </summary>
            <summary>
                a highly compressible string table.) Smaller buffer sizes give
            </summary>
            <summary>
                fast adaptation but have of course the overhead of transmitting
            </summary>
            <summary>
                trees more frequently.
            </summary>
            <summary>
                - I can't count above 4
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.MatchLength">
            <summary>
                Window position at the beginning of the current output block. Gets
            </summary>
            <summary>
                negative when the window is moved backwards.
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.MaxChainLength">
            <summary>
                To speed up deflation, hash chains are never searched beyond this
            </summary>
            <summary>
                length.  A higher limit improves compression ratio but degrades the speed.
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.MaxLazyMatch">
            <summary>
                Attempt to find a better match only when the current match is strictly
            </summary>
            <summary>
                smaller than this value. This mechanism is used only for compression
            </summary>
            <summary>
                levels >= 4.
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.NiceMatch">
            <summary>
                Stop searching when current match exceeds this
            </summary>
        </member>
        <member name="F:System.util.zlib.Deflate.PrevLength">
            <summary>
                Length of the best match at previous step. Matches not greater than this
            </summary>
            <summary>
                are discarded. This is used in the lazy match evaluation.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate._tr_align">
            <summary>
                Send one empty static block to give enough lookahead for inflate.
            </summary>
            <summary>
                This takes 10 bits, of which 7 may remain in the bit buffer.
            </summary>
            <summary>
                The current inflate code requires 9 bits of lookahead. If the
            </summary>
            <summary>
                last two codes for the previous block (real code plus EOB) were coded
            </summary>
            <summary>
                on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
            </summary>
            <summary>
                the last real code. In this case we send two empty static blocks instead
            </summary>
            <summary>
                of one. (There are no problems if the previous block is stored or fixed.)
            </summary>
            <summary>
                To simplify the code, we assume the worst case of last real code encoded
            </summary>
            <summary>
                on one bit only.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate._tr_flush_block(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Determine the best encoding for the current block: dynamic trees, static
            </summary>
            <summary>
                trees or store, and output the encoded block to the zip file.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate._tr_stored_block(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Send a stored block
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate._tr_tally(System.Int32,System.Int32)">
            <summary>
                Save the match info and tally the frequency counts. Return true if
            </summary>
            <summary>
                the current block must be flushed.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.bi_flush">
            <summary>
                Flush the bit buffer, keeping at most 7 bits in it.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.bi_windup">
            <summary>
                Flush the bit buffer and align the output on a byte boundary
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.build_bl_tree">
            <summary>
                Construct the Huffman tree for the bit lengths and return the index in
            </summary>
            <summary>
                bl_order of the last bit length code to send.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.compress_block(System.Int16[],System.Int16[])">
            <summary>
                Send the block data compressed using the given Huffman trees
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.copy_block(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Copy a stored block, storing first the length and its
            </summary>
            <summary>
                one's complement if requested.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.deflate_fast(System.Int32)">
            <summary>
                Compress as much as possible from the input stream, return the current
            </summary>
            <summary>
                block state.
            </summary>
            <summary>
                This function does not perform lazy evaluation of matches and inserts
            </summary>
            <summary>
                new strings in the dictionary only for unmatched strings or for short
            </summary>
            <summary>
                matches. It is used only for the fast compression options.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.deflate_slow(System.Int32)">
            <summary>
                Same as above, but achieves better compression. We use a lazy
            </summary>
            <summary>
                evaluation for matches: a match is finally adopted only if there is
            </summary>
            <summary>
                no better match at the next window position.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.deflate_stored(System.Int32)">
            <summary>
                Copy without compression as much as possible from the input stream, return
            </summary>
            <summary>
                the current block state.
            </summary>
            <summary>
                This function does not insert new strings in the dictionary since
            </summary>
            <summary>
                uncompressible data is probably not useful. This function is used
            </summary>
            <summary>
                only for the level=0 compression option.
            </summary>
            <summary>
                NOTE: this function should be optimized to avoid extra copying from
            </summary>
            <summary>
                window to pending_buf.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.fill_window">
            <summary>
                Fill the window when the lookahead becomes insufficient.
            </summary>
            <summary>
                Updates strstart and lookahead.
            </summary>
            <summary>
            </summary>
            <summary>
                At least one byte has been read, or avail_in == 0; reads are
            </summary>
            <summary>
                performed for at least two bytes (required for the zip translate_eol
            </summary>
            <summary>
                option -- not supported here).
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.Pqdownheap(System.Int16[],System.Int32)">
            <summary>
                Restore the heap property by moving down the tree starting at node k,
            </summary>
            <summary>
                exchanging a node with the smallest of its two sons if necessary, stopping
            </summary>
            <summary>
                when the heap property is re-established (each father smaller than its
            </summary>
            <summary>
                two sons).
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.put_byte(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Output a byte on the stream.
            </summary>
            <summary>
                IN assertion: there is enough room in pending_buf.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.scan_tree(System.Int16[],System.Int32)">
            <summary>
                Scan a literal or distance tree to determine the frequencies of the codes
            </summary>
            <summary>
                in the bit length tree.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.send_all_trees(System.Int32,System.Int32,System.Int32)">
            <summary>
                Send the header for a block using dynamic Huffman trees: the counts, the
            </summary>
            <summary>
                lengths of the bit length codes, the literal tree and the distance tree.
            </summary>
            <summary>
                IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.send_tree(System.Int16[],System.Int32)">
            <summary>
                Send a literal or distance tree in compressed form, using the codes in
            </summary>
            <summary>
                bl_tree.
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.set_data_type">
            <summary>
                frequencies does not exceed 64K (to fit in an int on 16 bit machines).
            </summary>
        </member>
        <member name="M:System.util.zlib.Deflate.tr_init">
            <summary>
                Buffer for distances. To simplify the code, d_buf and l_buf have
            </summary>
            <summary>
                the same number of elements. To use different lengths, an extra flag
            </summary>
            <summary>
                array would be necessary.
            </summary>
            <summary>
                Initialize the tree data structures for a new zlib stream.
            </summary>
        </member>
        <member name="F:System.util.zlib.InfBlocks._border">
            <summary>
                Table for deflate from PKZIP's appnote.txt.
            </summary>
        </member>
        <member name="F:System.util.zlib.InfBlocks._inflateMask">
            <summary>
                And'ing with mask[n] masks the lower n bits
            </summary>
        </member>
        <member name="F:System.util.zlib.InfBlocks.Bitk">
            <summary>
                mode independent information
            </summary>
        </member>
        <member name="M:System.util.zlib.InfBlocks.inflate_flush(System.util.zlib.ZStream,System.Int32)">
            <summary>
                copy as much as possible from the sliding window to the output area
            </summary>
        </member>
        <member name="M:System.util.zlib.InfBlocks.sync_point">
            <summary>
                Returns true if inflate is currently at the end of a block generated
            </summary>
            <summary>
                by Z_SYNC_FLUSH or Z_FULL_FLUSH.
            </summary>
        </member>
        <member name="F:System.util.zlib.InfCodes.Start">
            <summary>
                waiting for "i:"=input,
            </summary>
            <summary>
                "o:"=output,
            </summary>
            <summary>
                "x:"=nothing
            </summary>
        </member>
        <member name="F:System.util.zlib.InfCodes._get">
            <summary>
                if EXT or COPY, where and how much
            </summary>
        </member>
        <member name="F:System.util.zlib.InfCodes._len">
            <summary>
                mode dependent information
            </summary>
        </member>
        <member name="F:System.util.zlib.Inflate.PresetDict">
            <summary>
                preset dictionary flag in zlib header
            </summary>
        </member>
        <member name="F:System.util.zlib.Inflate.Marker">
            <summary>
                if BAD, inflateSync's marker bytes count
            </summary>
        </member>
        <member name="F:System.util.zlib.Inflate.method">
            <summary>
                mode dependent information
            </summary>
        </member>
        <member name="F:System.util.zlib.Inflate.Nowrap">
            <summary>
                mode independent information
            </summary>
        </member>
        <member name="F:System.util.zlib.Inflate.Was">
            <summary>
                if CHECK, check values to compare
            </summary>
        </member>
        <member name="M:System.util.zlib.Inflate.InflateSyncPoint(System.util.zlib.ZStream)">
            <summary>
                Returns true if inflate is currently at the end of a block generated
            </summary>
            <summary>
                by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
            </summary>
            <summary>
                implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH
            </summary>
            <summary>
                but removes the length bytes of the resulting empty stored block. When
            </summary>
            <summary>
                decompressing, PPP checks that at the end of input packet, inflate is
            </summary>
            <summary>
                waiting for these length bytes.
            </summary>
        </member>
        <member name="F:System.util.zlib.InfTree.Bmax">
            <summary>
                If BMAX needs to be larger than 16, then h and x[] should be uLong.
            </summary>
        </member>
        <member name="F:System.util.zlib.InfTree._cplens">
            <summary>
                Tables for deflate from PKZIP's appnote.txt.
            </summary>
        </member>
        <member name="F:System.util.zlib.InfTree._cplext">
            <summary>
                see note #13 above about 258
            </summary>
        </member>
        <member name="F:System.util.zlib.JZlib.Z_FILTERED">
            <summary>
                compression strategy
            </summary>
        </member>
        <member name="F:System.util.zlib.JZlib.Z_NO_COMPRESSION">
            <summary>
                compression levels
            </summary>
        </member>
        <member name="F:System.util.zlib.StaticTree.MAX_BL_BITS">
            <summary>
                Bit length codes must not exceed MAX_BL_BITS bits
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.DIST_CODE_LEN">
            <summary>
                The lengths of the bit length codes are sent in order of decreasing
            </summary>
            <summary>
                probability, to avoid transmitting the lengths for unused bit
            </summary>
            <summary>
                length codes.
            </summary>
            <summary>
                see definition of array dist_code below
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.END_BLOCK">
            <summary>
                end of block literal code
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.MAX_BL_BITS">
            <summary>
                Bit length codes must not exceed MAX_BL_BITS bits
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.REP_3_6">
            <summary>
                repeat previous bit length 3-6 times (2 bits of repeat count)
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.REPZ_11_138">
            <summary>
                repeat a zero length 11-138 times  (7 bits of repeat count)
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.REPZ_3_10">
            <summary>
                repeat a zero length 3-10 times  (3 bits of repeat count)
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.ExtraBlbits">
            <summary>
                extra bits for each bit length code
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.ExtraDbits">
            <summary>
                extra bits for each distance code
            </summary>
        </member>
        <member name="F:System.util.zlib.Tree.ExtraLbits">
            <summary>
                extra bits for each length code
            </summary>
        </member>
        <member name="M:System.util.zlib.Tree.bi_reverse(System.Int32,System.Int32)">
            <summary>
                Reverse the first len bits of a code, using straightforward code (a faster
            </summary>
        </member>
        <member name="M:System.util.zlib.Tree.d_code(System.Int32)">
            <summary>
                Mapping from a distance to a distance code. dist is the distance - 1 and
            </summary>
            <summary>
                must not have side effects. _dist_code[256] and _dist_code[257] are never
            </summary>
            <summary>
                used.
            </summary>
        </member>
        <member name="M:System.util.zlib.Tree.gen_codes(System.Int16[],System.Int32,System.Int16[])">
            <summary>
                Generate the codes for a given tree and bit counts (which need not be
            </summary>
            <summary>
                optimal).
            </summary>
            <summary>
                IN assertion: the array bl_count contains the bit length statistics for
            </summary>
            <summary>
                the given tree and the field len is set for all tree elements.
            </summary>
            <summary>
                OUT assertion: the field code is set for all tree elements of non
            </summary>
            <summary>
                zero code length.
            </summary>
        </member>
        <member name="M:System.util.zlib.Tree.build_tree(System.util.zlib.Deflate)">
            <summary>
                Construct one Huffman tree and assigns the code bit strings and lengths.
            </summary>
            <summary>
                Update the total bit length for the current block.
            </summary>
            <summary>
                IN assertion: the field freq is set for all tree elements.
            </summary>
            <summary>
                OUT assertions: the fields len and code are set to the optimal bit length
            </summary>
            <summary>
                and corresponding code. The length opt_len is updated; static_len is
            </summary>
            <summary>
                also updated if stree is not null. The field max_code is set.
            </summary>
        </member>
        <member name="M:System.util.zlib.Tree.gen_bitlen(System.util.zlib.Deflate)">
            <summary>
                Compute the optimal bit lengths for a tree and update the total bit length
            </summary>
            <summary>
                for the current block.
            </summary>
            <summary>
                IN assertion: the fields freq and dad are set, heap[heap_max] and
            </summary>
            <summary>
                above are the tree nodes sorted by increasing frequency.
            </summary>
            <summary>
                OUT assertions: the field len is set to the optimal bit length, the
            </summary>
            <summary>
                array bl_count contains the frequencies for each bit length.
            </summary>
            <summary>
                The length opt_len is updated; static_len is also updated if stree is
            </summary>
            <summary>
                not null.
            </summary>
        </member>
        <member name="T:System.util.zlib.ZDeflaterOutputStream">
            <summary>
                Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:System.util.zlib.ZInflaterInputStream">
            <summary>
                Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="M:System.util.zlib.ZStream.flush_pending">
            <summary>
                Flush as much pending output as possible. All deflate() output goes
            </summary>
            <summary>
                through this function so some applications may wish to modify it
            </summary>
            <summary>
                to avoid allocating a large strm->next_out buffer and copying into it.
            </summary>
            <summary>
                (See also read_buf()).
            </summary>
        </member>
        <member name="M:System.util.zlib.ZStream.read_buf(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Read a new buffer from the current input stream, update the adler32
            </summary>
            <summary>
                and total number of bytes read.  All deflate() input goes through
            </summary>
            <summary>
                this function so some applications may wish to modify it to avoid
            </summary>
            <summary>
                allocating a large strm->next_in buffer and copying from it.
            </summary>
            <summary>
                (See also flush_pending()).
            </summary>
        </member>
        <member name="T:System.IO.StreamHelpers">
            <summary>Provides methods to help in the implementation of Stream-derived types.</summary>
        </member>
        <member name="M:System.IO.StreamHelpers.ValidateCopyToArgs(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>Validate the arguments to CopyTo, as would Stream.CopyTo.</summary>
        </member>
    </members>
</doc>
